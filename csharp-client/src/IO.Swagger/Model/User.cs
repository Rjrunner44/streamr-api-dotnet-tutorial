/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
    public partial class User :  IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected User() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="name">User&#39;s real name (required).</param>
        /// <param name="username">The username (email address or Ethereum address) (required).</param>
        /// <param name="imageUrlSmall">URL of the user&#39;s avatar image (small).</param>
        /// <param name="imageUrlLarge">URL of the user&#39;s avatar image (small).</param>
        /// <param name="lastLogin">Date and time of the user&#39;s previous login.</param>
        public User(string name = default(string), string username = default(string), string imageUrlSmall = default(string), string imageUrlLarge = default(string), DateTime? lastLogin = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for User and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for User and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            this.ImageUrlSmall = imageUrlSmall;
            this.ImageUrlLarge = imageUrlLarge;
            this.LastLogin = lastLogin;
        }
        
        /// <summary>
        /// User&#39;s real name
        /// </summary>
        /// <value>User&#39;s real name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The username (email address or Ethereum address)
        /// </summary>
        /// <value>The username (email address or Ethereum address)</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// URL of the user&#39;s avatar image (small)
        /// </summary>
        /// <value>URL of the user&#39;s avatar image (small)</value>
        [DataMember(Name="imageUrlSmall", EmitDefaultValue=false)]
        public string ImageUrlSmall { get; set; }

        /// <summary>
        /// URL of the user&#39;s avatar image (small)
        /// </summary>
        /// <value>URL of the user&#39;s avatar image (small)</value>
        [DataMember(Name="imageUrlLarge", EmitDefaultValue=false)]
        public string ImageUrlLarge { get; set; }

        /// <summary>
        /// Date and time of the user&#39;s previous login
        /// </summary>
        /// <value>Date and time of the user&#39;s previous login</value>
        [DataMember(Name="lastLogin", EmitDefaultValue=false)]
        public DateTime? LastLogin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  ImageUrlSmall: ").Append(ImageUrlSmall).Append("\n");
            sb.Append("  ImageUrlLarge: ").Append(ImageUrlLarge).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.ImageUrlSmall == input.ImageUrlSmall ||
                    (this.ImageUrlSmall != null &&
                    this.ImageUrlSmall.Equals(input.ImageUrlSmall))
                ) && 
                (
                    this.ImageUrlLarge == input.ImageUrlLarge ||
                    (this.ImageUrlLarge != null &&
                    this.ImageUrlLarge.Equals(input.ImageUrlLarge))
                ) && 
                (
                    this.LastLogin == input.LastLogin ||
                    (this.LastLogin != null &&
                    this.LastLogin.Equals(input.LastLogin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.ImageUrlSmall != null)
                    hashCode = hashCode * 59 + this.ImageUrlSmall.GetHashCode();
                if (this.ImageUrlLarge != null)
                    hashCode = hashCode * 59 + this.ImageUrlLarge.GetHashCode();
                if (this.LastLogin != null)
                    hashCode = hashCode * 59 + this.LastLogin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
