/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Stream
    /// </summary>
    [DataContract]
    public partial class Stream :  IEquatable<Stream>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Stream" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Stream() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Stream" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for this stream..</param>
        /// <param name="name">Name of this stream. (required).</param>
        /// <param name="description">Description of this stream..</param>
        /// <param name="config">config.</param>
        /// <param name="uiChannel">Indicates whether this stream is an UI channel: a stream used internally to push updates to UI widgets..</param>
        /// <param name="partitions">Number of partitions in this stream. Defaults to 1 (unpartitioned)..</param>
        /// <param name="requireSignedData">If true, all messages in this stream must be cryptographically signed. Client&#39;s should not accept unsigned messages..</param>
        /// <param name="requireEncryptedData">If true, all data in this stream must be encrypted..</param>
        /// <param name="inbox">If true, this stream is a user&#39;s inbox..</param>
        /// <param name="dateCreated">ISO-8601 timestamp of when stream was created..</param>
        /// <param name="lastUpdated">ISO-8601 timestamp of when stream details were updated..</param>
        /// <param name="autoConfigure">If true, always try to automatically configure field names and types..</param>
        /// <param name="storageDays">Historical data storage period (days).</param>
        /// <param name="inactivityThresholdHours">Inactivity period for a stream in hours..</param>
        public Stream(string id = default(string), string name = default(string), string description = default(string), StreamConfig config = default(StreamConfig), bool? uiChannel = default(bool?), int? partitions = default(int?), bool? requireSignedData = default(bool?), bool? requireEncryptedData = default(bool?), bool? inbox = default(bool?), string dateCreated = default(string), string lastUpdated = default(string), bool? autoConfigure = default(bool?), int? storageDays = default(int?), int? inactivityThresholdHours = default(int?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Stream and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Id = id;
            this.Description = description;
            this.Config = config;
            this.UiChannel = uiChannel;
            this.Partitions = partitions;
            this.RequireSignedData = requireSignedData;
            this.RequireEncryptedData = requireEncryptedData;
            this.Inbox = inbox;
            this.DateCreated = dateCreated;
            this.LastUpdated = lastUpdated;
            this.AutoConfigure = autoConfigure;
            this.StorageDays = storageDays;
            this.InactivityThresholdHours = inactivityThresholdHours;
        }
        
        /// <summary>
        /// Unique identifier for this stream.
        /// </summary>
        /// <value>Unique identifier for this stream.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of this stream.
        /// </summary>
        /// <value>Name of this stream.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of this stream.
        /// </summary>
        /// <value>Description of this stream.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public StreamConfig Config { get; set; }

        /// <summary>
        /// Indicates whether this stream is an UI channel: a stream used internally to push updates to UI widgets.
        /// </summary>
        /// <value>Indicates whether this stream is an UI channel: a stream used internally to push updates to UI widgets.</value>
        [DataMember(Name="uiChannel", EmitDefaultValue=false)]
        public bool? UiChannel { get; set; }

        /// <summary>
        /// Number of partitions in this stream. Defaults to 1 (unpartitioned).
        /// </summary>
        /// <value>Number of partitions in this stream. Defaults to 1 (unpartitioned).</value>
        [DataMember(Name="partitions", EmitDefaultValue=false)]
        public int? Partitions { get; set; }

        /// <summary>
        /// If true, all messages in this stream must be cryptographically signed. Client&#39;s should not accept unsigned messages.
        /// </summary>
        /// <value>If true, all messages in this stream must be cryptographically signed. Client&#39;s should not accept unsigned messages.</value>
        [DataMember(Name="requireSignedData", EmitDefaultValue=false)]
        public bool? RequireSignedData { get; set; }

        /// <summary>
        /// If true, all data in this stream must be encrypted.
        /// </summary>
        /// <value>If true, all data in this stream must be encrypted.</value>
        [DataMember(Name="requireEncryptedData", EmitDefaultValue=false)]
        public bool? RequireEncryptedData { get; set; }

        /// <summary>
        /// If true, this stream is a user&#39;s inbox.
        /// </summary>
        /// <value>If true, this stream is a user&#39;s inbox.</value>
        [DataMember(Name="inbox", EmitDefaultValue=false)]
        public bool? Inbox { get; set; }

        /// <summary>
        /// ISO-8601 timestamp of when stream was created.
        /// </summary>
        /// <value>ISO-8601 timestamp of when stream was created.</value>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// ISO-8601 timestamp of when stream details were updated.
        /// </summary>
        /// <value>ISO-8601 timestamp of when stream details were updated.</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// If true, always try to automatically configure field names and types.
        /// </summary>
        /// <value>If true, always try to automatically configure field names and types.</value>
        [DataMember(Name="autoConfigure", EmitDefaultValue=false)]
        public bool? AutoConfigure { get; set; }

        /// <summary>
        /// Historical data storage period (days)
        /// </summary>
        /// <value>Historical data storage period (days)</value>
        [DataMember(Name="storageDays", EmitDefaultValue=false)]
        public int? StorageDays { get; set; }

        /// <summary>
        /// Inactivity period for a stream in hours.
        /// </summary>
        /// <value>Inactivity period for a stream in hours.</value>
        [DataMember(Name="inactivityThresholdHours", EmitDefaultValue=false)]
        public int? InactivityThresholdHours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Stream {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  UiChannel: ").Append(UiChannel).Append("\n");
            sb.Append("  Partitions: ").Append(Partitions).Append("\n");
            sb.Append("  RequireSignedData: ").Append(RequireSignedData).Append("\n");
            sb.Append("  RequireEncryptedData: ").Append(RequireEncryptedData).Append("\n");
            sb.Append("  Inbox: ").Append(Inbox).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  AutoConfigure: ").Append(AutoConfigure).Append("\n");
            sb.Append("  StorageDays: ").Append(StorageDays).Append("\n");
            sb.Append("  InactivityThresholdHours: ").Append(InactivityThresholdHours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Stream);
        }

        /// <summary>
        /// Returns true if Stream instances are equal
        /// </summary>
        /// <param name="input">Instance of Stream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stream input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.UiChannel == input.UiChannel ||
                    (this.UiChannel != null &&
                    this.UiChannel.Equals(input.UiChannel))
                ) && 
                (
                    this.Partitions == input.Partitions ||
                    (this.Partitions != null &&
                    this.Partitions.Equals(input.Partitions))
                ) && 
                (
                    this.RequireSignedData == input.RequireSignedData ||
                    (this.RequireSignedData != null &&
                    this.RequireSignedData.Equals(input.RequireSignedData))
                ) && 
                (
                    this.RequireEncryptedData == input.RequireEncryptedData ||
                    (this.RequireEncryptedData != null &&
                    this.RequireEncryptedData.Equals(input.RequireEncryptedData))
                ) && 
                (
                    this.Inbox == input.Inbox ||
                    (this.Inbox != null &&
                    this.Inbox.Equals(input.Inbox))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.AutoConfigure == input.AutoConfigure ||
                    (this.AutoConfigure != null &&
                    this.AutoConfigure.Equals(input.AutoConfigure))
                ) && 
                (
                    this.StorageDays == input.StorageDays ||
                    (this.StorageDays != null &&
                    this.StorageDays.Equals(input.StorageDays))
                ) && 
                (
                    this.InactivityThresholdHours == input.InactivityThresholdHours ||
                    (this.InactivityThresholdHours != null &&
                    this.InactivityThresholdHours.Equals(input.InactivityThresholdHours))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.UiChannel != null)
                    hashCode = hashCode * 59 + this.UiChannel.GetHashCode();
                if (this.Partitions != null)
                    hashCode = hashCode * 59 + this.Partitions.GetHashCode();
                if (this.RequireSignedData != null)
                    hashCode = hashCode * 59 + this.RequireSignedData.GetHashCode();
                if (this.RequireEncryptedData != null)
                    hashCode = hashCode * 59 + this.RequireEncryptedData.GetHashCode();
                if (this.Inbox != null)
                    hashCode = hashCode * 59 + this.Inbox.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.AutoConfigure != null)
                    hashCode = hashCode * 59 + this.AutoConfigure.GetHashCode();
                if (this.StorageDays != null)
                    hashCode = hashCode * 59 + this.StorageDays.GetHashCode();
                if (this.InactivityThresholdHours != null)
                    hashCode = hashCode * 59 + this.InactivityThresholdHours.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
