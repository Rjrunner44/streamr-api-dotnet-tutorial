/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Product&#39;s legal terms of use.
    /// </summary>
    [DataContract]
    public partial class ProductTermsOfUse :  IEquatable<ProductTermsOfUse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTermsOfUse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductTermsOfUse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTermsOfUse" /> class.
        /// </summary>
        /// <param name="commercialUse">Terms of use for commercial use. (required) (default to true).</param>
        /// <param name="redistribution">Terms of use for redistribution (required) (default to true).</param>
        /// <param name="reselling">Terms of use for reselling. (required) (default to true).</param>
        /// <param name="storage">Terms of use for storage. (required) (default to true).</param>
        /// <param name="termsName">Name of the custom terms of use document&#39;s link..</param>
        /// <param name="termsUrl">URL address for custom terms of use document..</param>
        public ProductTermsOfUse(bool? commercialUse = true, bool? redistribution = true, bool? reselling = true, bool? storage = true, string termsName = default(string), string termsUrl = default(string))
        {
            // to ensure "commercialUse" is required (not null)
            if (commercialUse == null)
            {
                throw new InvalidDataException("commercialUse is a required property for ProductTermsOfUse and cannot be null");
            }
            else
            {
                this.CommercialUse = commercialUse;
            }
            // to ensure "redistribution" is required (not null)
            if (redistribution == null)
            {
                throw new InvalidDataException("redistribution is a required property for ProductTermsOfUse and cannot be null");
            }
            else
            {
                this.Redistribution = redistribution;
            }
            // to ensure "reselling" is required (not null)
            if (reselling == null)
            {
                throw new InvalidDataException("reselling is a required property for ProductTermsOfUse and cannot be null");
            }
            else
            {
                this.Reselling = reselling;
            }
            // to ensure "storage" is required (not null)
            if (storage == null)
            {
                throw new InvalidDataException("storage is a required property for ProductTermsOfUse and cannot be null");
            }
            else
            {
                this.Storage = storage;
            }
            this.TermsName = termsName;
            this.TermsUrl = termsUrl;
        }
        
        /// <summary>
        /// Terms of use for commercial use.
        /// </summary>
        /// <value>Terms of use for commercial use.</value>
        [DataMember(Name="commercialUse", EmitDefaultValue=false)]
        public bool? CommercialUse { get; set; }

        /// <summary>
        /// Terms of use for redistribution
        /// </summary>
        /// <value>Terms of use for redistribution</value>
        [DataMember(Name="redistribution", EmitDefaultValue=false)]
        public bool? Redistribution { get; set; }

        /// <summary>
        /// Terms of use for reselling.
        /// </summary>
        /// <value>Terms of use for reselling.</value>
        [DataMember(Name="reselling", EmitDefaultValue=false)]
        public bool? Reselling { get; set; }

        /// <summary>
        /// Terms of use for storage.
        /// </summary>
        /// <value>Terms of use for storage.</value>
        [DataMember(Name="storage", EmitDefaultValue=false)]
        public bool? Storage { get; set; }

        /// <summary>
        /// Name of the custom terms of use document&#39;s link.
        /// </summary>
        /// <value>Name of the custom terms of use document&#39;s link.</value>
        [DataMember(Name="termsName", EmitDefaultValue=false)]
        public string TermsName { get; set; }

        /// <summary>
        /// URL address for custom terms of use document.
        /// </summary>
        /// <value>URL address for custom terms of use document.</value>
        [DataMember(Name="termsUrl", EmitDefaultValue=false)]
        public string TermsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductTermsOfUse {\n");
            sb.Append("  CommercialUse: ").Append(CommercialUse).Append("\n");
            sb.Append("  Redistribution: ").Append(Redistribution).Append("\n");
            sb.Append("  Reselling: ").Append(Reselling).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  TermsName: ").Append(TermsName).Append("\n");
            sb.Append("  TermsUrl: ").Append(TermsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductTermsOfUse);
        }

        /// <summary>
        /// Returns true if ProductTermsOfUse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductTermsOfUse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductTermsOfUse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommercialUse == input.CommercialUse ||
                    (this.CommercialUse != null &&
                    this.CommercialUse.Equals(input.CommercialUse))
                ) && 
                (
                    this.Redistribution == input.Redistribution ||
                    (this.Redistribution != null &&
                    this.Redistribution.Equals(input.Redistribution))
                ) && 
                (
                    this.Reselling == input.Reselling ||
                    (this.Reselling != null &&
                    this.Reselling.Equals(input.Reselling))
                ) && 
                (
                    this.Storage == input.Storage ||
                    (this.Storage != null &&
                    this.Storage.Equals(input.Storage))
                ) && 
                (
                    this.TermsName == input.TermsName ||
                    (this.TermsName != null &&
                    this.TermsName.Equals(input.TermsName))
                ) && 
                (
                    this.TermsUrl == input.TermsUrl ||
                    (this.TermsUrl != null &&
                    this.TermsUrl.Equals(input.TermsUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommercialUse != null)
                    hashCode = hashCode * 59 + this.CommercialUse.GetHashCode();
                if (this.Redistribution != null)
                    hashCode = hashCode * 59 + this.Redistribution.GetHashCode();
                if (this.Reselling != null)
                    hashCode = hashCode * 59 + this.Reselling.GetHashCode();
                if (this.Storage != null)
                    hashCode = hashCode * 59 + this.Storage.GetHashCode();
                if (this.TermsName != null)
                    hashCode = hashCode * 59 + this.TermsName.GetHashCode();
                if (this.TermsUrl != null)
                    hashCode = hashCode * 59 + this.TermsUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TermsName (string) maxLength
            if(this.TermsName != null && this.TermsName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TermsName, length must be less than 100.", new [] { "TermsName" });
            }

            // TermsUrl (string) maxLength
            if(this.TermsUrl != null && this.TermsUrl.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TermsUrl, length must be less than 2048.", new [] { "TermsUrl" });
            }

            yield break;
        }
    }

}
