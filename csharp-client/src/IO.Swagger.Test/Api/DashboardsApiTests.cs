/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DashboardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DashboardsApiTests
    {
        private DashboardsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DashboardsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DashboardsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DashboardsApi
            //Assert.IsInstanceOfType(typeof(DashboardsApi), instance, "instance is a DashboardsApi");
        }

        
        /// <summary>
        /// Test DashboardsDashboardIdItemsIdDelete
        /// </summary>
        [Test]
        public void DashboardsDashboardIdItemsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dashboardId = null;
            //string id = null;
            //instance.DashboardsDashboardIdItemsIdDelete(dashboardId, id);
            
        }
        
        /// <summary>
        /// Test DashboardsDashboardIdItemsIdGet
        /// </summary>
        [Test]
        public void DashboardsDashboardIdItemsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dashboardId = null;
            //string id = null;
            //var response = instance.DashboardsDashboardIdItemsIdGet(dashboardId, id);
            //Assert.IsInstanceOf<DashboardItem> (response, "response is DashboardItem");
        }
        
        /// <summary>
        /// Test DashboardsDashboardIdItemsIdPut
        /// </summary>
        [Test]
        public void DashboardsDashboardIdItemsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dashboardId = null;
            //string id = null;
            //SaveDashboardItemRequest body = null;
            //var response = instance.DashboardsDashboardIdItemsIdPut(dashboardId, id, body);
            //Assert.IsInstanceOf<DashboardItem> (response, "response is DashboardItem");
        }
        
        /// <summary>
        /// Test DashboardsGet
        /// </summary>
        [Test]
        public void DashboardsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string search = null;
            //string sortBy = null;
            //string order = null;
            //int? max = null;
            //int? offset = null;
            //bool? grantedAccess = null;
            //bool? publicAccess = null;
            //string operation = null;
            //var response = instance.DashboardsGet(name, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
            //Assert.IsInstanceOf<List<DashboardSummary>> (response, "response is List<DashboardSummary>");
        }
        
        /// <summary>
        /// Test DashboardsIdDelete
        /// </summary>
        [Test]
        public void DashboardsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DashboardsIdDelete(id);
            
        }
        
        /// <summary>
        /// Test DashboardsIdGet
        /// </summary>
        [Test]
        public void DashboardsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DashboardsIdGet(id);
            //Assert.IsInstanceOf<Dashboard> (response, "response is Dashboard");
        }
        
        /// <summary>
        /// Test DashboardsIdItemsGet
        /// </summary>
        [Test]
        public void DashboardsIdItemsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DashboardsIdItemsGet(id);
            //Assert.IsInstanceOf<List<DashboardItem>> (response, "response is List<DashboardItem>");
        }
        
        /// <summary>
        /// Test DashboardsIdItemsPost
        /// </summary>
        [Test]
        public void DashboardsIdItemsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SaveDashboardItemRequest body = null;
            //var response = instance.DashboardsIdItemsPost(id, body);
            //Assert.IsInstanceOf<DashboardItem> (response, "response is DashboardItem");
        }
        
        /// <summary>
        /// Test DashboardsIdPut
        /// </summary>
        [Test]
        public void DashboardsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DashboardSaveRequest body = null;
            //var response = instance.DashboardsIdPut(id, body);
            //Assert.IsInstanceOf<Dashboard> (response, "response is Dashboard");
        }
        
        /// <summary>
        /// Test DashboardsPost
        /// </summary>
        [Test]
        public void DashboardsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DashboardSaveRequest body = null;
            //var response = instance.DashboardsPost(body);
            //Assert.IsInstanceOf<Dashboard> (response, "response is Dashboard");
        }
        
    }

}
