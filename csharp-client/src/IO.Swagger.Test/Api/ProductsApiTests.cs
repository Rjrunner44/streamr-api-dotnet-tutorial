/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ProductsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProductsApiTests
    {
        private ProductsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProductsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProductsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProductsApi
            //Assert.IsInstanceOfType(typeof(ProductsApi), instance, "instance is a ProductsApi");
        }

        
        /// <summary>
        /// Test ProductsGet
        /// </summary>
        [Test]
        public void ProductsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string sortBy = null;
            //string order = null;
            //int? max = null;
            //int? offset = null;
            //bool? grantedAccess = null;
            //bool? publicAccess = null;
            //string operation = null;
            //string categories = null;
            //string states = null;
            //decimal? minPrice = null;
            //decimal? maxPrice = null;
            //var response = instance.ProductsGet(search, sortBy, order, max, offset, grantedAccess, publicAccess, operation, categories, states, minPrice, maxPrice);
            //Assert.IsInstanceOf<List<Product>> (response, "response is List<Product>");
        }
        
        /// <summary>
        /// Test ProductsIdDeployFreePost
        /// </summary>
        [Test]
        public void ProductsIdDeployFreePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProductsIdDeployFreePost(id);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdGet
        /// </summary>
        [Test]
        public void ProductsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProductsIdGet(id);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdImagesPost
        /// </summary>
        [Test]
        public void ProductsIdImagesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //System.IO.Stream _file = null;
            //var response = instance.ProductsIdImagesPost(id, _file);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdPut
        /// </summary>
        [Test]
        public void ProductsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateProduct body = null;
            //var response = instance.ProductsIdPut(id, body);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdSetDeployedPost
        /// </summary>
        [Test]
        public void ProductsIdSetDeployedPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DeployedProduct body = null;
            //var response = instance.ProductsIdSetDeployedPost(id, body);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdSetDeployingPost
        /// </summary>
        [Test]
        public void ProductsIdSetDeployingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProductsIdSetDeployingPost(id);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdSetPricingPost
        /// </summary>
        [Test]
        public void ProductsIdSetPricingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DeployedProduct body = null;
            //var response = instance.ProductsIdSetPricingPost(id, body);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdSetUndeployedPost
        /// </summary>
        [Test]
        public void ProductsIdSetUndeployedPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UndeployedProduct body = null;
            //var response = instance.ProductsIdSetUndeployedPost(id, body);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdSetUndeployingPost
        /// </summary>
        [Test]
        public void ProductsIdSetUndeployingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProductsIdSetUndeployingPost(id);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsIdStreamsGet
        /// </summary>
        [Test]
        public void ProductsIdStreamsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProductsIdStreamsGet(id);
            //Assert.IsInstanceOf<List<Stream>> (response, "response is List<Stream>");
        }
        
        /// <summary>
        /// Test ProductsIdStreamsStreamIdDelete
        /// </summary>
        [Test]
        public void ProductsIdStreamsStreamIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string streamId = null;
            //instance.ProductsIdStreamsStreamIdDelete(id, streamId);
            
        }
        
        /// <summary>
        /// Test ProductsIdStreamsStreamIdPut
        /// </summary>
        [Test]
        public void ProductsIdStreamsStreamIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string streamId = null;
            //instance.ProductsIdStreamsStreamIdPut(id, streamId);
            
        }
        
        /// <summary>
        /// Test ProductsIdUndeployFreePost
        /// </summary>
        [Test]
        public void ProductsIdUndeployFreePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProductsIdUndeployFreePost(id);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsPost
        /// </summary>
        [Test]
        public void ProductsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateProduct body = null;
            //var response = instance.ProductsPost(body);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ProductsRemoveUsernameDelete
        /// </summary>
        [Test]
        public void ProductsRemoveUsernameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.ProductsRemoveUsernameDelete(username);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test UsersMeProductsGet
        /// </summary>
        [Test]
        public void UsersMeProductsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //string sortBy = null;
            //string order = null;
            //int? max = null;
            //int? offset = null;
            //bool? grantedAccess = null;
            //bool? publicAccess = null;
            //string categories = null;
            //string states = null;
            //decimal? minPrice = null;
            //decimal? maxPrice = null;
            //var response = instance.UsersMeProductsGet(search, sortBy, order, max, offset, grantedAccess, publicAccess, categories, states, minPrice, maxPrice);
            //Assert.IsInstanceOf<List<Product>> (response, "response is List<Product>");
        }
        
    }

}
