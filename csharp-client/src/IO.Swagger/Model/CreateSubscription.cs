/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateSubscription
    /// </summary>
    [DataContract]
    public partial class CreateSubscription :  IEquatable<CreateSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscription" /> class.
        /// </summary>
        /// <param name="product">Unique identifier of purchased Product (required).</param>
        /// <param name="address">Ethereum address of the buyer.</param>
        /// <param name="endsAt">End time of purchased subscription (Unix time, seconds) (required).</param>
        public CreateSubscription(string product = default(string), string address = default(string), int? endsAt = default(int?))
        {
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for CreateSubscription and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            // to ensure "endsAt" is required (not null)
            if (endsAt == null)
            {
                throw new InvalidDataException("endsAt is a required property for CreateSubscription and cannot be null");
            }
            else
            {
                this.EndsAt = endsAt;
            }
            this.Address = address;
        }
        
        /// <summary>
        /// Unique identifier of purchased Product
        /// </summary>
        /// <value>Unique identifier of purchased Product</value>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// Ethereum address of the buyer
        /// </summary>
        /// <value>Ethereum address of the buyer</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// End time of purchased subscription (Unix time, seconds)
        /// </summary>
        /// <value>End time of purchased subscription (Unix time, seconds)</value>
        [DataMember(Name="endsAt", EmitDefaultValue=false)]
        public int? EndsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSubscription {\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  EndsAt: ").Append(EndsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSubscription);
        }

        /// <summary>
        /// Returns true if CreateSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.EndsAt == input.EndsAt ||
                    (this.EndsAt != null &&
                    this.EndsAt.Equals(input.EndsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.EndsAt != null)
                    hashCode = hashCode * 59 + this.EndsAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
