/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateProduct
    /// </summary>
    [DataContract]
    public partial class CreateProduct :  IEquatable<CreateProduct>, IValidatableObject
    {
        /// <summary>
        /// Type of Product
        /// </summary>
        /// <value>Type of Product</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 1,
            
            /// <summary>
            /// Enum DATAUNION for value: DATAUNION
            /// </summary>
            [EnumMember(Value = "DATAUNION")]
            DATAUNION = 2
        }

        /// <summary>
        /// Type of Product
        /// </summary>
        /// <value>Type of Product</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Unit currency
        /// </summary>
        /// <value>Unit currency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriceCurrencyEnum
        {
            
            /// <summary>
            /// Enum DATA for value: DATA
            /// </summary>
            [EnumMember(Value = "DATA")]
            DATA = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2
        }

        /// <summary>
        /// Unit currency
        /// </summary>
        /// <value>Unit currency</value>
        [DataMember(Name="priceCurrency", EmitDefaultValue=false)]
        public PriceCurrencyEnum? PriceCurrency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProduct" /> class.
        /// </summary>
        /// <param name="type">Type of Product.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="category">identifier of Category this Product belong to.</param>
        /// <param name="streams">List of Stream identifiers that belong to this Product.</param>
        /// <param name="previewStream">Identifier of Stream selected for preview.</param>
        /// <param name="previewConfigJson">Configuration of previewStream.</param>
        /// <param name="ownerAddress">Ethereum address of owner.</param>
        /// <param name="beneficiaryAddress">Ethereum address of beneficiary.</param>
        /// <param name="pricePerSecond">Unit cost per second.</param>
        /// <param name="priceCurrency">Unit currency.</param>
        /// <param name="minimumSubscriptionInSeconds">Minimum subscription length (in seconds).</param>
        /// <param name="contact">contact.</param>
        /// <param name="termsOfUse">termsOfUse.</param>
        public CreateProduct(TypeEnum? type = default(TypeEnum?), string name = default(string), string description = default(string), string category = default(string), List<string> streams = default(List<string>), string previewStream = default(string), string previewConfigJson = default(string), string ownerAddress = default(string), string beneficiaryAddress = default(string), int? pricePerSecond = default(int?), PriceCurrencyEnum? priceCurrency = default(PriceCurrencyEnum?), int? minimumSubscriptionInSeconds = default(int?), ProductContact contact = default(ProductContact), ProductTermsOfUse termsOfUse = default(ProductTermsOfUse))
        {
            this.Type = type;
            this.Name = name;
            this.Description = description;
            this.Category = category;
            this.Streams = streams;
            this.PreviewStream = previewStream;
            this.PreviewConfigJson = previewConfigJson;
            this.OwnerAddress = ownerAddress;
            this.BeneficiaryAddress = beneficiaryAddress;
            this.PricePerSecond = pricePerSecond;
            this.PriceCurrency = priceCurrency;
            this.MinimumSubscriptionInSeconds = minimumSubscriptionInSeconds;
            this.Contact = contact;
            this.TermsOfUse = termsOfUse;
        }
        

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// identifier of Category this Product belong to
        /// </summary>
        /// <value>identifier of Category this Product belong to</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// List of Stream identifiers that belong to this Product
        /// </summary>
        /// <value>List of Stream identifiers that belong to this Product</value>
        [DataMember(Name="streams", EmitDefaultValue=false)]
        public List<string> Streams { get; set; }

        /// <summary>
        /// Identifier of Stream selected for preview
        /// </summary>
        /// <value>Identifier of Stream selected for preview</value>
        [DataMember(Name="previewStream", EmitDefaultValue=false)]
        public string PreviewStream { get; set; }

        /// <summary>
        /// Configuration of previewStream
        /// </summary>
        /// <value>Configuration of previewStream</value>
        [DataMember(Name="previewConfigJson", EmitDefaultValue=false)]
        public string PreviewConfigJson { get; set; }

        /// <summary>
        /// Ethereum address of owner
        /// </summary>
        /// <value>Ethereum address of owner</value>
        [DataMember(Name="ownerAddress", EmitDefaultValue=false)]
        public string OwnerAddress { get; set; }

        /// <summary>
        /// Ethereum address of beneficiary
        /// </summary>
        /// <value>Ethereum address of beneficiary</value>
        [DataMember(Name="beneficiaryAddress", EmitDefaultValue=false)]
        public string BeneficiaryAddress { get; set; }

        /// <summary>
        /// Unit cost per second
        /// </summary>
        /// <value>Unit cost per second</value>
        [DataMember(Name="pricePerSecond", EmitDefaultValue=false)]
        public int? PricePerSecond { get; set; }


        /// <summary>
        /// Minimum subscription length (in seconds)
        /// </summary>
        /// <value>Minimum subscription length (in seconds)</value>
        [DataMember(Name="minimumSubscriptionInSeconds", EmitDefaultValue=false)]
        public int? MinimumSubscriptionInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public ProductContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfUse
        /// </summary>
        [DataMember(Name="termsOfUse", EmitDefaultValue=false)]
        public ProductTermsOfUse TermsOfUse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateProduct {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Streams: ").Append(Streams).Append("\n");
            sb.Append("  PreviewStream: ").Append(PreviewStream).Append("\n");
            sb.Append("  PreviewConfigJson: ").Append(PreviewConfigJson).Append("\n");
            sb.Append("  OwnerAddress: ").Append(OwnerAddress).Append("\n");
            sb.Append("  BeneficiaryAddress: ").Append(BeneficiaryAddress).Append("\n");
            sb.Append("  PricePerSecond: ").Append(PricePerSecond).Append("\n");
            sb.Append("  PriceCurrency: ").Append(PriceCurrency).Append("\n");
            sb.Append("  MinimumSubscriptionInSeconds: ").Append(MinimumSubscriptionInSeconds).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  TermsOfUse: ").Append(TermsOfUse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateProduct);
        }

        /// <summary>
        /// Returns true if CreateProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Streams == input.Streams ||
                    this.Streams != null &&
                    this.Streams.SequenceEqual(input.Streams)
                ) && 
                (
                    this.PreviewStream == input.PreviewStream ||
                    (this.PreviewStream != null &&
                    this.PreviewStream.Equals(input.PreviewStream))
                ) && 
                (
                    this.PreviewConfigJson == input.PreviewConfigJson ||
                    (this.PreviewConfigJson != null &&
                    this.PreviewConfigJson.Equals(input.PreviewConfigJson))
                ) && 
                (
                    this.OwnerAddress == input.OwnerAddress ||
                    (this.OwnerAddress != null &&
                    this.OwnerAddress.Equals(input.OwnerAddress))
                ) && 
                (
                    this.BeneficiaryAddress == input.BeneficiaryAddress ||
                    (this.BeneficiaryAddress != null &&
                    this.BeneficiaryAddress.Equals(input.BeneficiaryAddress))
                ) && 
                (
                    this.PricePerSecond == input.PricePerSecond ||
                    (this.PricePerSecond != null &&
                    this.PricePerSecond.Equals(input.PricePerSecond))
                ) && 
                (
                    this.PriceCurrency == input.PriceCurrency ||
                    (this.PriceCurrency != null &&
                    this.PriceCurrency.Equals(input.PriceCurrency))
                ) && 
                (
                    this.MinimumSubscriptionInSeconds == input.MinimumSubscriptionInSeconds ||
                    (this.MinimumSubscriptionInSeconds != null &&
                    this.MinimumSubscriptionInSeconds.Equals(input.MinimumSubscriptionInSeconds))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.TermsOfUse == input.TermsOfUse ||
                    (this.TermsOfUse != null &&
                    this.TermsOfUse.Equals(input.TermsOfUse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Streams != null)
                    hashCode = hashCode * 59 + this.Streams.GetHashCode();
                if (this.PreviewStream != null)
                    hashCode = hashCode * 59 + this.PreviewStream.GetHashCode();
                if (this.PreviewConfigJson != null)
                    hashCode = hashCode * 59 + this.PreviewConfigJson.GetHashCode();
                if (this.OwnerAddress != null)
                    hashCode = hashCode * 59 + this.OwnerAddress.GetHashCode();
                if (this.BeneficiaryAddress != null)
                    hashCode = hashCode * 59 + this.BeneficiaryAddress.GetHashCode();
                if (this.PricePerSecond != null)
                    hashCode = hashCode * 59 + this.PricePerSecond.GetHashCode();
                if (this.PriceCurrency != null)
                    hashCode = hashCode * 59 + this.PriceCurrency.GetHashCode();
                if (this.MinimumSubscriptionInSeconds != null)
                    hashCode = hashCode * 59 + this.MinimumSubscriptionInSeconds.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.TermsOfUse != null)
                    hashCode = hashCode * 59 + this.TermsOfUse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
