/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICanvasesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download CSV file
        /// </summary>
        /// <remarks>
        /// Prompts browser to open save file dialog and downloads CSV file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Name of the file to download</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CanvasesDownloadCsvGet (string filename);

        /// <summary>
        /// Download CSV file
        /// </summary>
        /// <remarks>
        /// Prompts browser to open save file dialog and downloads CSV file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Name of the file to download</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CanvasesDownloadCsvGetWithHttpInfo (string filename);
        /// <summary>
        /// List canvases
        /// </summary>
        /// <remarks>
        /// Lists (and optionally filters) canvases in your archive.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results by canvas name. (optional)</param>
        /// <param name="state">Filter results by canvas state. (optional)</param>
        /// <param name="adhoc">Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to canvas_get)</param>
        /// <returns>List&lt;Canvas&gt;</returns>
        List<Canvas> CanvasesGet (string name = null, string state = null, bool? adhoc = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);

        /// <summary>
        /// List canvases
        /// </summary>
        /// <remarks>
        /// Lists (and optionally filters) canvases in your archive.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results by canvas name. (optional)</param>
        /// <param name="state">Filter results by canvas state. (optional)</param>
        /// <param name="adhoc">Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to canvas_get)</param>
        /// <returns>ApiResponse of List&lt;Canvas&gt;</returns>
        ApiResponse<List<Canvas>> CanvasesGetWithHttpInfo (string name = null, string state = null, bool? adhoc = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);
        /// <summary>
        /// Delete a canvas
        /// </summary>
        /// <remarks>
        /// Deletes a canvas by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be deleted</param>
        /// <returns></returns>
        void CanvasesIdDelete (string id);

        /// <summary>
        /// Delete a canvas
        /// </summary>
        /// <remarks>
        /// Deletes a canvas by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CanvasesIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Get canvas by id
        /// </summary>
        /// <remarks>
        /// Returns a canvas by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be fetched</param>
        /// <returns>Canvas</returns>
        Canvas CanvasesIdGet (string id);

        /// <summary>
        /// Get canvas by id
        /// </summary>
        /// <remarks>
        /// Returns a canvas by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be fetched</param>
        /// <returns>ApiResponse of Canvas</returns>
        ApiResponse<Canvas> CanvasesIdGetWithHttpInfo (string id);
        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Lists the permissions to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <returns>List&lt;Permission&gt;</returns>
        List<Permission> CanvasesIdPermissionsGet (string id);

        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Lists the permissions to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <returns>ApiResponse of List&lt;Permission&gt;</returns>
        ApiResponse<List<Permission>> CanvasesIdPermissionsGetWithHttpInfo (string id);
        /// <summary>
        /// Delete a canvas permission
        /// </summary>
        /// <remarks>
        /// Deletes a canvas permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns></returns>
        void CanvasesIdPermissionsPidDelete (string id, int? pid);

        /// <summary>
        /// Delete a canvas permission
        /// </summary>
        /// <remarks>
        /// Deletes a canvas permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CanvasesIdPermissionsPidDeleteWithHttpInfo (string id, int? pid);
        /// <summary>
        /// Get single permission object
        /// </summary>
        /// <remarks>
        /// Returns one canvas-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Permission</returns>
        Permission CanvasesIdPermissionsPidGet (string id, int? pid);

        /// <summary>
        /// Get single permission object
        /// </summary>
        /// <remarks>
        /// Returns one canvas-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>ApiResponse of Permission</returns>
        ApiResponse<Permission> CanvasesIdPermissionsPidGetWithHttpInfo (string id, int? pid);
        /// <summary>
        /// Grant permission
        /// </summary>
        /// <remarks>
        /// Grant a new permission to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Permission</returns>
        Permission CanvasesIdPermissionsPost (string id, Permission body);

        /// <summary>
        /// Grant permission
        /// </summary>
        /// <remarks>
        /// Grant a new permission to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>ApiResponse of Permission</returns>
        ApiResponse<Permission> CanvasesIdPermissionsPostWithHttpInfo (string id, Permission body);
        /// <summary>
        /// Update a canvas.
        /// </summary>
        /// <remarks>
        /// Updates a canvas. The *id* field can not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be updated</param>
        /// <param name="body">New canvas details</param>
        /// <returns></returns>
        void CanvasesIdPut (string id, CanvasCreateRequest body);

        /// <summary>
        /// Update a canvas.
        /// </summary>
        /// <remarks>
        /// Updates a canvas. The *id* field can not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be updated</param>
        /// <param name="body">New canvas details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CanvasesIdPutWithHttpInfo (string id, CanvasCreateRequest body);
        /// <summary>
        /// Starts a canvas
        /// </summary>
        /// <remarks>
        /// Starts a canvas changing its state to &#39;running&#39;, or in the case of adhoc&#x3D;true, creates a copy of the Canvas with state &#39;running&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be started</param>
        /// <param name="body">runtime options</param>
        /// <returns>Canvas</returns>
        Canvas CanvasesIdStartPost (string id, StartRequest body);

        /// <summary>
        /// Starts a canvas
        /// </summary>
        /// <remarks>
        /// Starts a canvas changing its state to &#39;running&#39;, or in the case of adhoc&#x3D;true, creates a copy of the Canvas with state &#39;running&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be started</param>
        /// <param name="body">runtime options</param>
        /// <returns>ApiResponse of Canvas</returns>
        ApiResponse<Canvas> CanvasesIdStartPostWithHttpInfo (string id, StartRequest body);
        /// <summary>
        /// Stop a currently running canvas.
        /// </summary>
        /// <remarks>
        /// Stops a canvas that is currently running.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be stopped</param>
        /// <returns>Canvas</returns>
        Canvas CanvasesIdStopPost (string id);

        /// <summary>
        /// Stop a currently running canvas.
        /// </summary>
        /// <remarks>
        /// Stops a canvas that is currently running.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be stopped</param>
        /// <returns>ApiResponse of Canvas</returns>
        ApiResponse<Canvas> CanvasesIdStopPostWithHttpInfo (string id);
        /// <summary>
        /// Create a canvas
        /// </summary>
        /// <remarks>
        /// Creates a new canvas into your archive.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Canvas object</param>
        /// <returns>Canvas</returns>
        Canvas CanvasesPost (CanvasCreateRequest body);

        /// <summary>
        /// Create a canvas
        /// </summary>
        /// <remarks>
        /// Creates a new canvas into your archive.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Canvas object</param>
        /// <returns>ApiResponse of Canvas</returns>
        ApiResponse<Canvas> CanvasesPostWithHttpInfo (CanvasCreateRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Download CSV file
        /// </summary>
        /// <remarks>
        /// Prompts browser to open save file dialog and downloads CSV file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Name of the file to download</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CanvasesDownloadCsvGetAsync (string filename);

        /// <summary>
        /// Download CSV file
        /// </summary>
        /// <remarks>
        /// Prompts browser to open save file dialog and downloads CSV file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Name of the file to download</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CanvasesDownloadCsvGetAsyncWithHttpInfo (string filename);
        /// <summary>
        /// List canvases
        /// </summary>
        /// <remarks>
        /// Lists (and optionally filters) canvases in your archive.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results by canvas name. (optional)</param>
        /// <param name="state">Filter results by canvas state. (optional)</param>
        /// <param name="adhoc">Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to canvas_get)</param>
        /// <returns>Task of List&lt;Canvas&gt;</returns>
        System.Threading.Tasks.Task<List<Canvas>> CanvasesGetAsync (string name = null, string state = null, bool? adhoc = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);

        /// <summary>
        /// List canvases
        /// </summary>
        /// <remarks>
        /// Lists (and optionally filters) canvases in your archive.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results by canvas name. (optional)</param>
        /// <param name="state">Filter results by canvas state. (optional)</param>
        /// <param name="adhoc">Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to canvas_get)</param>
        /// <returns>Task of ApiResponse (List&lt;Canvas&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Canvas>>> CanvasesGetAsyncWithHttpInfo (string name = null, string state = null, bool? adhoc = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);
        /// <summary>
        /// Delete a canvas
        /// </summary>
        /// <remarks>
        /// Deletes a canvas by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CanvasesIdDeleteAsync (string id);

        /// <summary>
        /// Delete a canvas
        /// </summary>
        /// <remarks>
        /// Deletes a canvas by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CanvasesIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get canvas by id
        /// </summary>
        /// <remarks>
        /// Returns a canvas by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be fetched</param>
        /// <returns>Task of Canvas</returns>
        System.Threading.Tasks.Task<Canvas> CanvasesIdGetAsync (string id);

        /// <summary>
        /// Get canvas by id
        /// </summary>
        /// <remarks>
        /// Returns a canvas by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be fetched</param>
        /// <returns>Task of ApiResponse (Canvas)</returns>
        System.Threading.Tasks.Task<ApiResponse<Canvas>> CanvasesIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Lists the permissions to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <returns>Task of List&lt;Permission&gt;</returns>
        System.Threading.Tasks.Task<List<Permission>> CanvasesIdPermissionsGetAsync (string id);

        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Lists the permissions to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <returns>Task of ApiResponse (List&lt;Permission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Permission>>> CanvasesIdPermissionsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a canvas permission
        /// </summary>
        /// <remarks>
        /// Deletes a canvas permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CanvasesIdPermissionsPidDeleteAsync (string id, int? pid);

        /// <summary>
        /// Delete a canvas permission
        /// </summary>
        /// <remarks>
        /// Deletes a canvas permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CanvasesIdPermissionsPidDeleteAsyncWithHttpInfo (string id, int? pid);
        /// <summary>
        /// Get single permission object
        /// </summary>
        /// <remarks>
        /// Returns one canvas-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Task of Permission</returns>
        System.Threading.Tasks.Task<Permission> CanvasesIdPermissionsPidGetAsync (string id, int? pid);

        /// <summary>
        /// Get single permission object
        /// </summary>
        /// <remarks>
        /// Returns one canvas-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Permission>> CanvasesIdPermissionsPidGetAsyncWithHttpInfo (string id, int? pid);
        /// <summary>
        /// Grant permission
        /// </summary>
        /// <remarks>
        /// Grant a new permission to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Task of Permission</returns>
        System.Threading.Tasks.Task<Permission> CanvasesIdPermissionsPostAsync (string id, Permission body);

        /// <summary>
        /// Grant permission
        /// </summary>
        /// <remarks>
        /// Grant a new permission to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Permission>> CanvasesIdPermissionsPostAsyncWithHttpInfo (string id, Permission body);
        /// <summary>
        /// Update a canvas.
        /// </summary>
        /// <remarks>
        /// Updates a canvas. The *id* field can not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be updated</param>
        /// <param name="body">New canvas details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CanvasesIdPutAsync (string id, CanvasCreateRequest body);

        /// <summary>
        /// Update a canvas.
        /// </summary>
        /// <remarks>
        /// Updates a canvas. The *id* field can not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be updated</param>
        /// <param name="body">New canvas details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CanvasesIdPutAsyncWithHttpInfo (string id, CanvasCreateRequest body);
        /// <summary>
        /// Starts a canvas
        /// </summary>
        /// <remarks>
        /// Starts a canvas changing its state to &#39;running&#39;, or in the case of adhoc&#x3D;true, creates a copy of the Canvas with state &#39;running&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be started</param>
        /// <param name="body">runtime options</param>
        /// <returns>Task of Canvas</returns>
        System.Threading.Tasks.Task<Canvas> CanvasesIdStartPostAsync (string id, StartRequest body);

        /// <summary>
        /// Starts a canvas
        /// </summary>
        /// <remarks>
        /// Starts a canvas changing its state to &#39;running&#39;, or in the case of adhoc&#x3D;true, creates a copy of the Canvas with state &#39;running&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be started</param>
        /// <param name="body">runtime options</param>
        /// <returns>Task of ApiResponse (Canvas)</returns>
        System.Threading.Tasks.Task<ApiResponse<Canvas>> CanvasesIdStartPostAsyncWithHttpInfo (string id, StartRequest body);
        /// <summary>
        /// Stop a currently running canvas.
        /// </summary>
        /// <remarks>
        /// Stops a canvas that is currently running.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be stopped</param>
        /// <returns>Task of Canvas</returns>
        System.Threading.Tasks.Task<Canvas> CanvasesIdStopPostAsync (string id);

        /// <summary>
        /// Stop a currently running canvas.
        /// </summary>
        /// <remarks>
        /// Stops a canvas that is currently running.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be stopped</param>
        /// <returns>Task of ApiResponse (Canvas)</returns>
        System.Threading.Tasks.Task<ApiResponse<Canvas>> CanvasesIdStopPostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a canvas
        /// </summary>
        /// <remarks>
        /// Creates a new canvas into your archive.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Canvas object</param>
        /// <returns>Task of Canvas</returns>
        System.Threading.Tasks.Task<Canvas> CanvasesPostAsync (CanvasCreateRequest body);

        /// <summary>
        /// Create a canvas
        /// </summary>
        /// <remarks>
        /// Creates a new canvas into your archive.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Canvas object</param>
        /// <returns>Task of ApiResponse (Canvas)</returns>
        System.Threading.Tasks.Task<ApiResponse<Canvas>> CanvasesPostAsyncWithHttpInfo (CanvasCreateRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CanvasesApi : ICanvasesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CanvasesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CanvasesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CanvasesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CanvasesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Download CSV file Prompts browser to open save file dialog and downloads CSV file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Name of the file to download</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CanvasesDownloadCsvGet (string filename)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CanvasesDownloadCsvGetWithHttpInfo(filename);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download CSV file Prompts browser to open save file dialog and downloads CSV file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Name of the file to download</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CanvasesDownloadCsvGetWithHttpInfo (string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling CanvasesApi->CanvasesDownloadCsvGet");

            var localVarPath = "/canvases/downloadCsv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filename", filename)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesDownloadCsvGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download CSV file Prompts browser to open save file dialog and downloads CSV file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Name of the file to download</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CanvasesDownloadCsvGetAsync (string filename)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CanvasesDownloadCsvGetAsyncWithHttpInfo(filename);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download CSV file Prompts browser to open save file dialog and downloads CSV file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Name of the file to download</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CanvasesDownloadCsvGetAsyncWithHttpInfo (string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling CanvasesApi->CanvasesDownloadCsvGet");

            var localVarPath = "/canvases/downloadCsv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filename", filename)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesDownloadCsvGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// List canvases Lists (and optionally filters) canvases in your archive.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results by canvas name. (optional)</param>
        /// <param name="state">Filter results by canvas state. (optional)</param>
        /// <param name="adhoc">Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to canvas_get)</param>
        /// <returns>List&lt;Canvas&gt;</returns>
        public List<Canvas> CanvasesGet (string name = null, string state = null, bool? adhoc = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {
             ApiResponse<List<Canvas>> localVarResponse = CanvasesGetWithHttpInfo(name, state, adhoc, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List canvases Lists (and optionally filters) canvases in your archive.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results by canvas name. (optional)</param>
        /// <param name="state">Filter results by canvas state. (optional)</param>
        /// <param name="adhoc">Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to canvas_get)</param>
        /// <returns>ApiResponse of List&lt;Canvas&gt;</returns>
        public ApiResponse< List<Canvas> > CanvasesGetWithHttpInfo (string name = null, string state = null, bool? adhoc = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {

            var localVarPath = "/canvases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (adhoc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adhoc", adhoc)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Canvas>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Canvas>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Canvas>)));
        }

        /// <summary>
        /// List canvases Lists (and optionally filters) canvases in your archive.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results by canvas name. (optional)</param>
        /// <param name="state">Filter results by canvas state. (optional)</param>
        /// <param name="adhoc">Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to canvas_get)</param>
        /// <returns>Task of List&lt;Canvas&gt;</returns>
        public async System.Threading.Tasks.Task<List<Canvas>> CanvasesGetAsync (string name = null, string state = null, bool? adhoc = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {
             ApiResponse<List<Canvas>> localVarResponse = await CanvasesGetAsyncWithHttpInfo(name, state, adhoc, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List canvases Lists (and optionally filters) canvases in your archive.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter results by canvas name. (optional)</param>
        /// <param name="state">Filter results by canvas state. (optional)</param>
        /// <param name="adhoc">Filter canvases by their adhoc-ness. Set to false to get the typical list of canvases as seen in the UI. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to canvas_get)</param>
        /// <returns>Task of ApiResponse (List&lt;Canvas&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Canvas>>> CanvasesGetAsyncWithHttpInfo (string name = null, string state = null, bool? adhoc = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {

            var localVarPath = "/canvases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (adhoc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adhoc", adhoc)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Canvas>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Canvas>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Canvas>)));
        }

        /// <summary>
        /// Delete a canvas Deletes a canvas by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be deleted</param>
        /// <returns></returns>
        public void CanvasesIdDelete (string id)
        {
             CanvasesIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a canvas Deletes a canvas by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CanvasesIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdDelete");

            var localVarPath = "/canvases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a canvas Deletes a canvas by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CanvasesIdDeleteAsync (string id)
        {
             await CanvasesIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a canvas Deletes a canvas by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CanvasesIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdDelete");

            var localVarPath = "/canvases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get canvas by id Returns a canvas by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be fetched</param>
        /// <returns>Canvas</returns>
        public Canvas CanvasesIdGet (string id)
        {
             ApiResponse<Canvas> localVarResponse = CanvasesIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get canvas by id Returns a canvas by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be fetched</param>
        /// <returns>ApiResponse of Canvas</returns>
        public ApiResponse< Canvas > CanvasesIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdGet");

            var localVarPath = "/canvases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Canvas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Canvas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Canvas)));
        }

        /// <summary>
        /// Get canvas by id Returns a canvas by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be fetched</param>
        /// <returns>Task of Canvas</returns>
        public async System.Threading.Tasks.Task<Canvas> CanvasesIdGetAsync (string id)
        {
             ApiResponse<Canvas> localVarResponse = await CanvasesIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get canvas by id Returns a canvas by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be fetched</param>
        /// <returns>Task of ApiResponse (Canvas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Canvas>> CanvasesIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdGet");

            var localVarPath = "/canvases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Canvas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Canvas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Canvas)));
        }

        /// <summary>
        /// List permissions Lists the permissions to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <returns>List&lt;Permission&gt;</returns>
        public List<Permission> CanvasesIdPermissionsGet (string id)
        {
             ApiResponse<List<Permission>> localVarResponse = CanvasesIdPermissionsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List permissions Lists the permissions to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <returns>ApiResponse of List&lt;Permission&gt;</returns>
        public ApiResponse< List<Permission> > CanvasesIdPermissionsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPermissionsGet");

            var localVarPath = "/canvases/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPermissionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Permission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Permission>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Permission>)));
        }

        /// <summary>
        /// List permissions Lists the permissions to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <returns>Task of List&lt;Permission&gt;</returns>
        public async System.Threading.Tasks.Task<List<Permission>> CanvasesIdPermissionsGetAsync (string id)
        {
             ApiResponse<List<Permission>> localVarResponse = await CanvasesIdPermissionsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List permissions Lists the permissions to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <returns>Task of ApiResponse (List&lt;Permission&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Permission>>> CanvasesIdPermissionsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPermissionsGet");

            var localVarPath = "/canvases/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPermissionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Permission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Permission>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Permission>)));
        }

        /// <summary>
        /// Delete a canvas permission Deletes a canvas permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns></returns>
        public void CanvasesIdPermissionsPidDelete (string id, int? pid)
        {
             CanvasesIdPermissionsPidDeleteWithHttpInfo(id, pid);
        }

        /// <summary>
        /// Delete a canvas permission Deletes a canvas permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CanvasesIdPermissionsPidDeleteWithHttpInfo (string id, int? pid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPermissionsPidDelete");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling CanvasesApi->CanvasesIdPermissionsPidDelete");

            var localVarPath = "/canvases/{id}/permissions/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPermissionsPidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a canvas permission Deletes a canvas permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CanvasesIdPermissionsPidDeleteAsync (string id, int? pid)
        {
             await CanvasesIdPermissionsPidDeleteAsyncWithHttpInfo(id, pid);

        }

        /// <summary>
        /// Delete a canvas permission Deletes a canvas permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CanvasesIdPermissionsPidDeleteAsyncWithHttpInfo (string id, int? pid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPermissionsPidDelete");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling CanvasesApi->CanvasesIdPermissionsPidDelete");

            var localVarPath = "/canvases/{id}/permissions/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPermissionsPidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get single permission object Returns one canvas-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Permission</returns>
        public Permission CanvasesIdPermissionsPidGet (string id, int? pid)
        {
             ApiResponse<Permission> localVarResponse = CanvasesIdPermissionsPidGetWithHttpInfo(id, pid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single permission object Returns one canvas-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>ApiResponse of Permission</returns>
        public ApiResponse< Permission > CanvasesIdPermissionsPidGetWithHttpInfo (string id, int? pid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPermissionsPidGet");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling CanvasesApi->CanvasesIdPermissionsPidGet");

            var localVarPath = "/canvases/{id}/permissions/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPermissionsPidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Get single permission object Returns one canvas-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Task of Permission</returns>
        public async System.Threading.Tasks.Task<Permission> CanvasesIdPermissionsPidGetAsync (string id, int? pid)
        {
             ApiResponse<Permission> localVarResponse = await CanvasesIdPermissionsPidGetAsyncWithHttpInfo(id, pid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single permission object Returns one canvas-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Permission>> CanvasesIdPermissionsPidGetAsyncWithHttpInfo (string id, int? pid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPermissionsPidGet");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling CanvasesApi->CanvasesIdPermissionsPidGet");

            var localVarPath = "/canvases/{id}/permissions/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPermissionsPidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Grant permission Grant a new permission to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Permission</returns>
        public Permission CanvasesIdPermissionsPost (string id, Permission body)
        {
             ApiResponse<Permission> localVarResponse = CanvasesIdPermissionsPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grant permission Grant a new permission to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>ApiResponse of Permission</returns>
        public ApiResponse< Permission > CanvasesIdPermissionsPostWithHttpInfo (string id, Permission body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPermissionsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CanvasesApi->CanvasesIdPermissionsPost");

            var localVarPath = "/canvases/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPermissionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Grant permission Grant a new permission to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Task of Permission</returns>
        public async System.Threading.Tasks.Task<Permission> CanvasesIdPermissionsPostAsync (string id, Permission body)
        {
             ApiResponse<Permission> localVarResponse = await CanvasesIdPermissionsPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grant permission Grant a new permission to given canvas.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Permission>> CanvasesIdPermissionsPostAsyncWithHttpInfo (string id, Permission body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPermissionsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CanvasesApi->CanvasesIdPermissionsPost");

            var localVarPath = "/canvases/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPermissionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Update a canvas. Updates a canvas. The *id* field can not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be updated</param>
        /// <param name="body">New canvas details</param>
        /// <returns></returns>
        public void CanvasesIdPut (string id, CanvasCreateRequest body)
        {
             CanvasesIdPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Update a canvas. Updates a canvas. The *id* field can not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be updated</param>
        /// <param name="body">New canvas details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CanvasesIdPutWithHttpInfo (string id, CanvasCreateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CanvasesApi->CanvasesIdPut");

            var localVarPath = "/canvases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a canvas. Updates a canvas. The *id* field can not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be updated</param>
        /// <param name="body">New canvas details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CanvasesIdPutAsync (string id, CanvasCreateRequest body)
        {
             await CanvasesIdPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Update a canvas. Updates a canvas. The *id* field can not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the canvas to be updated</param>
        /// <param name="body">New canvas details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CanvasesIdPutAsyncWithHttpInfo (string id, CanvasCreateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CanvasesApi->CanvasesIdPut");

            var localVarPath = "/canvases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Starts a canvas Starts a canvas changing its state to &#39;running&#39;, or in the case of adhoc&#x3D;true, creates a copy of the Canvas with state &#39;running&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be started</param>
        /// <param name="body">runtime options</param>
        /// <returns>Canvas</returns>
        public Canvas CanvasesIdStartPost (string id, StartRequest body)
        {
             ApiResponse<Canvas> localVarResponse = CanvasesIdStartPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a canvas Starts a canvas changing its state to &#39;running&#39;, or in the case of adhoc&#x3D;true, creates a copy of the Canvas with state &#39;running&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be started</param>
        /// <param name="body">runtime options</param>
        /// <returns>ApiResponse of Canvas</returns>
        public ApiResponse< Canvas > CanvasesIdStartPostWithHttpInfo (string id, StartRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdStartPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CanvasesApi->CanvasesIdStartPost");

            var localVarPath = "/canvases/{id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdStartPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Canvas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Canvas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Canvas)));
        }

        /// <summary>
        /// Starts a canvas Starts a canvas changing its state to &#39;running&#39;, or in the case of adhoc&#x3D;true, creates a copy of the Canvas with state &#39;running&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be started</param>
        /// <param name="body">runtime options</param>
        /// <returns>Task of Canvas</returns>
        public async System.Threading.Tasks.Task<Canvas> CanvasesIdStartPostAsync (string id, StartRequest body)
        {
             ApiResponse<Canvas> localVarResponse = await CanvasesIdStartPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts a canvas Starts a canvas changing its state to &#39;running&#39;, or in the case of adhoc&#x3D;true, creates a copy of the Canvas with state &#39;running&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be started</param>
        /// <param name="body">runtime options</param>
        /// <returns>Task of ApiResponse (Canvas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Canvas>> CanvasesIdStartPostAsyncWithHttpInfo (string id, StartRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdStartPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CanvasesApi->CanvasesIdStartPost");

            var localVarPath = "/canvases/{id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdStartPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Canvas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Canvas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Canvas)));
        }

        /// <summary>
        /// Stop a currently running canvas. Stops a canvas that is currently running.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be stopped</param>
        /// <returns>Canvas</returns>
        public Canvas CanvasesIdStopPost (string id)
        {
             ApiResponse<Canvas> localVarResponse = CanvasesIdStopPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a currently running canvas. Stops a canvas that is currently running.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be stopped</param>
        /// <returns>ApiResponse of Canvas</returns>
        public ApiResponse< Canvas > CanvasesIdStopPostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdStopPost");

            var localVarPath = "/canvases/{id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdStopPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Canvas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Canvas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Canvas)));
        }

        /// <summary>
        /// Stop a currently running canvas. Stops a canvas that is currently running.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be stopped</param>
        /// <returns>Task of Canvas</returns>
        public async System.Threading.Tasks.Task<Canvas> CanvasesIdStopPostAsync (string id)
        {
             ApiResponse<Canvas> localVarResponse = await CanvasesIdStopPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop a currently running canvas. Stops a canvas that is currently running.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the live canvas to be stopped</param>
        /// <returns>Task of ApiResponse (Canvas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Canvas>> CanvasesIdStopPostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CanvasesApi->CanvasesIdStopPost");

            var localVarPath = "/canvases/{id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesIdStopPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Canvas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Canvas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Canvas)));
        }

        /// <summary>
        /// Create a canvas Creates a new canvas into your archive.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Canvas object</param>
        /// <returns>Canvas</returns>
        public Canvas CanvasesPost (CanvasCreateRequest body)
        {
             ApiResponse<Canvas> localVarResponse = CanvasesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a canvas Creates a new canvas into your archive.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Canvas object</param>
        /// <returns>ApiResponse of Canvas</returns>
        public ApiResponse< Canvas > CanvasesPostWithHttpInfo (CanvasCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CanvasesApi->CanvasesPost");

            var localVarPath = "/canvases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Canvas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Canvas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Canvas)));
        }

        /// <summary>
        /// Create a canvas Creates a new canvas into your archive.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Canvas object</param>
        /// <returns>Task of Canvas</returns>
        public async System.Threading.Tasks.Task<Canvas> CanvasesPostAsync (CanvasCreateRequest body)
        {
             ApiResponse<Canvas> localVarResponse = await CanvasesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a canvas Creates a new canvas into your archive.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Canvas object</param>
        /// <returns>Task of ApiResponse (Canvas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Canvas>> CanvasesPostAsyncWithHttpInfo (CanvasCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CanvasesApi->CanvasesPost");

            var localVarPath = "/canvases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CanvasesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Canvas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Canvas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Canvas)));
        }

    }
}
