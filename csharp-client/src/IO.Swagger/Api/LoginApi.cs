/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Log in with API key verification
        /// </summary>
        /// <remarks>
        /// Verifies that an API key belongs to the user. If it does, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">API Key</param>
        /// <returns>SessionToken</returns>
        SessionToken LoginApikeyPost (APIKey body);

        /// <summary>
        /// Log in with API key verification
        /// </summary>
        /// <remarks>
        /// Verifies that an API key belongs to the user. If it does, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">API Key</param>
        /// <returns>ApiResponse of SessionToken</returns>
        ApiResponse<SessionToken> LoginApikeyPostWithHttpInfo (APIKey body);
        /// <summary>
        /// Generate challenge
        /// </summary>
        /// <remarks>
        /// Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Public Ethereum address of the account for signature verification</param>
        /// <returns>Challenge</returns>
        Challenge LoginChallengeAddressPost (string address);

        /// <summary>
        /// Generate challenge
        /// </summary>
        /// <remarks>
        /// Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Public Ethereum address of the account for signature verification</param>
        /// <returns>ApiResponse of Challenge</returns>
        ApiResponse<Challenge> LoginChallengeAddressPostWithHttpInfo (string address);
        /// <summary>
        /// Log in with password verification
        /// </summary>
        /// <remarks>
        /// Verifies a username/password combination. If correct, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Username and password combination</param>
        /// <returns>SessionToken</returns>
        SessionToken LoginPasswordPost (UsernamePassword body);

        /// <summary>
        /// Log in with password verification
        /// </summary>
        /// <remarks>
        /// Verifies a username/password combination. If correct, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Username and password combination</param>
        /// <returns>ApiResponse of SessionToken</returns>
        ApiResponse<SessionToken> LoginPasswordPostWithHttpInfo (UsernamePassword body);
        /// <summary>
        /// Log in with challenge verification
        /// </summary>
        /// <remarks>
        /// Verifies a signature against a challenge. If it matches, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Challenge response</param>
        /// <returns>SessionToken</returns>
        SessionToken LoginResponsePost (ChallengeResponse body);

        /// <summary>
        /// Log in with challenge verification
        /// </summary>
        /// <remarks>
        /// Verifies a signature against a challenge. If it matches, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Challenge response</param>
        /// <returns>ApiResponse of SessionToken</returns>
        ApiResponse<SessionToken> LoginResponsePostWithHttpInfo (ChallengeResponse body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Log in with API key verification
        /// </summary>
        /// <remarks>
        /// Verifies that an API key belongs to the user. If it does, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">API Key</param>
        /// <returns>Task of SessionToken</returns>
        System.Threading.Tasks.Task<SessionToken> LoginApikeyPostAsync (APIKey body);

        /// <summary>
        /// Log in with API key verification
        /// </summary>
        /// <remarks>
        /// Verifies that an API key belongs to the user. If it does, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">API Key</param>
        /// <returns>Task of ApiResponse (SessionToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionToken>> LoginApikeyPostAsyncWithHttpInfo (APIKey body);
        /// <summary>
        /// Generate challenge
        /// </summary>
        /// <remarks>
        /// Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Public Ethereum address of the account for signature verification</param>
        /// <returns>Task of Challenge</returns>
        System.Threading.Tasks.Task<Challenge> LoginChallengeAddressPostAsync (string address);

        /// <summary>
        /// Generate challenge
        /// </summary>
        /// <remarks>
        /// Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Public Ethereum address of the account for signature verification</param>
        /// <returns>Task of ApiResponse (Challenge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Challenge>> LoginChallengeAddressPostAsyncWithHttpInfo (string address);
        /// <summary>
        /// Log in with password verification
        /// </summary>
        /// <remarks>
        /// Verifies a username/password combination. If correct, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Username and password combination</param>
        /// <returns>Task of SessionToken</returns>
        System.Threading.Tasks.Task<SessionToken> LoginPasswordPostAsync (UsernamePassword body);

        /// <summary>
        /// Log in with password verification
        /// </summary>
        /// <remarks>
        /// Verifies a username/password combination. If correct, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Username and password combination</param>
        /// <returns>Task of ApiResponse (SessionToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionToken>> LoginPasswordPostAsyncWithHttpInfo (UsernamePassword body);
        /// <summary>
        /// Log in with challenge verification
        /// </summary>
        /// <remarks>
        /// Verifies a signature against a challenge. If it matches, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Challenge response</param>
        /// <returns>Task of SessionToken</returns>
        System.Threading.Tasks.Task<SessionToken> LoginResponsePostAsync (ChallengeResponse body);

        /// <summary>
        /// Log in with challenge verification
        /// </summary>
        /// <remarks>
        /// Verifies a signature against a challenge. If it matches, generates a session token for the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Challenge response</param>
        /// <returns>Task of ApiResponse (SessionToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionToken>> LoginResponsePostAsyncWithHttpInfo (ChallengeResponse body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoginApi : ILoginApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoginApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Log in with API key verification Verifies that an API key belongs to the user. If it does, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">API Key</param>
        /// <returns>SessionToken</returns>
        public SessionToken LoginApikeyPost (APIKey body)
        {
             ApiResponse<SessionToken> localVarResponse = LoginApikeyPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log in with API key verification Verifies that an API key belongs to the user. If it does, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">API Key</param>
        /// <returns>ApiResponse of SessionToken</returns>
        public ApiResponse< SessionToken > LoginApikeyPostWithHttpInfo (APIKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginApi->LoginApikeyPost");

            var localVarPath = "/login/apikey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginApikeyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SessionToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionToken)));
        }

        /// <summary>
        /// Log in with API key verification Verifies that an API key belongs to the user. If it does, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">API Key</param>
        /// <returns>Task of SessionToken</returns>
        public async System.Threading.Tasks.Task<SessionToken> LoginApikeyPostAsync (APIKey body)
        {
             ApiResponse<SessionToken> localVarResponse = await LoginApikeyPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log in with API key verification Verifies that an API key belongs to the user. If it does, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">API Key</param>
        /// <returns>Task of ApiResponse (SessionToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionToken>> LoginApikeyPostAsyncWithHttpInfo (APIKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginApi->LoginApikeyPost");

            var localVarPath = "/login/apikey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginApikeyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SessionToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionToken)));
        }

        /// <summary>
        /// Generate challenge Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Public Ethereum address of the account for signature verification</param>
        /// <returns>Challenge</returns>
        public Challenge LoginChallengeAddressPost (string address)
        {
             ApiResponse<Challenge> localVarResponse = LoginChallengeAddressPostWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate challenge Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Public Ethereum address of the account for signature verification</param>
        /// <returns>ApiResponse of Challenge</returns>
        public ApiResponse< Challenge > LoginChallengeAddressPostWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LoginApi->LoginChallengeAddressPost");

            var localVarPath = "/login/challenge/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginChallengeAddressPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Challenge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Challenge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Challenge)));
        }

        /// <summary>
        /// Generate challenge Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Public Ethereum address of the account for signature verification</param>
        /// <returns>Task of Challenge</returns>
        public async System.Threading.Tasks.Task<Challenge> LoginChallengeAddressPostAsync (string address)
        {
             ApiResponse<Challenge> localVarResponse = await LoginChallengeAddressPostAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate challenge Generates a challenge to be signed by an Ethereum private key to prove possession of an Ethereum account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Public Ethereum address of the account for signature verification</param>
        /// <returns>Task of ApiResponse (Challenge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Challenge>> LoginChallengeAddressPostAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LoginApi->LoginChallengeAddressPost");

            var localVarPath = "/login/challenge/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginChallengeAddressPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Challenge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Challenge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Challenge)));
        }

        /// <summary>
        /// Log in with password verification Verifies a username/password combination. If correct, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Username and password combination</param>
        /// <returns>SessionToken</returns>
        public SessionToken LoginPasswordPost (UsernamePassword body)
        {
             ApiResponse<SessionToken> localVarResponse = LoginPasswordPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log in with password verification Verifies a username/password combination. If correct, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Username and password combination</param>
        /// <returns>ApiResponse of SessionToken</returns>
        public ApiResponse< SessionToken > LoginPasswordPostWithHttpInfo (UsernamePassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginApi->LoginPasswordPost");

            var localVarPath = "/login/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SessionToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionToken)));
        }

        /// <summary>
        /// Log in with password verification Verifies a username/password combination. If correct, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Username and password combination</param>
        /// <returns>Task of SessionToken</returns>
        public async System.Threading.Tasks.Task<SessionToken> LoginPasswordPostAsync (UsernamePassword body)
        {
             ApiResponse<SessionToken> localVarResponse = await LoginPasswordPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log in with password verification Verifies a username/password combination. If correct, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Username and password combination</param>
        /// <returns>Task of ApiResponse (SessionToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionToken>> LoginPasswordPostAsyncWithHttpInfo (UsernamePassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginApi->LoginPasswordPost");

            var localVarPath = "/login/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SessionToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionToken)));
        }

        /// <summary>
        /// Log in with challenge verification Verifies a signature against a challenge. If it matches, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Challenge response</param>
        /// <returns>SessionToken</returns>
        public SessionToken LoginResponsePost (ChallengeResponse body)
        {
             ApiResponse<SessionToken> localVarResponse = LoginResponsePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log in with challenge verification Verifies a signature against a challenge. If it matches, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Challenge response</param>
        /// <returns>ApiResponse of SessionToken</returns>
        public ApiResponse< SessionToken > LoginResponsePostWithHttpInfo (ChallengeResponse body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginApi->LoginResponsePost");

            var localVarPath = "/login/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginResponsePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SessionToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionToken)));
        }

        /// <summary>
        /// Log in with challenge verification Verifies a signature against a challenge. If it matches, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Challenge response</param>
        /// <returns>Task of SessionToken</returns>
        public async System.Threading.Tasks.Task<SessionToken> LoginResponsePostAsync (ChallengeResponse body)
        {
             ApiResponse<SessionToken> localVarResponse = await LoginResponsePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log in with challenge verification Verifies a signature against a challenge. If it matches, generates a session token for the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Challenge response</param>
        /// <returns>Task of ApiResponse (SessionToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionToken>> LoginResponsePostAsyncWithHttpInfo (ChallengeResponse body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginApi->LoginResponsePost");

            var localVarPath = "/login/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginResponsePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SessionToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionToken)));
        }

    }
}
