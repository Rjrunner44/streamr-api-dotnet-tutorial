/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeysApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List keys
        /// </summary>
        /// <remarks>
        /// List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>List&lt;ResourceKey&gt;</returns>
        List<ResourceKey> StreamsIdKeysGet (string id);

        /// <summary>
        /// List keys
        /// </summary>
        /// <remarks>
        /// List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>ApiResponse of List&lt;ResourceKey&gt;</returns>
        ApiResponse<List<ResourceKey>> StreamsIdKeysGetWithHttpInfo (string id);
        /// <summary>
        /// Create a key
        /// </summary>
        /// <remarks>
        /// Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>ResourceKey</returns>
        ResourceKey StreamsIdKeysPost (string id, ResourceKeyCreateRequest body);

        /// <summary>
        /// Create a key
        /// </summary>
        /// <remarks>
        /// Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>ApiResponse of ResourceKey</returns>
        ApiResponse<ResourceKey> StreamsIdKeysPostWithHttpInfo (string id, ResourceKeyCreateRequest body);
        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns></returns>
        void StreamsStreamIdKeysIdDelete (string streamId, string id);

        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsStreamIdKeysIdDeleteWithHttpInfo (string streamId, string id);
        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission
        /// </summary>
        /// <remarks>
        /// Update Stream&#39;s Key&#39;s name and permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns></returns>
        void StreamsStreamIdKeysIdPut (UpdateStreamKeyRequest body, string streamId, string id);

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission
        /// </summary>
        /// <remarks>
        /// Update Stream&#39;s Key&#39;s name and permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsStreamIdKeysIdPutWithHttpInfo (UpdateStreamKeyRequest body, string streamId, string id);
        /// <summary>
        /// List user&#39;s API keys
        /// </summary>
        /// <remarks>
        /// List the API keys for the authenticated user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserKey&gt;</returns>
        List<UserKey> UsersMeKeysGet ();

        /// <summary>
        /// List user&#39;s API keys
        /// </summary>
        /// <remarks>
        /// List the API keys for the authenticated user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserKey&gt;</returns>
        ApiResponse<List<UserKey>> UsersMeKeysGetWithHttpInfo ();
        /// <summary>
        /// Delete user API key
        /// </summary>
        /// <remarks>
        /// Revoke and delete a user API key. Can only be called by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns></returns>
        void UsersMeKeysIdDelete (string id);

        /// <summary>
        /// Delete user API key
        /// </summary>
        /// <remarks>
        /// Revoke and delete a user API key. Can only be called by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersMeKeysIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Update User&#39;s Key&#39;s name
        /// </summary>
        /// <remarks>
        /// Update User&#39;s Key&#39;s name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateUserKeyRequest object</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns></returns>
        void UsersMeKeysIdPut (UpdateUserKeyRequest body, string id);

        /// <summary>
        /// Update User&#39;s Key&#39;s name
        /// </summary>
        /// <remarks>
        /// Update User&#39;s Key&#39;s name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateUserKeyRequest object</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersMeKeysIdPutWithHttpInfo (UpdateUserKeyRequest body, string id);
        /// <summary>
        /// Create a new user API key
        /// </summary>
        /// <remarks>
        /// Creates a key that can be used for authenticating the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Key to be created</param>
        /// <returns>UserKey</returns>
        UserKey UsersMeKeysPost (UserKeyCreateRequest body);

        /// <summary>
        /// Create a new user API key
        /// </summary>
        /// <remarks>
        /// Creates a key that can be used for authenticating the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Key to be created</param>
        /// <returns>ApiResponse of UserKey</returns>
        ApiResponse<UserKey> UsersMeKeysPostWithHttpInfo (UserKeyCreateRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List keys
        /// </summary>
        /// <remarks>
        /// List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of List&lt;ResourceKey&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceKey>> StreamsIdKeysGetAsync (string id);

        /// <summary>
        /// List keys
        /// </summary>
        /// <remarks>
        /// List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceKey>>> StreamsIdKeysGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a key
        /// </summary>
        /// <remarks>
        /// Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ResourceKey</returns>
        System.Threading.Tasks.Task<ResourceKey> StreamsIdKeysPostAsync (string id, ResourceKeyCreateRequest body);

        /// <summary>
        /// Create a key
        /// </summary>
        /// <remarks>
        /// Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ApiResponse (ResourceKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceKey>> StreamsIdKeysPostAsyncWithHttpInfo (string id, ResourceKeyCreateRequest body);
        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsStreamIdKeysIdDeleteAsync (string streamId, string id);

        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeysIdDeleteAsyncWithHttpInfo (string streamId, string id);
        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission
        /// </summary>
        /// <remarks>
        /// Update Stream&#39;s Key&#39;s name and permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsStreamIdKeysIdPutAsync (UpdateStreamKeyRequest body, string streamId, string id);

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission
        /// </summary>
        /// <remarks>
        /// Update Stream&#39;s Key&#39;s name and permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeysIdPutAsyncWithHttpInfo (UpdateStreamKeyRequest body, string streamId, string id);
        /// <summary>
        /// List user&#39;s API keys
        /// </summary>
        /// <remarks>
        /// List the API keys for the authenticated user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserKey&gt;</returns>
        System.Threading.Tasks.Task<List<UserKey>> UsersMeKeysGetAsync ();

        /// <summary>
        /// List user&#39;s API keys
        /// </summary>
        /// <remarks>
        /// List the API keys for the authenticated user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserKey>>> UsersMeKeysGetAsyncWithHttpInfo ();
        /// <summary>
        /// Delete user API key
        /// </summary>
        /// <remarks>
        /// Revoke and delete a user API key. Can only be called by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersMeKeysIdDeleteAsync (string id);

        /// <summary>
        /// Delete user API key
        /// </summary>
        /// <remarks>
        /// Revoke and delete a user API key. Can only be called by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersMeKeysIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update User&#39;s Key&#39;s name
        /// </summary>
        /// <remarks>
        /// Update User&#39;s Key&#39;s name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateUserKeyRequest object</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersMeKeysIdPutAsync (UpdateUserKeyRequest body, string id);

        /// <summary>
        /// Update User&#39;s Key&#39;s name
        /// </summary>
        /// <remarks>
        /// Update User&#39;s Key&#39;s name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateUserKeyRequest object</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersMeKeysIdPutAsyncWithHttpInfo (UpdateUserKeyRequest body, string id);
        /// <summary>
        /// Create a new user API key
        /// </summary>
        /// <remarks>
        /// Creates a key that can be used for authenticating the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of UserKey</returns>
        System.Threading.Tasks.Task<UserKey> UsersMeKeysPostAsync (UserKeyCreateRequest body);

        /// <summary>
        /// Create a new user API key
        /// </summary>
        /// <remarks>
        /// Creates a key that can be used for authenticating the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ApiResponse (UserKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserKey>> UsersMeKeysPostAsyncWithHttpInfo (UserKeyCreateRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeysApi : IKeysApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeysApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeysApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List keys List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>List&lt;ResourceKey&gt;</returns>
        public List<ResourceKey> StreamsIdKeysGet (string id)
        {
             ApiResponse<List<ResourceKey>> localVarResponse = StreamsIdKeysGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List keys List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>ApiResponse of List&lt;ResourceKey&gt;</returns>
        public ApiResponse< List<ResourceKey> > StreamsIdKeysGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->StreamsIdKeysGet");

            var localVarPath = "/streams/{id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdKeysGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceKey>)));
        }

        /// <summary>
        /// List keys List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of List&lt;ResourceKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceKey>> StreamsIdKeysGetAsync (string id)
        {
             ApiResponse<List<ResourceKey>> localVarResponse = await StreamsIdKeysGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List keys List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResourceKey>>> StreamsIdKeysGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->StreamsIdKeysGet");

            var localVarPath = "/streams/{id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdKeysGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceKey>)));
        }

        /// <summary>
        /// Create a key Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>ResourceKey</returns>
        public ResourceKey StreamsIdKeysPost (string id, ResourceKeyCreateRequest body)
        {
             ApiResponse<ResourceKey> localVarResponse = StreamsIdKeysPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a key Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>ApiResponse of ResourceKey</returns>
        public ApiResponse< ResourceKey > StreamsIdKeysPostWithHttpInfo (string id, ResourceKeyCreateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->StreamsIdKeysPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->StreamsIdKeysPost");

            var localVarPath = "/streams/{id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdKeysPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceKey)));
        }

        /// <summary>
        /// Create a key Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ResourceKey</returns>
        public async System.Threading.Tasks.Task<ResourceKey> StreamsIdKeysPostAsync (string id, ResourceKeyCreateRequest body)
        {
             ApiResponse<ResourceKey> localVarResponse = await StreamsIdKeysPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a key Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ApiResponse (ResourceKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceKey>> StreamsIdKeysPostAsyncWithHttpInfo (string id, ResourceKeyCreateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->StreamsIdKeysPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->StreamsIdKeysPost");

            var localVarPath = "/streams/{id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdKeysPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceKey)));
        }

        /// <summary>
        /// Delete a key Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns></returns>
        public void StreamsStreamIdKeysIdDelete (string streamId, string id)
        {
             StreamsStreamIdKeysIdDeleteWithHttpInfo(streamId, id);
        }

        /// <summary>
        /// Delete a key Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsStreamIdKeysIdDeleteWithHttpInfo (string streamId, string id)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling KeysApi->StreamsStreamIdKeysIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->StreamsStreamIdKeysIdDelete");

            var localVarPath = "/streams/{streamId}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsStreamIdKeysIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a key Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsStreamIdKeysIdDeleteAsync (string streamId, string id)
        {
             await StreamsStreamIdKeysIdDeleteAsyncWithHttpInfo(streamId, id);

        }

        /// <summary>
        /// Delete a key Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeysIdDeleteAsyncWithHttpInfo (string streamId, string id)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling KeysApi->StreamsStreamIdKeysIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->StreamsStreamIdKeysIdDelete");

            var localVarPath = "/streams/{streamId}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsStreamIdKeysIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission Update Stream&#39;s Key&#39;s name and permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns></returns>
        public void StreamsStreamIdKeysIdPut (UpdateStreamKeyRequest body, string streamId, string id)
        {
             StreamsStreamIdKeysIdPutWithHttpInfo(body, streamId, id);
        }

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission Update Stream&#39;s Key&#39;s name and permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsStreamIdKeysIdPutWithHttpInfo (UpdateStreamKeyRequest body, string streamId, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->StreamsStreamIdKeysIdPut");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling KeysApi->StreamsStreamIdKeysIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->StreamsStreamIdKeysIdPut");

            var localVarPath = "/streams/{streamId}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsStreamIdKeysIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission Update Stream&#39;s Key&#39;s name and permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsStreamIdKeysIdPutAsync (UpdateStreamKeyRequest body, string streamId, string id)
        {
             await StreamsStreamIdKeysIdPutAsyncWithHttpInfo(body, streamId, id);

        }

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission Update Stream&#39;s Key&#39;s name and permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeysIdPutAsyncWithHttpInfo (UpdateStreamKeyRequest body, string streamId, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->StreamsStreamIdKeysIdPut");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling KeysApi->StreamsStreamIdKeysIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->StreamsStreamIdKeysIdPut");

            var localVarPath = "/streams/{streamId}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsStreamIdKeysIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List user&#39;s API keys List the API keys for the authenticated user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserKey&gt;</returns>
        public List<UserKey> UsersMeKeysGet ()
        {
             ApiResponse<List<UserKey>> localVarResponse = UsersMeKeysGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List user&#39;s API keys List the API keys for the authenticated user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserKey&gt;</returns>
        public ApiResponse< List<UserKey> > UsersMeKeysGetWithHttpInfo ()
        {

            var localVarPath = "/users/me/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserKey>)));
        }

        /// <summary>
        /// List user&#39;s API keys List the API keys for the authenticated user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;UserKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserKey>> UsersMeKeysGetAsync ()
        {
             ApiResponse<List<UserKey>> localVarResponse = await UsersMeKeysGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List user&#39;s API keys List the API keys for the authenticated user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;UserKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserKey>>> UsersMeKeysGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/users/me/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserKey>)));
        }

        /// <summary>
        /// Delete user API key Revoke and delete a user API key. Can only be called by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns></returns>
        public void UsersMeKeysIdDelete (string id)
        {
             UsersMeKeysIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete user API key Revoke and delete a user API key. Can only be called by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersMeKeysIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->UsersMeKeysIdDelete");

            var localVarPath = "/users/me/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete user API key Revoke and delete a user API key. Can only be called by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersMeKeysIdDeleteAsync (string id)
        {
             await UsersMeKeysIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete user API key Revoke and delete a user API key. Can only be called by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersMeKeysIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->UsersMeKeysIdDelete");

            var localVarPath = "/users/me/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update User&#39;s Key&#39;s name Update User&#39;s Key&#39;s name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateUserKeyRequest object</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns></returns>
        public void UsersMeKeysIdPut (UpdateUserKeyRequest body, string id)
        {
             UsersMeKeysIdPutWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update User&#39;s Key&#39;s name Update User&#39;s Key&#39;s name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateUserKeyRequest object</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersMeKeysIdPutWithHttpInfo (UpdateUserKeyRequest body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->UsersMeKeysIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->UsersMeKeysIdPut");

            var localVarPath = "/users/me/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update User&#39;s Key&#39;s name Update User&#39;s Key&#39;s name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateUserKeyRequest object</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersMeKeysIdPutAsync (UpdateUserKeyRequest body, string id)
        {
             await UsersMeKeysIdPutAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update User&#39;s Key&#39;s name Update User&#39;s Key&#39;s name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateUserKeyRequest object</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersMeKeysIdPutAsyncWithHttpInfo (UpdateUserKeyRequest body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->UsersMeKeysIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling KeysApi->UsersMeKeysIdPut");

            var localVarPath = "/users/me/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new user API key Creates a key that can be used for authenticating the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Key to be created</param>
        /// <returns>UserKey</returns>
        public UserKey UsersMeKeysPost (UserKeyCreateRequest body)
        {
             ApiResponse<UserKey> localVarResponse = UsersMeKeysPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user API key Creates a key that can be used for authenticating the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Key to be created</param>
        /// <returns>ApiResponse of UserKey</returns>
        public ApiResponse< UserKey > UsersMeKeysPostWithHttpInfo (UserKeyCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->UsersMeKeysPost");

            var localVarPath = "/users/me/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserKey)));
        }

        /// <summary>
        /// Create a new user API key Creates a key that can be used for authenticating the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of UserKey</returns>
        public async System.Threading.Tasks.Task<UserKey> UsersMeKeysPostAsync (UserKeyCreateRequest body)
        {
             ApiResponse<UserKey> localVarResponse = await UsersMeKeysPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new user API key Creates a key that can be used for authenticating the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ApiResponse (UserKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserKey>> UsersMeKeysPostAsyncWithHttpInfo (UserKeyCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->UsersMeKeysPost");

            var localVarPath = "/users/me/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserKey)));
        }

    }
}
