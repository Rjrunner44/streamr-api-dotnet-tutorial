/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SaveDashboardItemRequest
    /// </summary>
    [DataContract]
    public partial class SaveDashboardItemRequest :  IEquatable<SaveDashboardItemRequest>, IValidatableObject
    {
        /// <summary>
        /// size of item on Dashboard
        /// </summary>
        /// <value>size of item on Dashboard</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            
            /// <summary>
            /// Enum Small for value: small
            /// </summary>
            [EnumMember(Value = "small")]
            Small = 1,
            
            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 2,
            
            /// <summary>
            /// Enum Large for value: large
            /// </summary>
            [EnumMember(Value = "large")]
            Large = 3
        }

        /// <summary>
        /// size of item on Dashboard
        /// </summary>
        /// <value>size of item on Dashboard</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public SizeEnum? Size { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveDashboardItemRequest" /> class.
        /// </summary>
        /// <param name="title">title of item.</param>
        /// <param name="ord">positive integer indicating order within Dashboard.</param>
        /// <param name="size">size of item on Dashboard.</param>
        /// <param name="uiChannelId">id of the ui channel of this item.</param>
        public SaveDashboardItemRequest(string title = default(string), int? ord = default(int?), SizeEnum? size = default(SizeEnum?), string uiChannelId = default(string))
        {
            this.Title = title;
            this.Ord = ord;
            this.Size = size;
            this.UiChannelId = uiChannelId;
        }
        
        /// <summary>
        /// title of item
        /// </summary>
        /// <value>title of item</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// positive integer indicating order within Dashboard
        /// </summary>
        /// <value>positive integer indicating order within Dashboard</value>
        [DataMember(Name="ord", EmitDefaultValue=false)]
        public int? Ord { get; set; }


        /// <summary>
        /// id of the ui channel of this item
        /// </summary>
        /// <value>id of the ui channel of this item</value>
        [DataMember(Name="uiChannelId", EmitDefaultValue=false)]
        public string UiChannelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SaveDashboardItemRequest {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Ord: ").Append(Ord).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  UiChannelId: ").Append(UiChannelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaveDashboardItemRequest);
        }

        /// <summary>
        /// Returns true if SaveDashboardItemRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SaveDashboardItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaveDashboardItemRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Ord == input.Ord ||
                    (this.Ord != null &&
                    this.Ord.Equals(input.Ord))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.UiChannelId == input.UiChannelId ||
                    (this.UiChannelId != null &&
                    this.UiChannelId.Equals(input.UiChannelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Ord != null)
                    hashCode = hashCode * 59 + this.Ord.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.UiChannelId != null)
                    hashCode = hashCode * 59 + this.UiChannelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
