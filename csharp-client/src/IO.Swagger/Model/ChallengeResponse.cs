/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChallengeResponse
    /// </summary>
    [DataContract]
    public partial class ChallengeResponse :  IEquatable<ChallengeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChallengeResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeResponse" /> class.
        /// </summary>
        /// <param name="challenge">challenge (required).</param>
        /// <param name="signature">The signature of the challenge with an Ethereum private key (required).</param>
        /// <param name="address">The Ethereum address corresponding to the public key (required).</param>
        public ChallengeResponse(ChallengeResponseChallenge challenge = default(ChallengeResponseChallenge), string signature = default(string), string address = default(string))
        {
            // to ensure "challenge" is required (not null)
            if (challenge == null)
            {
                throw new InvalidDataException("challenge is a required property for ChallengeResponse and cannot be null");
            }
            else
            {
                this.Challenge = challenge;
            }
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new InvalidDataException("signature is a required property for ChallengeResponse and cannot be null");
            }
            else
            {
                this.Signature = signature;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for ChallengeResponse and cannot be null");
            }
            else
            {
                this.Address = address;
            }
        }
        
        /// <summary>
        /// Gets or Sets Challenge
        /// </summary>
        [DataMember(Name="challenge", EmitDefaultValue=false)]
        public ChallengeResponseChallenge Challenge { get; set; }

        /// <summary>
        /// The signature of the challenge with an Ethereum private key
        /// </summary>
        /// <value>The signature of the challenge with an Ethereum private key</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// The Ethereum address corresponding to the public key
        /// </summary>
        /// <value>The Ethereum address corresponding to the public key</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChallengeResponse {\n");
            sb.Append("  Challenge: ").Append(Challenge).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChallengeResponse);
        }

        /// <summary>
        /// Returns true if ChallengeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ChallengeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChallengeResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Challenge == input.Challenge ||
                    (this.Challenge != null &&
                    this.Challenge.Equals(input.Challenge))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Challenge != null)
                    hashCode = hashCode * 59 + this.Challenge.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
