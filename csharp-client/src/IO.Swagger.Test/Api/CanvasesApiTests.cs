/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CanvasesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CanvasesApiTests
    {
        private CanvasesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CanvasesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CanvasesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CanvasesApi
            //Assert.IsInstanceOfType(typeof(CanvasesApi), instance, "instance is a CanvasesApi");
        }

        
        /// <summary>
        /// Test CanvasesDownloadCsvGet
        /// </summary>
        [Test]
        public void CanvasesDownloadCsvGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filename = null;
            //var response = instance.CanvasesDownloadCsvGet(filename);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test CanvasesGet
        /// </summary>
        [Test]
        public void CanvasesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string state = null;
            //bool? adhoc = null;
            //string search = null;
            //string sortBy = null;
            //string order = null;
            //int? max = null;
            //int? offset = null;
            //bool? grantedAccess = null;
            //bool? publicAccess = null;
            //string operation = null;
            //var response = instance.CanvasesGet(name, state, adhoc, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
            //Assert.IsInstanceOf<List<Canvas>> (response, "response is List<Canvas>");
        }
        
        /// <summary>
        /// Test CanvasesIdDelete
        /// </summary>
        [Test]
        public void CanvasesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CanvasesIdDelete(id);
            
        }
        
        /// <summary>
        /// Test CanvasesIdGet
        /// </summary>
        [Test]
        public void CanvasesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CanvasesIdGet(id);
            //Assert.IsInstanceOf<Canvas> (response, "response is Canvas");
        }
        
        /// <summary>
        /// Test CanvasesIdPermissionsGet
        /// </summary>
        [Test]
        public void CanvasesIdPermissionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CanvasesIdPermissionsGet(id);
            //Assert.IsInstanceOf<List<Permission>> (response, "response is List<Permission>");
        }
        
        /// <summary>
        /// Test CanvasesIdPermissionsPidDelete
        /// </summary>
        [Test]
        public void CanvasesIdPermissionsPidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? pid = null;
            //instance.CanvasesIdPermissionsPidDelete(id, pid);
            
        }
        
        /// <summary>
        /// Test CanvasesIdPermissionsPidGet
        /// </summary>
        [Test]
        public void CanvasesIdPermissionsPidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? pid = null;
            //var response = instance.CanvasesIdPermissionsPidGet(id, pid);
            //Assert.IsInstanceOf<Permission> (response, "response is Permission");
        }
        
        /// <summary>
        /// Test CanvasesIdPermissionsPost
        /// </summary>
        [Test]
        public void CanvasesIdPermissionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Permission body = null;
            //var response = instance.CanvasesIdPermissionsPost(id, body);
            //Assert.IsInstanceOf<Permission> (response, "response is Permission");
        }
        
        /// <summary>
        /// Test CanvasesIdPut
        /// </summary>
        [Test]
        public void CanvasesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CanvasCreateRequest body = null;
            //instance.CanvasesIdPut(id, body);
            
        }
        
        /// <summary>
        /// Test CanvasesIdStartPost
        /// </summary>
        [Test]
        public void CanvasesIdStartPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //StartRequest body = null;
            //var response = instance.CanvasesIdStartPost(id, body);
            //Assert.IsInstanceOf<Canvas> (response, "response is Canvas");
        }
        
        /// <summary>
        /// Test CanvasesIdStopPost
        /// </summary>
        [Test]
        public void CanvasesIdStopPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CanvasesIdStopPost(id);
            //Assert.IsInstanceOf<Canvas> (response, "response is Canvas");
        }
        
        /// <summary>
        /// Test CanvasesPost
        /// </summary>
        [Test]
        public void CanvasesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CanvasCreateRequest body = null;
            //var response = instance.CanvasesPost(body);
            //Assert.IsInstanceOf<Canvas> (response, "response is Canvas");
        }
        
    }

}
