/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProductInBlockchain
    /// </summary>
    [DataContract]
    public partial class ProductInBlockchain :  IEquatable<ProductInBlockchain>, IValidatableObject
    {
        /// <summary>
        /// Unit currency
        /// </summary>
        /// <value>Unit currency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriceCurrencyEnum
        {
            
            /// <summary>
            /// Enum DATA for value: DATA
            /// </summary>
            [EnumMember(Value = "DATA")]
            DATA = 1,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2
        }

        /// <summary>
        /// Unit currency
        /// </summary>
        /// <value>Unit currency</value>
        [DataMember(Name="priceCurrency", EmitDefaultValue=false)]
        public PriceCurrencyEnum PriceCurrency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInBlockchain" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductInBlockchain() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInBlockchain" /> class.
        /// </summary>
        /// <param name="ownerAddress">Ethereum address of owner (required).</param>
        /// <param name="beneficiaryAddress">Ethereum address of beneficiary (required).</param>
        /// <param name="pricePerSecond">Unit cost per second (required).</param>
        /// <param name="priceCurrency">Unit currency (required).</param>
        /// <param name="minimumSubscriptionInSeconds">Minimum subscription length (in seconds) (required).</param>
        public ProductInBlockchain(string ownerAddress = default(string), string beneficiaryAddress = default(string), int? pricePerSecond = default(int?), PriceCurrencyEnum priceCurrency = default(PriceCurrencyEnum), int? minimumSubscriptionInSeconds = default(int?))
        {
            // to ensure "ownerAddress" is required (not null)
            if (ownerAddress == null)
            {
                throw new InvalidDataException("ownerAddress is a required property for ProductInBlockchain and cannot be null");
            }
            else
            {
                this.OwnerAddress = ownerAddress;
            }
            // to ensure "beneficiaryAddress" is required (not null)
            if (beneficiaryAddress == null)
            {
                throw new InvalidDataException("beneficiaryAddress is a required property for ProductInBlockchain and cannot be null");
            }
            else
            {
                this.BeneficiaryAddress = beneficiaryAddress;
            }
            // to ensure "pricePerSecond" is required (not null)
            if (pricePerSecond == null)
            {
                throw new InvalidDataException("pricePerSecond is a required property for ProductInBlockchain and cannot be null");
            }
            else
            {
                this.PricePerSecond = pricePerSecond;
            }
            // to ensure "priceCurrency" is required (not null)
            if (priceCurrency == null)
            {
                throw new InvalidDataException("priceCurrency is a required property for ProductInBlockchain and cannot be null");
            }
            else
            {
                this.PriceCurrency = priceCurrency;
            }
            // to ensure "minimumSubscriptionInSeconds" is required (not null)
            if (minimumSubscriptionInSeconds == null)
            {
                throw new InvalidDataException("minimumSubscriptionInSeconds is a required property for ProductInBlockchain and cannot be null");
            }
            else
            {
                this.MinimumSubscriptionInSeconds = minimumSubscriptionInSeconds;
            }
        }
        
        /// <summary>
        /// Ethereum address of owner
        /// </summary>
        /// <value>Ethereum address of owner</value>
        [DataMember(Name="ownerAddress", EmitDefaultValue=false)]
        public string OwnerAddress { get; set; }

        /// <summary>
        /// Ethereum address of beneficiary
        /// </summary>
        /// <value>Ethereum address of beneficiary</value>
        [DataMember(Name="beneficiaryAddress", EmitDefaultValue=false)]
        public string BeneficiaryAddress { get; set; }

        /// <summary>
        /// Unit cost per second
        /// </summary>
        /// <value>Unit cost per second</value>
        [DataMember(Name="pricePerSecond", EmitDefaultValue=false)]
        public int? PricePerSecond { get; set; }


        /// <summary>
        /// Minimum subscription length (in seconds)
        /// </summary>
        /// <value>Minimum subscription length (in seconds)</value>
        [DataMember(Name="minimumSubscriptionInSeconds", EmitDefaultValue=false)]
        public int? MinimumSubscriptionInSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductInBlockchain {\n");
            sb.Append("  OwnerAddress: ").Append(OwnerAddress).Append("\n");
            sb.Append("  BeneficiaryAddress: ").Append(BeneficiaryAddress).Append("\n");
            sb.Append("  PricePerSecond: ").Append(PricePerSecond).Append("\n");
            sb.Append("  PriceCurrency: ").Append(PriceCurrency).Append("\n");
            sb.Append("  MinimumSubscriptionInSeconds: ").Append(MinimumSubscriptionInSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductInBlockchain);
        }

        /// <summary>
        /// Returns true if ProductInBlockchain instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductInBlockchain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductInBlockchain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OwnerAddress == input.OwnerAddress ||
                    (this.OwnerAddress != null &&
                    this.OwnerAddress.Equals(input.OwnerAddress))
                ) && 
                (
                    this.BeneficiaryAddress == input.BeneficiaryAddress ||
                    (this.BeneficiaryAddress != null &&
                    this.BeneficiaryAddress.Equals(input.BeneficiaryAddress))
                ) && 
                (
                    this.PricePerSecond == input.PricePerSecond ||
                    (this.PricePerSecond != null &&
                    this.PricePerSecond.Equals(input.PricePerSecond))
                ) && 
                (
                    this.PriceCurrency == input.PriceCurrency ||
                    (this.PriceCurrency != null &&
                    this.PriceCurrency.Equals(input.PriceCurrency))
                ) && 
                (
                    this.MinimumSubscriptionInSeconds == input.MinimumSubscriptionInSeconds ||
                    (this.MinimumSubscriptionInSeconds != null &&
                    this.MinimumSubscriptionInSeconds.Equals(input.MinimumSubscriptionInSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OwnerAddress != null)
                    hashCode = hashCode * 59 + this.OwnerAddress.GetHashCode();
                if (this.BeneficiaryAddress != null)
                    hashCode = hashCode * 59 + this.BeneficiaryAddress.GetHashCode();
                if (this.PricePerSecond != null)
                    hashCode = hashCode * 59 + this.PricePerSecond.GetHashCode();
                if (this.PriceCurrency != null)
                    hashCode = hashCode * 59 + this.PriceCurrency.GetHashCode();
                if (this.MinimumSubscriptionInSeconds != null)
                    hashCode = hashCode * 59 + this.MinimumSubscriptionInSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
