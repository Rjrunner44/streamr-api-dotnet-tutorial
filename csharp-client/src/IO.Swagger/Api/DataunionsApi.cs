/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataunionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all join requests
        /// </summary>
        /// <remarks>
        /// List all join requests for this data union.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="state">Filter listing by state of the join request (optional)</param>
        /// <returns></returns>
        void DataunionsContractAddressJoinRequestsGet (string contractAddress, string state = null);

        /// <summary>
        /// List all join requests
        /// </summary>
        /// <remarks>
        /// List all join requests for this data union.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="state">Filter listing by state of the join request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressJoinRequestsGetWithHttpInfo (string contractAddress, string state = null);
        /// <summary>
        /// Delete join request
        /// </summary>
        /// <remarks>
        /// Delete data union join request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns></returns>
        void DataunionsContractAddressJoinRequestsJoinRequestIdDelete (string contractAddress, string joinRequestId);

        /// <summary>
        /// Delete join request
        /// </summary>
        /// <remarks>
        /// Delete data union join request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressJoinRequestsJoinRequestIdDeleteWithHttpInfo (string contractAddress, string joinRequestId);
        /// <summary>
        /// Find join request by id
        /// </summary>
        /// <remarks>
        /// Find data union join request by join request id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns></returns>
        void DataunionsContractAddressJoinRequestsJoinRequestIdGet (string contractAddress, string joinRequestId);

        /// <summary>
        /// Find join request by id
        /// </summary>
        /// <remarks>
        /// Find data union join request by join request id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressJoinRequestsJoinRequestIdGetWithHttpInfo (string contractAddress, string joinRequestId);
        /// <summary>
        /// Update join request state
        /// </summary>
        /// <remarks>
        /// Update state attribute of the join request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <param name="body">Data union join request state</param>
        /// <returns></returns>
        void DataunionsContractAddressJoinRequestsJoinRequestIdPut (string contractAddress, string joinRequestId, UpdateDataUnionJoinRequest body);

        /// <summary>
        /// Update join request state
        /// </summary>
        /// <remarks>
        /// Update state attribute of the join request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <param name="body">Data union join request state</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressJoinRequestsJoinRequestIdPutWithHttpInfo (string contractAddress, string joinRequestId, UpdateDataUnionJoinRequest body);
        /// <summary>
        /// Create join request
        /// </summary>
        /// <remarks>
        /// Create data union join request from given json body
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Data union join request details</param>
        /// <returns></returns>
        void DataunionsContractAddressJoinRequestsPost (string contractAddress, CreateDataUnionJoinRequest body);

        /// <summary>
        /// Create join request
        /// </summary>
        /// <remarks>
        /// Create data union join request from given json body
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Data union join request details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressJoinRequestsPostWithHttpInfo (string contractAddress, CreateDataUnionJoinRequest body);
        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return a list of members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns></returns>
        void DataunionsContractAddressMembersGet (string contractAddress);

        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return a list of members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressMembersGetWithHttpInfo (string contractAddress);
        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return stats for individual members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="memberAddress">Ethereum address of the member</param>
        /// <returns></returns>
        void DataunionsContractAddressMembersMemberAddressGet (string contractAddress, string memberAddress);

        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return stats for individual members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="memberAddress">Ethereum address of the member</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressMembersMemberAddressGetWithHttpInfo (string contractAddress, string memberAddress);
        /// <summary>
        /// Delete secret
        /// </summary>
        /// <remarks>
        /// Delete data union secret.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <returns></returns>
        void DataunionsContractAddressSecretsDataUnionSecretIdDelete (string contractAddress, string dataUnionSecretId);

        /// <summary>
        /// Delete secret
        /// </summary>
        /// <remarks>
        /// Delete data union secret.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressSecretsDataUnionSecretIdDeleteWithHttpInfo (string contractAddress, string dataUnionSecretId);
        /// <summary>
        /// Find secret by id
        /// </summary>
        /// <remarks>
        /// Find data union secret by id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the data union secret</param>
        /// <returns>DataUnionSecret</returns>
        DataUnionSecret DataunionsContractAddressSecretsDataUnionSecretIdGet (string contractAddress, string dataUnionSecretId);

        /// <summary>
        /// Find secret by id
        /// </summary>
        /// <remarks>
        /// Find data union secret by id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the data union secret</param>
        /// <returns>ApiResponse of DataUnionSecret</returns>
        ApiResponse<DataUnionSecret> DataunionsContractAddressSecretsDataUnionSecretIdGetWithHttpInfo (string contractAddress, string dataUnionSecretId);
        /// <summary>
        /// Update secret
        /// </summary>
        /// <remarks>
        /// Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <param name="body">Updated data union secret details</param>
        /// <returns>DataUnionSecret</returns>
        DataUnionSecret DataunionsContractAddressSecretsDataUnionSecretIdPut (string contractAddress, string dataUnionSecretId, Body body);

        /// <summary>
        /// Update secret
        /// </summary>
        /// <remarks>
        /// Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <param name="body">Updated data union secret details</param>
        /// <returns>ApiResponse of DataUnionSecret</returns>
        ApiResponse<DataUnionSecret> DataunionsContractAddressSecretsDataUnionSecretIdPutWithHttpInfo (string contractAddress, string dataUnionSecretId, Body body);
        /// <summary>
        /// List all data union secrets
        /// </summary>
        /// <remarks>
        /// List all secrets for this data union.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns></returns>
        void DataunionsContractAddressSecretsGet (string contractAddress);

        /// <summary>
        /// List all data union secrets
        /// </summary>
        /// <remarks>
        /// List all secrets for this data union.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressSecretsGetWithHttpInfo (string contractAddress);
        /// <summary>
        /// Create secret
        /// </summary>
        /// <remarks>
        /// Create data union secret
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Create data union secret details</param>
        /// <returns>DataUnionSecret</returns>
        DataUnionSecret DataunionsContractAddressSecretsPost (string contractAddress, CreateDataUnionSecret body);

        /// <summary>
        /// Create secret
        /// </summary>
        /// <remarks>
        /// Create data union secret
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Create data union secret details</param>
        /// <returns>ApiResponse of DataUnionSecret</returns>
        ApiResponse<DataUnionSecret> DataunionsContractAddressSecretsPostWithHttpInfo (string contractAddress, CreateDataUnionSecret body);
        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return operator stats
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns></returns>
        void DataunionsContractAddressStatsGet (string contractAddress);

        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return operator stats
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataunionsContractAddressStatsGetWithHttpInfo (string contractAddress);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List all join requests
        /// </summary>
        /// <remarks>
        /// List all join requests for this data union.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="state">Filter listing by state of the join request (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsGetAsync (string contractAddress, string state = null);

        /// <summary>
        /// List all join requests
        /// </summary>
        /// <remarks>
        /// List all join requests for this data union.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="state">Filter listing by state of the join request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsGetAsyncWithHttpInfo (string contractAddress, string state = null);
        /// <summary>
        /// Delete join request
        /// </summary>
        /// <remarks>
        /// Delete data union join request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsJoinRequestIdDeleteAsync (string contractAddress, string joinRequestId);

        /// <summary>
        /// Delete join request
        /// </summary>
        /// <remarks>
        /// Delete data union join request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsJoinRequestIdDeleteAsyncWithHttpInfo (string contractAddress, string joinRequestId);
        /// <summary>
        /// Find join request by id
        /// </summary>
        /// <remarks>
        /// Find data union join request by join request id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsJoinRequestIdGetAsync (string contractAddress, string joinRequestId);

        /// <summary>
        /// Find join request by id
        /// </summary>
        /// <remarks>
        /// Find data union join request by join request id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsJoinRequestIdGetAsyncWithHttpInfo (string contractAddress, string joinRequestId);
        /// <summary>
        /// Update join request state
        /// </summary>
        /// <remarks>
        /// Update state attribute of the join request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <param name="body">Data union join request state</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsJoinRequestIdPutAsync (string contractAddress, string joinRequestId, UpdateDataUnionJoinRequest body);

        /// <summary>
        /// Update join request state
        /// </summary>
        /// <remarks>
        /// Update state attribute of the join request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <param name="body">Data union join request state</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsJoinRequestIdPutAsyncWithHttpInfo (string contractAddress, string joinRequestId, UpdateDataUnionJoinRequest body);
        /// <summary>
        /// Create join request
        /// </summary>
        /// <remarks>
        /// Create data union join request from given json body
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Data union join request details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsPostAsync (string contractAddress, CreateDataUnionJoinRequest body);

        /// <summary>
        /// Create join request
        /// </summary>
        /// <remarks>
        /// Create data union join request from given json body
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Data union join request details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsPostAsyncWithHttpInfo (string contractAddress, CreateDataUnionJoinRequest body);
        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return a list of members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressMembersGetAsync (string contractAddress);

        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return a list of members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressMembersGetAsyncWithHttpInfo (string contractAddress);
        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return stats for individual members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="memberAddress">Ethereum address of the member</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressMembersMemberAddressGetAsync (string contractAddress, string memberAddress);

        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return stats for individual members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="memberAddress">Ethereum address of the member</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressMembersMemberAddressGetAsyncWithHttpInfo (string contractAddress, string memberAddress);
        /// <summary>
        /// Delete secret
        /// </summary>
        /// <remarks>
        /// Delete data union secret.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressSecretsDataUnionSecretIdDeleteAsync (string contractAddress, string dataUnionSecretId);

        /// <summary>
        /// Delete secret
        /// </summary>
        /// <remarks>
        /// Delete data union secret.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressSecretsDataUnionSecretIdDeleteAsyncWithHttpInfo (string contractAddress, string dataUnionSecretId);
        /// <summary>
        /// Find secret by id
        /// </summary>
        /// <remarks>
        /// Find data union secret by id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the data union secret</param>
        /// <returns>Task of DataUnionSecret</returns>
        System.Threading.Tasks.Task<DataUnionSecret> DataunionsContractAddressSecretsDataUnionSecretIdGetAsync (string contractAddress, string dataUnionSecretId);

        /// <summary>
        /// Find secret by id
        /// </summary>
        /// <remarks>
        /// Find data union secret by id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the data union secret</param>
        /// <returns>Task of ApiResponse (DataUnionSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataUnionSecret>> DataunionsContractAddressSecretsDataUnionSecretIdGetAsyncWithHttpInfo (string contractAddress, string dataUnionSecretId);
        /// <summary>
        /// Update secret
        /// </summary>
        /// <remarks>
        /// Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <param name="body">Updated data union secret details</param>
        /// <returns>Task of DataUnionSecret</returns>
        System.Threading.Tasks.Task<DataUnionSecret> DataunionsContractAddressSecretsDataUnionSecretIdPutAsync (string contractAddress, string dataUnionSecretId, Body body);

        /// <summary>
        /// Update secret
        /// </summary>
        /// <remarks>
        /// Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <param name="body">Updated data union secret details</param>
        /// <returns>Task of ApiResponse (DataUnionSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataUnionSecret>> DataunionsContractAddressSecretsDataUnionSecretIdPutAsyncWithHttpInfo (string contractAddress, string dataUnionSecretId, Body body);
        /// <summary>
        /// List all data union secrets
        /// </summary>
        /// <remarks>
        /// List all secrets for this data union.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressSecretsGetAsync (string contractAddress);

        /// <summary>
        /// List all data union secrets
        /// </summary>
        /// <remarks>
        /// List all secrets for this data union.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressSecretsGetAsyncWithHttpInfo (string contractAddress);
        /// <summary>
        /// Create secret
        /// </summary>
        /// <remarks>
        /// Create data union secret
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Create data union secret details</param>
        /// <returns>Task of DataUnionSecret</returns>
        System.Threading.Tasks.Task<DataUnionSecret> DataunionsContractAddressSecretsPostAsync (string contractAddress, CreateDataUnionSecret body);

        /// <summary>
        /// Create secret
        /// </summary>
        /// <remarks>
        /// Create data union secret
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Create data union secret details</param>
        /// <returns>Task of ApiResponse (DataUnionSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataUnionSecret>> DataunionsContractAddressSecretsPostAsyncWithHttpInfo (string contractAddress, CreateDataUnionSecret body);
        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return operator stats
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataunionsContractAddressStatsGetAsync (string contractAddress);

        /// <summary>
        /// Proxy calls to to data union server.
        /// </summary>
        /// <remarks>
        /// Return operator stats
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressStatsGetAsyncWithHttpInfo (string contractAddress);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataunionsApi : IDataunionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataunionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataunionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataunionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataunionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List all join requests List all join requests for this data union.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="state">Filter listing by state of the join request (optional)</param>
        /// <returns></returns>
        public void DataunionsContractAddressJoinRequestsGet (string contractAddress, string state = null)
        {
             DataunionsContractAddressJoinRequestsGetWithHttpInfo(contractAddress, state);
        }

        /// <summary>
        /// List all join requests List all join requests for this data union.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="state">Filter listing by state of the join request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressJoinRequestsGetWithHttpInfo (string contractAddress, string state = null)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsGet");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all join requests List all join requests for this data union.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="state">Filter listing by state of the join request (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsGetAsync (string contractAddress, string state = null)
        {
             await DataunionsContractAddressJoinRequestsGetAsyncWithHttpInfo(contractAddress, state);

        }

        /// <summary>
        /// List all join requests List all join requests for this data union.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="state">Filter listing by state of the join request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsGetAsyncWithHttpInfo (string contractAddress, string state = null)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsGet");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete join request Delete data union join request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns></returns>
        public void DataunionsContractAddressJoinRequestsJoinRequestIdDelete (string contractAddress, string joinRequestId)
        {
             DataunionsContractAddressJoinRequestsJoinRequestIdDeleteWithHttpInfo(contractAddress, joinRequestId);
        }

        /// <summary>
        /// Delete join request Delete data union join request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressJoinRequestsJoinRequestIdDeleteWithHttpInfo (string contractAddress, string joinRequestId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdDelete");
            // verify the required parameter 'joinRequestId' is set
            if (joinRequestId == null)
                throw new ApiException(400, "Missing required parameter 'joinRequestId' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdDelete");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests/{joinRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (joinRequestId != null) localVarPathParams.Add("joinRequestId", this.Configuration.ApiClient.ParameterToString(joinRequestId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsJoinRequestIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete join request Delete data union join request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsJoinRequestIdDeleteAsync (string contractAddress, string joinRequestId)
        {
             await DataunionsContractAddressJoinRequestsJoinRequestIdDeleteAsyncWithHttpInfo(contractAddress, joinRequestId);

        }

        /// <summary>
        /// Delete join request Delete data union join request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsJoinRequestIdDeleteAsyncWithHttpInfo (string contractAddress, string joinRequestId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdDelete");
            // verify the required parameter 'joinRequestId' is set
            if (joinRequestId == null)
                throw new ApiException(400, "Missing required parameter 'joinRequestId' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdDelete");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests/{joinRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (joinRequestId != null) localVarPathParams.Add("joinRequestId", this.Configuration.ApiClient.ParameterToString(joinRequestId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsJoinRequestIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find join request by id Find data union join request by join request id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns></returns>
        public void DataunionsContractAddressJoinRequestsJoinRequestIdGet (string contractAddress, string joinRequestId)
        {
             DataunionsContractAddressJoinRequestsJoinRequestIdGetWithHttpInfo(contractAddress, joinRequestId);
        }

        /// <summary>
        /// Find join request by id Find data union join request by join request id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressJoinRequestsJoinRequestIdGetWithHttpInfo (string contractAddress, string joinRequestId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdGet");
            // verify the required parameter 'joinRequestId' is set
            if (joinRequestId == null)
                throw new ApiException(400, "Missing required parameter 'joinRequestId' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdGet");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests/{joinRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (joinRequestId != null) localVarPathParams.Add("joinRequestId", this.Configuration.ApiClient.ParameterToString(joinRequestId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsJoinRequestIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find join request by id Find data union join request by join request id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsJoinRequestIdGetAsync (string contractAddress, string joinRequestId)
        {
             await DataunionsContractAddressJoinRequestsJoinRequestIdGetAsyncWithHttpInfo(contractAddress, joinRequestId);

        }

        /// <summary>
        /// Find join request by id Find data union join request by join request id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsJoinRequestIdGetAsyncWithHttpInfo (string contractAddress, string joinRequestId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdGet");
            // verify the required parameter 'joinRequestId' is set
            if (joinRequestId == null)
                throw new ApiException(400, "Missing required parameter 'joinRequestId' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdGet");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests/{joinRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (joinRequestId != null) localVarPathParams.Add("joinRequestId", this.Configuration.ApiClient.ParameterToString(joinRequestId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsJoinRequestIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update join request state Update state attribute of the join request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <param name="body">Data union join request state</param>
        /// <returns></returns>
        public void DataunionsContractAddressJoinRequestsJoinRequestIdPut (string contractAddress, string joinRequestId, UpdateDataUnionJoinRequest body)
        {
             DataunionsContractAddressJoinRequestsJoinRequestIdPutWithHttpInfo(contractAddress, joinRequestId, body);
        }

        /// <summary>
        /// Update join request state Update state attribute of the join request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <param name="body">Data union join request state</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressJoinRequestsJoinRequestIdPutWithHttpInfo (string contractAddress, string joinRequestId, UpdateDataUnionJoinRequest body)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdPut");
            // verify the required parameter 'joinRequestId' is set
            if (joinRequestId == null)
                throw new ApiException(400, "Missing required parameter 'joinRequestId' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdPut");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests/{joinRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (joinRequestId != null) localVarPathParams.Add("joinRequestId", this.Configuration.ApiClient.ParameterToString(joinRequestId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsJoinRequestIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update join request state Update state attribute of the join request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <param name="body">Data union join request state</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsJoinRequestIdPutAsync (string contractAddress, string joinRequestId, UpdateDataUnionJoinRequest body)
        {
             await DataunionsContractAddressJoinRequestsJoinRequestIdPutAsyncWithHttpInfo(contractAddress, joinRequestId, body);

        }

        /// <summary>
        /// Update join request state Update state attribute of the join request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="joinRequestId">ID of the join request</param>
        /// <param name="body">Data union join request state</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsJoinRequestIdPutAsyncWithHttpInfo (string contractAddress, string joinRequestId, UpdateDataUnionJoinRequest body)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdPut");
            // verify the required parameter 'joinRequestId' is set
            if (joinRequestId == null)
                throw new ApiException(400, "Missing required parameter 'joinRequestId' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DataunionsApi->DataunionsContractAddressJoinRequestsJoinRequestIdPut");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests/{joinRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (joinRequestId != null) localVarPathParams.Add("joinRequestId", this.Configuration.ApiClient.ParameterToString(joinRequestId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsJoinRequestIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create join request Create data union join request from given json body
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Data union join request details</param>
        /// <returns></returns>
        public void DataunionsContractAddressJoinRequestsPost (string contractAddress, CreateDataUnionJoinRequest body)
        {
             DataunionsContractAddressJoinRequestsPostWithHttpInfo(contractAddress, body);
        }

        /// <summary>
        /// Create join request Create data union join request from given json body
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Data union join request details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressJoinRequestsPostWithHttpInfo (string contractAddress, CreateDataUnionJoinRequest body)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DataunionsApi->DataunionsContractAddressJoinRequestsPost");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create join request Create data union join request from given json body
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Data union join request details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressJoinRequestsPostAsync (string contractAddress, CreateDataUnionJoinRequest body)
        {
             await DataunionsContractAddressJoinRequestsPostAsyncWithHttpInfo(contractAddress, body);

        }

        /// <summary>
        /// Create join request Create data union join request from given json body
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Data union join request details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressJoinRequestsPostAsyncWithHttpInfo (string contractAddress, CreateDataUnionJoinRequest body)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressJoinRequestsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DataunionsApi->DataunionsContractAddressJoinRequestsPost");

            var localVarPath = "/dataunions/{contractAddress}/joinRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressJoinRequestsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Proxy calls to to data union server. Return a list of members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns></returns>
        public void DataunionsContractAddressMembersGet (string contractAddress)
        {
             DataunionsContractAddressMembersGetWithHttpInfo(contractAddress);
        }

        /// <summary>
        /// Proxy calls to to data union server. Return a list of members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressMembersGetWithHttpInfo (string contractAddress)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressMembersGet");

            var localVarPath = "/dataunions/{contractAddress}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Proxy calls to to data union server. Return a list of members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressMembersGetAsync (string contractAddress)
        {
             await DataunionsContractAddressMembersGetAsyncWithHttpInfo(contractAddress);

        }

        /// <summary>
        /// Proxy calls to to data union server. Return a list of members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressMembersGetAsyncWithHttpInfo (string contractAddress)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressMembersGet");

            var localVarPath = "/dataunions/{contractAddress}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Proxy calls to to data union server. Return stats for individual members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="memberAddress">Ethereum address of the member</param>
        /// <returns></returns>
        public void DataunionsContractAddressMembersMemberAddressGet (string contractAddress, string memberAddress)
        {
             DataunionsContractAddressMembersMemberAddressGetWithHttpInfo(contractAddress, memberAddress);
        }

        /// <summary>
        /// Proxy calls to to data union server. Return stats for individual members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="memberAddress">Ethereum address of the member</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressMembersMemberAddressGetWithHttpInfo (string contractAddress, string memberAddress)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressMembersMemberAddressGet");
            // verify the required parameter 'memberAddress' is set
            if (memberAddress == null)
                throw new ApiException(400, "Missing required parameter 'memberAddress' when calling DataunionsApi->DataunionsContractAddressMembersMemberAddressGet");

            var localVarPath = "/dataunions/{contractAddress}/members/{memberAddress}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (memberAddress != null) localVarPathParams.Add("memberAddress", this.Configuration.ApiClient.ParameterToString(memberAddress)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressMembersMemberAddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Proxy calls to to data union server. Return stats for individual members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="memberAddress">Ethereum address of the member</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressMembersMemberAddressGetAsync (string contractAddress, string memberAddress)
        {
             await DataunionsContractAddressMembersMemberAddressGetAsyncWithHttpInfo(contractAddress, memberAddress);

        }

        /// <summary>
        /// Proxy calls to to data union server. Return stats for individual members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="memberAddress">Ethereum address of the member</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressMembersMemberAddressGetAsyncWithHttpInfo (string contractAddress, string memberAddress)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressMembersMemberAddressGet");
            // verify the required parameter 'memberAddress' is set
            if (memberAddress == null)
                throw new ApiException(400, "Missing required parameter 'memberAddress' when calling DataunionsApi->DataunionsContractAddressMembersMemberAddressGet");

            var localVarPath = "/dataunions/{contractAddress}/members/{memberAddress}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (memberAddress != null) localVarPathParams.Add("memberAddress", this.Configuration.ApiClient.ParameterToString(memberAddress)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressMembersMemberAddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete secret Delete data union secret.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <returns></returns>
        public void DataunionsContractAddressSecretsDataUnionSecretIdDelete (string contractAddress, string dataUnionSecretId)
        {
             DataunionsContractAddressSecretsDataUnionSecretIdDeleteWithHttpInfo(contractAddress, dataUnionSecretId);
        }

        /// <summary>
        /// Delete secret Delete data union secret.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressSecretsDataUnionSecretIdDeleteWithHttpInfo (string contractAddress, string dataUnionSecretId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdDelete");
            // verify the required parameter 'dataUnionSecretId' is set
            if (dataUnionSecretId == null)
                throw new ApiException(400, "Missing required parameter 'dataUnionSecretId' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdDelete");

            var localVarPath = "/dataunions/{contractAddress}/secrets/{dataUnionSecretId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (dataUnionSecretId != null) localVarPathParams.Add("dataUnionSecretId", this.Configuration.ApiClient.ParameterToString(dataUnionSecretId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsDataUnionSecretIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete secret Delete data union secret.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressSecretsDataUnionSecretIdDeleteAsync (string contractAddress, string dataUnionSecretId)
        {
             await DataunionsContractAddressSecretsDataUnionSecretIdDeleteAsyncWithHttpInfo(contractAddress, dataUnionSecretId);

        }

        /// <summary>
        /// Delete secret Delete data union secret.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressSecretsDataUnionSecretIdDeleteAsyncWithHttpInfo (string contractAddress, string dataUnionSecretId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdDelete");
            // verify the required parameter 'dataUnionSecretId' is set
            if (dataUnionSecretId == null)
                throw new ApiException(400, "Missing required parameter 'dataUnionSecretId' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdDelete");

            var localVarPath = "/dataunions/{contractAddress}/secrets/{dataUnionSecretId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (dataUnionSecretId != null) localVarPathParams.Add("dataUnionSecretId", this.Configuration.ApiClient.ParameterToString(dataUnionSecretId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsDataUnionSecretIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find secret by id Find data union secret by id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the data union secret</param>
        /// <returns>DataUnionSecret</returns>
        public DataUnionSecret DataunionsContractAddressSecretsDataUnionSecretIdGet (string contractAddress, string dataUnionSecretId)
        {
             ApiResponse<DataUnionSecret> localVarResponse = DataunionsContractAddressSecretsDataUnionSecretIdGetWithHttpInfo(contractAddress, dataUnionSecretId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find secret by id Find data union secret by id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the data union secret</param>
        /// <returns>ApiResponse of DataUnionSecret</returns>
        public ApiResponse< DataUnionSecret > DataunionsContractAddressSecretsDataUnionSecretIdGetWithHttpInfo (string contractAddress, string dataUnionSecretId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdGet");
            // verify the required parameter 'dataUnionSecretId' is set
            if (dataUnionSecretId == null)
                throw new ApiException(400, "Missing required parameter 'dataUnionSecretId' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdGet");

            var localVarPath = "/dataunions/{contractAddress}/secrets/{dataUnionSecretId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (dataUnionSecretId != null) localVarPathParams.Add("dataUnionSecretId", this.Configuration.ApiClient.ParameterToString(dataUnionSecretId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsDataUnionSecretIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataUnionSecret>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataUnionSecret) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataUnionSecret)));
        }

        /// <summary>
        /// Find secret by id Find data union secret by id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the data union secret</param>
        /// <returns>Task of DataUnionSecret</returns>
        public async System.Threading.Tasks.Task<DataUnionSecret> DataunionsContractAddressSecretsDataUnionSecretIdGetAsync (string contractAddress, string dataUnionSecretId)
        {
             ApiResponse<DataUnionSecret> localVarResponse = await DataunionsContractAddressSecretsDataUnionSecretIdGetAsyncWithHttpInfo(contractAddress, dataUnionSecretId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find secret by id Find data union secret by id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the data union secret</param>
        /// <returns>Task of ApiResponse (DataUnionSecret)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataUnionSecret>> DataunionsContractAddressSecretsDataUnionSecretIdGetAsyncWithHttpInfo (string contractAddress, string dataUnionSecretId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdGet");
            // verify the required parameter 'dataUnionSecretId' is set
            if (dataUnionSecretId == null)
                throw new ApiException(400, "Missing required parameter 'dataUnionSecretId' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdGet");

            var localVarPath = "/dataunions/{contractAddress}/secrets/{dataUnionSecretId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (dataUnionSecretId != null) localVarPathParams.Add("dataUnionSecretId", this.Configuration.ApiClient.ParameterToString(dataUnionSecretId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsDataUnionSecretIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataUnionSecret>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataUnionSecret) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataUnionSecret)));
        }

        /// <summary>
        /// Update secret Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <param name="body">Updated data union secret details</param>
        /// <returns>DataUnionSecret</returns>
        public DataUnionSecret DataunionsContractAddressSecretsDataUnionSecretIdPut (string contractAddress, string dataUnionSecretId, Body body)
        {
             ApiResponse<DataUnionSecret> localVarResponse = DataunionsContractAddressSecretsDataUnionSecretIdPutWithHttpInfo(contractAddress, dataUnionSecretId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update secret Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <param name="body">Updated data union secret details</param>
        /// <returns>ApiResponse of DataUnionSecret</returns>
        public ApiResponse< DataUnionSecret > DataunionsContractAddressSecretsDataUnionSecretIdPutWithHttpInfo (string contractAddress, string dataUnionSecretId, Body body)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdPut");
            // verify the required parameter 'dataUnionSecretId' is set
            if (dataUnionSecretId == null)
                throw new ApiException(400, "Missing required parameter 'dataUnionSecretId' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdPut");

            var localVarPath = "/dataunions/{contractAddress}/secrets/{dataUnionSecretId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (dataUnionSecretId != null) localVarPathParams.Add("dataUnionSecretId", this.Configuration.ApiClient.ParameterToString(dataUnionSecretId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsDataUnionSecretIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataUnionSecret>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataUnionSecret) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataUnionSecret)));
        }

        /// <summary>
        /// Update secret Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <param name="body">Updated data union secret details</param>
        /// <returns>Task of DataUnionSecret</returns>
        public async System.Threading.Tasks.Task<DataUnionSecret> DataunionsContractAddressSecretsDataUnionSecretIdPutAsync (string contractAddress, string dataUnionSecretId, Body body)
        {
             ApiResponse<DataUnionSecret> localVarResponse = await DataunionsContractAddressSecretsDataUnionSecretIdPutAsyncWithHttpInfo(contractAddress, dataUnionSecretId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update secret Most useful for changing the name of the secret. Note that the randomly generated secret itself cannot be changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="dataUnionSecretId">ID of the secret</param>
        /// <param name="body">Updated data union secret details</param>
        /// <returns>Task of ApiResponse (DataUnionSecret)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataUnionSecret>> DataunionsContractAddressSecretsDataUnionSecretIdPutAsyncWithHttpInfo (string contractAddress, string dataUnionSecretId, Body body)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdPut");
            // verify the required parameter 'dataUnionSecretId' is set
            if (dataUnionSecretId == null)
                throw new ApiException(400, "Missing required parameter 'dataUnionSecretId' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DataunionsApi->DataunionsContractAddressSecretsDataUnionSecretIdPut");

            var localVarPath = "/dataunions/{contractAddress}/secrets/{dataUnionSecretId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (dataUnionSecretId != null) localVarPathParams.Add("dataUnionSecretId", this.Configuration.ApiClient.ParameterToString(dataUnionSecretId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsDataUnionSecretIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataUnionSecret>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataUnionSecret) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataUnionSecret)));
        }

        /// <summary>
        /// List all data union secrets List all secrets for this data union.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns></returns>
        public void DataunionsContractAddressSecretsGet (string contractAddress)
        {
             DataunionsContractAddressSecretsGetWithHttpInfo(contractAddress);
        }

        /// <summary>
        /// List all data union secrets List all secrets for this data union.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressSecretsGetWithHttpInfo (string contractAddress)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsGet");

            var localVarPath = "/dataunions/{contractAddress}/secrets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all data union secrets List all secrets for this data union.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressSecretsGetAsync (string contractAddress)
        {
             await DataunionsContractAddressSecretsGetAsyncWithHttpInfo(contractAddress);

        }

        /// <summary>
        /// List all data union secrets List all secrets for this data union.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressSecretsGetAsyncWithHttpInfo (string contractAddress)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsGet");

            var localVarPath = "/dataunions/{contractAddress}/secrets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create secret Create data union secret
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Create data union secret details</param>
        /// <returns>DataUnionSecret</returns>
        public DataUnionSecret DataunionsContractAddressSecretsPost (string contractAddress, CreateDataUnionSecret body)
        {
             ApiResponse<DataUnionSecret> localVarResponse = DataunionsContractAddressSecretsPostWithHttpInfo(contractAddress, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create secret Create data union secret
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Create data union secret details</param>
        /// <returns>ApiResponse of DataUnionSecret</returns>
        public ApiResponse< DataUnionSecret > DataunionsContractAddressSecretsPostWithHttpInfo (string contractAddress, CreateDataUnionSecret body)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DataunionsApi->DataunionsContractAddressSecretsPost");

            var localVarPath = "/dataunions/{contractAddress}/secrets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataUnionSecret>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataUnionSecret) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataUnionSecret)));
        }

        /// <summary>
        /// Create secret Create data union secret
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Create data union secret details</param>
        /// <returns>Task of DataUnionSecret</returns>
        public async System.Threading.Tasks.Task<DataUnionSecret> DataunionsContractAddressSecretsPostAsync (string contractAddress, CreateDataUnionSecret body)
        {
             ApiResponse<DataUnionSecret> localVarResponse = await DataunionsContractAddressSecretsPostAsyncWithHttpInfo(contractAddress, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create secret Create data union secret
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <param name="body">Create data union secret details</param>
        /// <returns>Task of ApiResponse (DataUnionSecret)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataUnionSecret>> DataunionsContractAddressSecretsPostAsyncWithHttpInfo (string contractAddress, CreateDataUnionSecret body)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressSecretsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DataunionsApi->DataunionsContractAddressSecretsPost");

            var localVarPath = "/dataunions/{contractAddress}/secrets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressSecretsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataUnionSecret>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataUnionSecret) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataUnionSecret)));
        }

        /// <summary>
        /// Proxy calls to to data union server. Return operator stats
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns></returns>
        public void DataunionsContractAddressStatsGet (string contractAddress)
        {
             DataunionsContractAddressStatsGetWithHttpInfo(contractAddress);
        }

        /// <summary>
        /// Proxy calls to to data union server. Return operator stats
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataunionsContractAddressStatsGetWithHttpInfo (string contractAddress)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressStatsGet");

            var localVarPath = "/dataunions/{contractAddress}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressStatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Proxy calls to to data union server. Return operator stats
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataunionsContractAddressStatsGetAsync (string contractAddress)
        {
             await DataunionsContractAddressStatsGetAsyncWithHttpInfo(contractAddress);

        }

        /// <summary>
        /// Proxy calls to to data union server. Return operator stats
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Ethereum address of the data union smart contract</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataunionsContractAddressStatsGetAsyncWithHttpInfo (string contractAddress)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling DataunionsApi->DataunionsContractAddressStatsGet");

            var localVarPath = "/dataunions/{contractAddress}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractAddress != null) localVarPathParams.Add("contractAddress", this.Configuration.ApiClient.ParameterToString(contractAddress)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataunionsContractAddressStatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
