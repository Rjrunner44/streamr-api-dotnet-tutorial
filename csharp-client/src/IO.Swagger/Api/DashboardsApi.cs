/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Dashboard Item
        /// </summary>
        /// <remarks>
        /// Deletes a Dashboard Item and disassociates it from its parent Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns></returns>
        void DashboardsDashboardIdItemsIdDelete (string dashboardId, string id);

        /// <summary>
        /// Delete a Dashboard Item
        /// </summary>
        /// <remarks>
        /// Deletes a Dashboard Item and disassociates it from its parent Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DashboardsDashboardIdItemsIdDeleteWithHttpInfo (string dashboardId, string id);
        /// <summary>
        /// Get Dashboard Item
        /// </summary>
        /// <remarks>
        /// Get Dashboard Item from associated Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>DashboardItem</returns>
        DashboardItem DashboardsDashboardIdItemsIdGet (string dashboardId, string id);

        /// <summary>
        /// Get Dashboard Item
        /// </summary>
        /// <remarks>
        /// Get Dashboard Item from associated Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>ApiResponse of DashboardItem</returns>
        ApiResponse<DashboardItem> DashboardsDashboardIdItemsIdGetWithHttpInfo (string dashboardId, string id);
        /// <summary>
        /// Update a Dashboard Item
        /// </summary>
        /// <remarks>
        /// Updates an existing Dashboard Item associated with a Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <param name="body">New Dashboard Item details</param>
        /// <returns>DashboardItem</returns>
        DashboardItem DashboardsDashboardIdItemsIdPut (string dashboardId, string id, SaveDashboardItemRequest body);

        /// <summary>
        /// Update a Dashboard Item
        /// </summary>
        /// <remarks>
        /// Updates an existing Dashboard Item associated with a Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <param name="body">New Dashboard Item details</param>
        /// <returns>ApiResponse of DashboardItem</returns>
        ApiResponse<DashboardItem> DashboardsDashboardIdItemsIdPutWithHttpInfo (string dashboardId, string id, SaveDashboardItemRequest body);
        /// <summary>
        /// List dashboards
        /// </summary>
        /// <remarks>
        /// Lists your dashboards
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return dashboards that exactly match the given name. (optional)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to dashboard_get)</param>
        /// <returns>List&lt;DashboardSummary&gt;</returns>
        List<DashboardSummary> DashboardsGet (string name = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);

        /// <summary>
        /// List dashboards
        /// </summary>
        /// <remarks>
        /// Lists your dashboards
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return dashboards that exactly match the given name. (optional)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to dashboard_get)</param>
        /// <returns>ApiResponse of List&lt;DashboardSummary&gt;</returns>
        ApiResponse<List<DashboardSummary>> DashboardsGetWithHttpInfo (string name = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);
        /// <summary>
        /// Delete a Dashboard
        /// </summary>
        /// <remarks>
        /// Deletes a Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be deleted</param>
        /// <returns></returns>
        void DashboardsIdDelete (string id);

        /// <summary>
        /// Delete a Dashboard
        /// </summary>
        /// <remarks>
        /// Deletes a Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DashboardsIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Get Dashboard
        /// </summary>
        /// <remarks>
        /// Get Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be fetched</param>
        /// <returns>Dashboard</returns>
        Dashboard DashboardsIdGet (string id);

        /// <summary>
        /// Get Dashboard
        /// </summary>
        /// <remarks>
        /// Get Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be fetched</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> DashboardsIdGetWithHttpInfo (string id);
        /// <summary>
        /// List Items of Dashboard
        /// </summary>
        /// <remarks>
        /// Get Items of Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard whose Items are to be fetched</param>
        /// <returns>List&lt;DashboardItem&gt;</returns>
        List<DashboardItem> DashboardsIdItemsGet (string id);

        /// <summary>
        /// List Items of Dashboard
        /// </summary>
        /// <remarks>
        /// Get Items of Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard whose Items are to be fetched</param>
        /// <returns>ApiResponse of List&lt;DashboardItem&gt;</returns>
        ApiResponse<List<DashboardItem>> DashboardsIdItemsGetWithHttpInfo (string id);
        /// <summary>
        /// Create a new Dashboard Item
        /// </summary>
        /// <remarks>
        /// Creates a new Dashboard Item associated with a Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the associated Dashboard</param>
        /// <param name="body">Dashboard Item</param>
        /// <returns>DashboardItem</returns>
        DashboardItem DashboardsIdItemsPost (string id, SaveDashboardItemRequest body);

        /// <summary>
        /// Create a new Dashboard Item
        /// </summary>
        /// <remarks>
        /// Creates a new Dashboard Item associated with a Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the associated Dashboard</param>
        /// <param name="body">Dashboard Item</param>
        /// <returns>ApiResponse of DashboardItem</returns>
        ApiResponse<DashboardItem> DashboardsIdItemsPostWithHttpInfo (string id, SaveDashboardItemRequest body);
        /// <summary>
        /// Update a Dashboard
        /// </summary>
        /// <remarks>
        /// Updates an existing Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be updated</param>
        /// <param name="body">New Dashboard details</param>
        /// <returns>Dashboard</returns>
        Dashboard DashboardsIdPut (string id, DashboardSaveRequest body);

        /// <summary>
        /// Update a Dashboard
        /// </summary>
        /// <remarks>
        /// Updates an existing Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be updated</param>
        /// <param name="body">New Dashboard details</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> DashboardsIdPutWithHttpInfo (string id, DashboardSaveRequest body);
        /// <summary>
        /// Create a Dashboard
        /// </summary>
        /// <remarks>
        /// Creates a new empty Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Dashboard object</param>
        /// <returns>Dashboard</returns>
        Dashboard DashboardsPost (DashboardSaveRequest body);

        /// <summary>
        /// Create a Dashboard
        /// </summary>
        /// <remarks>
        /// Creates a new empty Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Dashboard object</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> DashboardsPostWithHttpInfo (DashboardSaveRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Dashboard Item
        /// </summary>
        /// <remarks>
        /// Deletes a Dashboard Item and disassociates it from its parent Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DashboardsDashboardIdItemsIdDeleteAsync (string dashboardId, string id);

        /// <summary>
        /// Delete a Dashboard Item
        /// </summary>
        /// <remarks>
        /// Deletes a Dashboard Item and disassociates it from its parent Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsDashboardIdItemsIdDeleteAsyncWithHttpInfo (string dashboardId, string id);
        /// <summary>
        /// Get Dashboard Item
        /// </summary>
        /// <remarks>
        /// Get Dashboard Item from associated Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>Task of DashboardItem</returns>
        System.Threading.Tasks.Task<DashboardItem> DashboardsDashboardIdItemsIdGetAsync (string dashboardId, string id);

        /// <summary>
        /// Get Dashboard Item
        /// </summary>
        /// <remarks>
        /// Get Dashboard Item from associated Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>Task of ApiResponse (DashboardItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardItem>> DashboardsDashboardIdItemsIdGetAsyncWithHttpInfo (string dashboardId, string id);
        /// <summary>
        /// Update a Dashboard Item
        /// </summary>
        /// <remarks>
        /// Updates an existing Dashboard Item associated with a Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <param name="body">New Dashboard Item details</param>
        /// <returns>Task of DashboardItem</returns>
        System.Threading.Tasks.Task<DashboardItem> DashboardsDashboardIdItemsIdPutAsync (string dashboardId, string id, SaveDashboardItemRequest body);

        /// <summary>
        /// Update a Dashboard Item
        /// </summary>
        /// <remarks>
        /// Updates an existing Dashboard Item associated with a Dashboard
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <param name="body">New Dashboard Item details</param>
        /// <returns>Task of ApiResponse (DashboardItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardItem>> DashboardsDashboardIdItemsIdPutAsyncWithHttpInfo (string dashboardId, string id, SaveDashboardItemRequest body);
        /// <summary>
        /// List dashboards
        /// </summary>
        /// <remarks>
        /// Lists your dashboards
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return dashboards that exactly match the given name. (optional)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to dashboard_get)</param>
        /// <returns>Task of List&lt;DashboardSummary&gt;</returns>
        System.Threading.Tasks.Task<List<DashboardSummary>> DashboardsGetAsync (string name = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);

        /// <summary>
        /// List dashboards
        /// </summary>
        /// <remarks>
        /// Lists your dashboards
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return dashboards that exactly match the given name. (optional)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to dashboard_get)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DashboardSummary>>> DashboardsGetAsyncWithHttpInfo (string name = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);
        /// <summary>
        /// Delete a Dashboard
        /// </summary>
        /// <remarks>
        /// Deletes a Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DashboardsIdDeleteAsync (string id);

        /// <summary>
        /// Delete a Dashboard
        /// </summary>
        /// <remarks>
        /// Deletes a Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Dashboard
        /// </summary>
        /// <remarks>
        /// Get Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be fetched</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> DashboardsIdGetAsync (string id);

        /// <summary>
        /// Get Dashboard
        /// </summary>
        /// <remarks>
        /// Get Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be fetched</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> DashboardsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// List Items of Dashboard
        /// </summary>
        /// <remarks>
        /// Get Items of Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard whose Items are to be fetched</param>
        /// <returns>Task of List&lt;DashboardItem&gt;</returns>
        System.Threading.Tasks.Task<List<DashboardItem>> DashboardsIdItemsGetAsync (string id);

        /// <summary>
        /// List Items of Dashboard
        /// </summary>
        /// <remarks>
        /// Get Items of Dashboard by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard whose Items are to be fetched</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DashboardItem>>> DashboardsIdItemsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a new Dashboard Item
        /// </summary>
        /// <remarks>
        /// Creates a new Dashboard Item associated with a Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the associated Dashboard</param>
        /// <param name="body">Dashboard Item</param>
        /// <returns>Task of DashboardItem</returns>
        System.Threading.Tasks.Task<DashboardItem> DashboardsIdItemsPostAsync (string id, SaveDashboardItemRequest body);

        /// <summary>
        /// Create a new Dashboard Item
        /// </summary>
        /// <remarks>
        /// Creates a new Dashboard Item associated with a Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the associated Dashboard</param>
        /// <param name="body">Dashboard Item</param>
        /// <returns>Task of ApiResponse (DashboardItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardItem>> DashboardsIdItemsPostAsyncWithHttpInfo (string id, SaveDashboardItemRequest body);
        /// <summary>
        /// Update a Dashboard
        /// </summary>
        /// <remarks>
        /// Updates an existing Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be updated</param>
        /// <param name="body">New Dashboard details</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> DashboardsIdPutAsync (string id, DashboardSaveRequest body);

        /// <summary>
        /// Update a Dashboard
        /// </summary>
        /// <remarks>
        /// Updates an existing Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be updated</param>
        /// <param name="body">New Dashboard details</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> DashboardsIdPutAsyncWithHttpInfo (string id, DashboardSaveRequest body);
        /// <summary>
        /// Create a Dashboard
        /// </summary>
        /// <remarks>
        /// Creates a new empty Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Dashboard object</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> DashboardsPostAsync (DashboardSaveRequest body);

        /// <summary>
        /// Create a Dashboard
        /// </summary>
        /// <remarks>
        /// Creates a new empty Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Dashboard object</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> DashboardsPostAsyncWithHttpInfo (DashboardSaveRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DashboardsApi : IDashboardsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DashboardsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a Dashboard Item Deletes a Dashboard Item and disassociates it from its parent Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns></returns>
        public void DashboardsDashboardIdItemsIdDelete (string dashboardId, string id)
        {
             DashboardsDashboardIdItemsIdDeleteWithHttpInfo(dashboardId, id);
        }

        /// <summary>
        /// Delete a Dashboard Item Deletes a Dashboard Item and disassociates it from its parent Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DashboardsDashboardIdItemsIdDeleteWithHttpInfo (string dashboardId, string id)
        {
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsDashboardIdItemsIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsDashboardIdItemsIdDelete");

            var localVarPath = "/dashboards/{dashboardId}/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIdItemsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Dashboard Item Deletes a Dashboard Item and disassociates it from its parent Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DashboardsDashboardIdItemsIdDeleteAsync (string dashboardId, string id)
        {
             await DashboardsDashboardIdItemsIdDeleteAsyncWithHttpInfo(dashboardId, id);

        }

        /// <summary>
        /// Delete a Dashboard Item Deletes a Dashboard Item and disassociates it from its parent Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsDashboardIdItemsIdDeleteAsyncWithHttpInfo (string dashboardId, string id)
        {
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsDashboardIdItemsIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsDashboardIdItemsIdDelete");

            var localVarPath = "/dashboards/{dashboardId}/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIdItemsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Dashboard Item Get Dashboard Item from associated Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>DashboardItem</returns>
        public DashboardItem DashboardsDashboardIdItemsIdGet (string dashboardId, string id)
        {
             ApiResponse<DashboardItem> localVarResponse = DashboardsDashboardIdItemsIdGetWithHttpInfo(dashboardId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Item Get Dashboard Item from associated Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>ApiResponse of DashboardItem</returns>
        public ApiResponse< DashboardItem > DashboardsDashboardIdItemsIdGetWithHttpInfo (string dashboardId, string id)
        {
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsDashboardIdItemsIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsDashboardIdItemsIdGet");

            var localVarPath = "/dashboards/{dashboardId}/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIdItemsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DashboardItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItem)));
        }

        /// <summary>
        /// Get Dashboard Item Get Dashboard Item from associated Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>Task of DashboardItem</returns>
        public async System.Threading.Tasks.Task<DashboardItem> DashboardsDashboardIdItemsIdGetAsync (string dashboardId, string id)
        {
             ApiResponse<DashboardItem> localVarResponse = await DashboardsDashboardIdItemsIdGetAsyncWithHttpInfo(dashboardId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Dashboard Item Get Dashboard Item from associated Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <returns>Task of ApiResponse (DashboardItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardItem>> DashboardsDashboardIdItemsIdGetAsyncWithHttpInfo (string dashboardId, string id)
        {
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsDashboardIdItemsIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsDashboardIdItemsIdGet");

            var localVarPath = "/dashboards/{dashboardId}/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIdItemsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DashboardItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItem)));
        }

        /// <summary>
        /// Update a Dashboard Item Updates an existing Dashboard Item associated with a Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <param name="body">New Dashboard Item details</param>
        /// <returns>DashboardItem</returns>
        public DashboardItem DashboardsDashboardIdItemsIdPut (string dashboardId, string id, SaveDashboardItemRequest body)
        {
             ApiResponse<DashboardItem> localVarResponse = DashboardsDashboardIdItemsIdPutWithHttpInfo(dashboardId, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Dashboard Item Updates an existing Dashboard Item associated with a Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <param name="body">New Dashboard Item details</param>
        /// <returns>ApiResponse of DashboardItem</returns>
        public ApiResponse< DashboardItem > DashboardsDashboardIdItemsIdPutWithHttpInfo (string dashboardId, string id, SaveDashboardItemRequest body)
        {
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsDashboardIdItemsIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsDashboardIdItemsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DashboardsApi->DashboardsDashboardIdItemsIdPut");

            var localVarPath = "/dashboards/{dashboardId}/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIdItemsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DashboardItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItem)));
        }

        /// <summary>
        /// Update a Dashboard Item Updates an existing Dashboard Item associated with a Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <param name="body">New Dashboard Item details</param>
        /// <returns>Task of DashboardItem</returns>
        public async System.Threading.Tasks.Task<DashboardItem> DashboardsDashboardIdItemsIdPutAsync (string dashboardId, string id, SaveDashboardItemRequest body)
        {
             ApiResponse<DashboardItem> localVarResponse = await DashboardsDashboardIdItemsIdPutAsyncWithHttpInfo(dashboardId, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Dashboard Item Updates an existing Dashboard Item associated with a Dashboard
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardId">ID of the Dashboard</param>
        /// <param name="id">ID of the Dashboard Item</param>
        /// <param name="body">New Dashboard Item details</param>
        /// <returns>Task of ApiResponse (DashboardItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardItem>> DashboardsDashboardIdItemsIdPutAsyncWithHttpInfo (string dashboardId, string id, SaveDashboardItemRequest body)
        {
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsDashboardIdItemsIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsDashboardIdItemsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DashboardsApi->DashboardsDashboardIdItemsIdPut");

            var localVarPath = "/dashboards/{dashboardId}/items/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIdItemsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DashboardItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItem)));
        }

        /// <summary>
        /// List dashboards Lists your dashboards
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return dashboards that exactly match the given name. (optional)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to dashboard_get)</param>
        /// <returns>List&lt;DashboardSummary&gt;</returns>
        public List<DashboardSummary> DashboardsGet (string name = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {
             ApiResponse<List<DashboardSummary>> localVarResponse = DashboardsGetWithHttpInfo(name, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List dashboards Lists your dashboards
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return dashboards that exactly match the given name. (optional)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to dashboard_get)</param>
        /// <returns>ApiResponse of List&lt;DashboardSummary&gt;</returns>
        public ApiResponse< List<DashboardSummary> > DashboardsGetWithHttpInfo (string name = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {

            var localVarPath = "/dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DashboardSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardSummary>)));
        }

        /// <summary>
        /// List dashboards Lists your dashboards
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return dashboards that exactly match the given name. (optional)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to dashboard_get)</param>
        /// <returns>Task of List&lt;DashboardSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<DashboardSummary>> DashboardsGetAsync (string name = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {
             ApiResponse<List<DashboardSummary>> localVarResponse = await DashboardsGetAsyncWithHttpInfo(name, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List dashboards Lists your dashboards
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return dashboards that exactly match the given name. (optional)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to dashboard_get)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DashboardSummary>>> DashboardsGetAsyncWithHttpInfo (string name = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {

            var localVarPath = "/dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DashboardSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardSummary>)));
        }

        /// <summary>
        /// Delete a Dashboard Deletes a Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be deleted</param>
        /// <returns></returns>
        public void DashboardsIdDelete (string id)
        {
             DashboardsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Dashboard Deletes a Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DashboardsIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdDelete");

            var localVarPath = "/dashboards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Dashboard Deletes a Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DashboardsIdDeleteAsync (string id)
        {
             await DashboardsIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Dashboard Deletes a Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdDelete");

            var localVarPath = "/dashboards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Dashboard Get Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be fetched</param>
        /// <returns>Dashboard</returns>
        public Dashboard DashboardsIdGet (string id)
        {
             ApiResponse<Dashboard> localVarResponse = DashboardsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dashboard Get Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be fetched</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public ApiResponse< Dashboard > DashboardsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdGet");

            var localVarPath = "/dashboards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dashboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dashboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dashboard)));
        }

        /// <summary>
        /// Get Dashboard Get Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be fetched</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> DashboardsIdGetAsync (string id)
        {
             ApiResponse<Dashboard> localVarResponse = await DashboardsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Dashboard Get Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be fetched</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dashboard>> DashboardsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdGet");

            var localVarPath = "/dashboards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dashboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dashboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dashboard)));
        }

        /// <summary>
        /// List Items of Dashboard Get Items of Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard whose Items are to be fetched</param>
        /// <returns>List&lt;DashboardItem&gt;</returns>
        public List<DashboardItem> DashboardsIdItemsGet (string id)
        {
             ApiResponse<List<DashboardItem>> localVarResponse = DashboardsIdItemsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Items of Dashboard Get Items of Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard whose Items are to be fetched</param>
        /// <returns>ApiResponse of List&lt;DashboardItem&gt;</returns>
        public ApiResponse< List<DashboardItem> > DashboardsIdItemsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdItemsGet");

            var localVarPath = "/dashboards/{id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdItemsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DashboardItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardItem>)));
        }

        /// <summary>
        /// List Items of Dashboard Get Items of Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard whose Items are to be fetched</param>
        /// <returns>Task of List&lt;DashboardItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<DashboardItem>> DashboardsIdItemsGetAsync (string id)
        {
             ApiResponse<List<DashboardItem>> localVarResponse = await DashboardsIdItemsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Items of Dashboard Get Items of Dashboard by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard whose Items are to be fetched</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DashboardItem>>> DashboardsIdItemsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdItemsGet");

            var localVarPath = "/dashboards/{id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdItemsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DashboardItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardItem>)));
        }

        /// <summary>
        /// Create a new Dashboard Item Creates a new Dashboard Item associated with a Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the associated Dashboard</param>
        /// <param name="body">Dashboard Item</param>
        /// <returns>DashboardItem</returns>
        public DashboardItem DashboardsIdItemsPost (string id, SaveDashboardItemRequest body)
        {
             ApiResponse<DashboardItem> localVarResponse = DashboardsIdItemsPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Dashboard Item Creates a new Dashboard Item associated with a Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the associated Dashboard</param>
        /// <param name="body">Dashboard Item</param>
        /// <returns>ApiResponse of DashboardItem</returns>
        public ApiResponse< DashboardItem > DashboardsIdItemsPostWithHttpInfo (string id, SaveDashboardItemRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdItemsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DashboardsApi->DashboardsIdItemsPost");

            var localVarPath = "/dashboards/{id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdItemsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DashboardItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItem)));
        }

        /// <summary>
        /// Create a new Dashboard Item Creates a new Dashboard Item associated with a Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the associated Dashboard</param>
        /// <param name="body">Dashboard Item</param>
        /// <returns>Task of DashboardItem</returns>
        public async System.Threading.Tasks.Task<DashboardItem> DashboardsIdItemsPostAsync (string id, SaveDashboardItemRequest body)
        {
             ApiResponse<DashboardItem> localVarResponse = await DashboardsIdItemsPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Dashboard Item Creates a new Dashboard Item associated with a Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the associated Dashboard</param>
        /// <param name="body">Dashboard Item</param>
        /// <returns>Task of ApiResponse (DashboardItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardItem>> DashboardsIdItemsPostAsyncWithHttpInfo (string id, SaveDashboardItemRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdItemsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DashboardsApi->DashboardsIdItemsPost");

            var localVarPath = "/dashboards/{id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdItemsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DashboardItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItem)));
        }

        /// <summary>
        /// Update a Dashboard Updates an existing Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be updated</param>
        /// <param name="body">New Dashboard details</param>
        /// <returns>Dashboard</returns>
        public Dashboard DashboardsIdPut (string id, DashboardSaveRequest body)
        {
             ApiResponse<Dashboard> localVarResponse = DashboardsIdPutWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Dashboard Updates an existing Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be updated</param>
        /// <param name="body">New Dashboard details</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public ApiResponse< Dashboard > DashboardsIdPutWithHttpInfo (string id, DashboardSaveRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DashboardsApi->DashboardsIdPut");

            var localVarPath = "/dashboards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dashboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dashboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dashboard)));
        }

        /// <summary>
        /// Update a Dashboard Updates an existing Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be updated</param>
        /// <param name="body">New Dashboard details</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> DashboardsIdPutAsync (string id, DashboardSaveRequest body)
        {
             ApiResponse<Dashboard> localVarResponse = await DashboardsIdPutAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Dashboard Updates an existing Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the Dashboard to be updated</param>
        /// <param name="body">New Dashboard details</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dashboard>> DashboardsIdPutAsyncWithHttpInfo (string id, DashboardSaveRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DashboardsApi->DashboardsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DashboardsApi->DashboardsIdPut");

            var localVarPath = "/dashboards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dashboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dashboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dashboard)));
        }

        /// <summary>
        /// Create a Dashboard Creates a new empty Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Dashboard object</param>
        /// <returns>Dashboard</returns>
        public Dashboard DashboardsPost (DashboardSaveRequest body)
        {
             ApiResponse<Dashboard> localVarResponse = DashboardsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Dashboard Creates a new empty Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Dashboard object</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public ApiResponse< Dashboard > DashboardsPostWithHttpInfo (DashboardSaveRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DashboardsApi->DashboardsPost");

            var localVarPath = "/dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dashboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dashboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dashboard)));
        }

        /// <summary>
        /// Create a Dashboard Creates a new empty Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Dashboard object</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> DashboardsPostAsync (DashboardSaveRequest body)
        {
             ApiResponse<Dashboard> localVarResponse = await DashboardsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Dashboard Creates a new empty Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Dashboard object</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dashboard>> DashboardsPostAsyncWithHttpInfo (DashboardSaveRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DashboardsApi->DashboardsPost");

            var localVarPath = "/dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dashboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dashboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dashboard)));
        }

    }
}
