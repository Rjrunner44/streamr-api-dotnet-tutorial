/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing StreamsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StreamsApiTests
    {
        private StreamsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StreamsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StreamsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StreamsApi
            //Assert.IsInstanceOfType(typeof(StreamsApi), instance, "instance is a StreamsApi");
        }

        
        /// <summary>
        /// Test StreamsGet
        /// </summary>
        [Test]
        public void StreamsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //bool? uiChannel = null;
            //bool? noConfig = null;
            //string search = null;
            //string sortBy = null;
            //string order = null;
            //int? max = null;
            //int? offset = null;
            //bool? grantedAccess = null;
            //bool? publicAccess = null;
            //string operation = null;
            //var response = instance.StreamsGet(name, uiChannel, noConfig, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
            //Assert.IsInstanceOf<List<Stream>> (response, "response is List<Stream>");
        }
        
        /// <summary>
        /// Test StreamsIdDataPartitionsPartitionFromGet
        /// </summary>
        [Test]
        public void StreamsIdDataPartitionsPartitionFromGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? partition = null;
            //int? fromTimestamp = null;
            //int? fromSequenceNumber = null;
            //string publisherId = null;
            //instance.StreamsIdDataPartitionsPartitionFromGet(id, partition, fromTimestamp, fromSequenceNumber, publisherId);
            
        }
        
        /// <summary>
        /// Test StreamsIdDataPartitionsPartitionLastGet
        /// </summary>
        [Test]
        public void StreamsIdDataPartitionsPartitionLastGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? partition = null;
            //int? count = null;
            //instance.StreamsIdDataPartitionsPartitionLastGet(id, partition, count);
            
        }
        
        /// <summary>
        /// Test StreamsIdDataPartitionsPartitionRangeGet
        /// </summary>
        [Test]
        public void StreamsIdDataPartitionsPartitionRangeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? partition = null;
            //int? fromTimestamp = null;
            //int? toTimestamp = null;
            //int? fromSequenceNumber = null;
            //int? toSequenceNumber = null;
            //string publisherId = null;
            //instance.StreamsIdDataPartitionsPartitionRangeGet(id, partition, fromTimestamp, toTimestamp, fromSequenceNumber, toSequenceNumber, publisherId);
            
        }
        
        /// <summary>
        /// Test StreamsIdDataPost
        /// </summary>
        [Test]
        public void StreamsIdDataPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? ttl = null;
            //string pkey = null;
            //int? signatureType = null;
            //string address = null;
            //string signature = null;
            //instance.StreamsIdDataPost(id, ttl, pkey, signatureType, address, signature);
            
        }
        
        /// <summary>
        /// Test StreamsIdDelete
        /// </summary>
        [Test]
        public void StreamsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.StreamsIdDelete(id);
            
        }
        
        /// <summary>
        /// Test StreamsIdDetectFieldsGet
        /// </summary>
        [Test]
        public void StreamsIdDetectFieldsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? flatten = null;
            //instance.StreamsIdDetectFieldsGet(id, flatten);
            
        }
        
        /// <summary>
        /// Test StreamsIdDetectFieldsPost
        /// </summary>
        [Test]
        public void StreamsIdDetectFieldsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? flatten = null;
            //instance.StreamsIdDetectFieldsPost(id, flatten);
            
        }
        
        /// <summary>
        /// Test StreamsIdGet
        /// </summary>
        [Test]
        public void StreamsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.StreamsIdGet(id);
            //Assert.IsInstanceOf<Stream> (response, "response is Stream");
        }
        
        /// <summary>
        /// Test StreamsIdKeysGet
        /// </summary>
        [Test]
        public void StreamsIdKeysGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.StreamsIdKeysGet(id);
            //Assert.IsInstanceOf<List<ResourceKey>> (response, "response is List<ResourceKey>");
        }
        
        /// <summary>
        /// Test StreamsIdKeysPost
        /// </summary>
        [Test]
        public void StreamsIdKeysPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ResourceKeyCreateRequest body = null;
            //var response = instance.StreamsIdKeysPost(id, body);
            //Assert.IsInstanceOf<ResourceKey> (response, "response is ResourceKey");
        }
        
        /// <summary>
        /// Test StreamsIdPermissionsGet
        /// </summary>
        [Test]
        public void StreamsIdPermissionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.StreamsIdPermissionsGet(id);
            //Assert.IsInstanceOf<List<Permission>> (response, "response is List<Permission>");
        }
        
        /// <summary>
        /// Test StreamsIdPermissionsPidDelete
        /// </summary>
        [Test]
        public void StreamsIdPermissionsPidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? pid = null;
            //instance.StreamsIdPermissionsPidDelete(id, pid);
            
        }
        
        /// <summary>
        /// Test StreamsIdPermissionsPidGet
        /// </summary>
        [Test]
        public void StreamsIdPermissionsPidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? pid = null;
            //var response = instance.StreamsIdPermissionsPidGet(id, pid);
            //Assert.IsInstanceOf<Permission> (response, "response is Permission");
        }
        
        /// <summary>
        /// Test StreamsIdPermissionsPost
        /// </summary>
        [Test]
        public void StreamsIdPermissionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Permission body = null;
            //var response = instance.StreamsIdPermissionsPost(id, body);
            //Assert.IsInstanceOf<Permission> (response, "response is Permission");
        }
        
        /// <summary>
        /// Test StreamsIdPut
        /// </summary>
        [Test]
        public void StreamsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //StreamCreateRequest body = null;
            //var response = instance.StreamsIdPut(id, body);
            //Assert.IsInstanceOf<Stream> (response, "response is Stream");
        }
        
        /// <summary>
        /// Test StreamsPost
        /// </summary>
        [Test]
        public void StreamsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StreamCreateRequest body = null;
            //var response = instance.StreamsPost(body);
            //Assert.IsInstanceOf<Stream> (response, "response is Stream");
        }
        
        /// <summary>
        /// Test StreamsStreamIdKeysIdDelete
        /// </summary>
        [Test]
        public void StreamsStreamIdKeysIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string streamId = null;
            //string id = null;
            //instance.StreamsStreamIdKeysIdDelete(streamId, id);
            
        }
        
        /// <summary>
        /// Test StreamsStreamIdKeysIdPut
        /// </summary>
        [Test]
        public void StreamsStreamIdKeysIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateStreamKeyRequest body = null;
            //string streamId = null;
            //string id = null;
            //instance.StreamsStreamIdKeysIdPut(body, streamId, id);
            
        }
        
        /// <summary>
        /// Test UsersMeKeysIdDelete
        /// </summary>
        [Test]
        public void UsersMeKeysIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.UsersMeKeysIdDelete(id);
            
        }
        
    }

}
