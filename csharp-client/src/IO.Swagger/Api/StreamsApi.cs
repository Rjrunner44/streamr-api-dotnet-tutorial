/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List streams
        /// </summary>
        /// <remarks>
        /// Lists the streams available to the user. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return streams that exactly match the given name. (optional)</param>
        /// <param name="uiChannel">Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false. (optional, default to false)</param>
        /// <param name="noConfig">Remove config object from JSON response. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to stream_get)</param>
        /// <returns>List&lt;Stream&gt;</returns>
        List<Stream> StreamsGet (string name = null, bool? uiChannel = null, bool? noConfig = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);

        /// <summary>
        /// List streams
        /// </summary>
        /// <remarks>
        /// Lists the streams available to the user. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return streams that exactly match the given name. (optional)</param>
        /// <param name="uiChannel">Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false. (optional, default to false)</param>
        /// <param name="noConfig">Remove config object from JSON response. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to stream_get)</param>
        /// <returns>ApiResponse of List&lt;Stream&gt;</returns>
        ApiResponse<List<Stream>> StreamsGetWithHttpInfo (string name = null, bool? uiChannel = null, bool? noConfig = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);
        /// <summary>
        /// Get events from a timestamp or reference from the stream
        /// </summary>
        /// <remarks>
        /// Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns></returns>
        void StreamsIdDataPartitionsPartitionFromGet (string id, int? partition, int? fromTimestamp, int? fromSequenceNumber = null, string publisherId = null);

        /// <summary>
        /// Get events from a timestamp or reference from the stream
        /// </summary>
        /// <remarks>
        /// Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsIdDataPartitionsPartitionFromGetWithHttpInfo (string id, int? partition, int? fromTimestamp, int? fromSequenceNumber = null, string publisherId = null);
        /// <summary>
        /// Get most recent events from a stream
        /// </summary>
        /// <remarks>
        /// Get the N most recent events from a stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="count">Number of messages to fetch (optional, default to 1)</param>
        /// <returns></returns>
        void StreamsIdDataPartitionsPartitionLastGet (string id, int? partition, int? count = null);

        /// <summary>
        /// Get most recent events from a stream
        /// </summary>
        /// <remarks>
        /// Get the N most recent events from a stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="count">Number of messages to fetch (optional, default to 1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsIdDataPartitionsPartitionLastGetWithHttpInfo (string id, int? partition, int? count = null);
        /// <summary>
        /// Get events between a range from the stream
        /// </summary>
        /// <remarks>
        /// Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="toTimestamp">Timestamp upper bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="toSequenceNumber">Sequence number upper bound of toTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns></returns>
        void StreamsIdDataPartitionsPartitionRangeGet (string id, int? partition, int? fromTimestamp, int? toTimestamp, int? fromSequenceNumber = null, int? toSequenceNumber = null, string publisherId = null);

        /// <summary>
        /// Get events between a range from the stream
        /// </summary>
        /// <remarks>
        /// Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="toTimestamp">Timestamp upper bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="toSequenceNumber">Sequence number upper bound of toTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsIdDataPartitionsPartitionRangeGetWithHttpInfo (string id, int? partition, int? fromTimestamp, int? toTimestamp, int? fromSequenceNumber = null, int? toSequenceNumber = null, string publisherId = null);
        /// <summary>
        /// Add new event to stream
        /// </summary>
        /// <remarks>
        /// Add a new event to the stream identified by id. Requires a write permission on the stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="ttl">Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default. (optional)</param>
        /// <param name="pkey">For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected. (optional)</param>
        /// <param name="signatureType">Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0. (optional)</param>
        /// <param name="address">Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0. (optional)</param>
        /// <param name="signature">If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the &#39;address&#39; query parameter. This parameter is not needed if the signature type is 0. (optional)</param>
        /// <returns></returns>
        void StreamsIdDataPost (string id, string jsonData, int? ttl = null, string pkey = null, int? signatureType = null, string address = null, string signature = null);

        /// <summary>
        /// Add new event to stream
        /// </summary>
        /// <remarks>
        /// Add a new event to the stream identified by id. Requires a write permission on the stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="ttl">Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default. (optional)</param>
        /// <param name="pkey">For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected. (optional)</param>
        /// <param name="signatureType">Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0. (optional)</param>
        /// <param name="address">Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0. (optional)</param>
        /// <param name="signature">If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the &#39;address&#39; query parameter. This parameter is not needed if the signature type is 0. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsIdDataPostWithHttpInfo (string id, string jsonData, int? ttl = null, string pkey = null, int? signatureType = null, string address = null, string signature = null);
        /// <summary>
        /// Delete a stream
        /// </summary>
        /// <remarks>
        /// Deletes a stream by id. This will also delete all data for this stream. Use with caution!
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be deleted</param>
        /// <returns></returns>
        void StreamsIdDelete (string id);

        /// <summary>
        /// Delete a stream
        /// </summary>
        /// <remarks>
        /// Deletes a stream by id. This will also delete all data for this stream. Use with caution!
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Detect stream&#39;s field types.
        /// </summary>
        /// <remarks>
        /// Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns></returns>
        void StreamsIdDetectFieldsGet (string id, bool? flatten = null);

        /// <summary>
        /// Detect stream&#39;s field types.
        /// </summary>
        /// <remarks>
        /// Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsIdDetectFieldsGetWithHttpInfo (string id, bool? flatten = null);
        /// <summary>
        /// Detect stream&#39;s field types.
        /// </summary>
        /// <remarks>
        /// Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns></returns>
        void StreamsIdDetectFieldsPost (string id, bool? flatten = null);

        /// <summary>
        /// Detect stream&#39;s field types.
        /// </summary>
        /// <remarks>
        /// Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsIdDetectFieldsPostWithHttpInfo (string id, bool? flatten = null);
        /// <summary>
        /// Get stream by id
        /// </summary>
        /// <remarks>
        /// Returns a stream by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be fetched</param>
        /// <returns>Stream</returns>
        Stream StreamsIdGet (string id);

        /// <summary>
        /// Get stream by id
        /// </summary>
        /// <remarks>
        /// Returns a stream by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be fetched</param>
        /// <returns>ApiResponse of Stream</returns>
        ApiResponse<Stream> StreamsIdGetWithHttpInfo (string id);
        /// <summary>
        /// List keys
        /// </summary>
        /// <remarks>
        /// List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>List&lt;ResourceKey&gt;</returns>
        List<ResourceKey> StreamsIdKeysGet (string id);

        /// <summary>
        /// List keys
        /// </summary>
        /// <remarks>
        /// List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>ApiResponse of List&lt;ResourceKey&gt;</returns>
        ApiResponse<List<ResourceKey>> StreamsIdKeysGetWithHttpInfo (string id);
        /// <summary>
        /// Create a key
        /// </summary>
        /// <remarks>
        /// Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>ResourceKey</returns>
        ResourceKey StreamsIdKeysPost (string id, ResourceKeyCreateRequest body);

        /// <summary>
        /// Create a key
        /// </summary>
        /// <remarks>
        /// Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>ApiResponse of ResourceKey</returns>
        ApiResponse<ResourceKey> StreamsIdKeysPostWithHttpInfo (string id, ResourceKeyCreateRequest body);
        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Lists the permissions to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>List&lt;Permission&gt;</returns>
        List<Permission> StreamsIdPermissionsGet (string id);

        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Lists the permissions to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>ApiResponse of List&lt;Permission&gt;</returns>
        ApiResponse<List<Permission>> StreamsIdPermissionsGetWithHttpInfo (string id);
        /// <summary>
        /// Delete a stream permission
        /// </summary>
        /// <remarks>
        /// Deletes a stream permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns></returns>
        void StreamsIdPermissionsPidDelete (string id, int? pid);

        /// <summary>
        /// Delete a stream permission
        /// </summary>
        /// <remarks>
        /// Deletes a stream permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsIdPermissionsPidDeleteWithHttpInfo (string id, int? pid);
        /// <summary>
        /// Get single permission object
        /// </summary>
        /// <remarks>
        /// Returns one stream-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Permission</returns>
        Permission StreamsIdPermissionsPidGet (string id, int? pid);

        /// <summary>
        /// Get single permission object
        /// </summary>
        /// <remarks>
        /// Returns one stream-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>ApiResponse of Permission</returns>
        ApiResponse<Permission> StreamsIdPermissionsPidGetWithHttpInfo (string id, int? pid);
        /// <summary>
        /// Grant permission
        /// </summary>
        /// <remarks>
        /// Grant a new permission to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Permission</returns>
        Permission StreamsIdPermissionsPost (string id, Permission body);

        /// <summary>
        /// Grant permission
        /// </summary>
        /// <remarks>
        /// Grant a new permission to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>ApiResponse of Permission</returns>
        ApiResponse<Permission> StreamsIdPermissionsPostWithHttpInfo (string id, Permission body);
        /// <summary>
        /// Update a stream
        /// </summary>
        /// <remarks>
        /// Updates a stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be updated</param>
        /// <param name="body">StreamCreateRequest object</param>
        /// <returns>Stream</returns>
        Stream StreamsIdPut (string id, StreamCreateRequest body);

        /// <summary>
        /// Update a stream
        /// </summary>
        /// <remarks>
        /// Updates a stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be updated</param>
        /// <param name="body">StreamCreateRequest object</param>
        /// <returns>ApiResponse of Stream</returns>
        ApiResponse<Stream> StreamsIdPutWithHttpInfo (string id, StreamCreateRequest body);
        /// <summary>
        /// Create a new stream
        /// </summary>
        /// <remarks>
        /// Creates a new stream. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Stream object</param>
        /// <returns>Stream</returns>
        Stream StreamsPost (StreamCreateRequest body);

        /// <summary>
        /// Create a new stream
        /// </summary>
        /// <remarks>
        /// Creates a new stream. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Stream object</param>
        /// <returns>ApiResponse of Stream</returns>
        ApiResponse<Stream> StreamsPostWithHttpInfo (StreamCreateRequest body);
        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns></returns>
        void StreamsStreamIdKeysIdDelete (string streamId, string id);

        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsStreamIdKeysIdDeleteWithHttpInfo (string streamId, string id);
        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission
        /// </summary>
        /// <remarks>
        /// Update Stream&#39;s Key&#39;s name and permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns></returns>
        void StreamsStreamIdKeysIdPut (UpdateStreamKeyRequest body, string streamId, string id);

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission
        /// </summary>
        /// <remarks>
        /// Update Stream&#39;s Key&#39;s name and permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsStreamIdKeysIdPutWithHttpInfo (UpdateStreamKeyRequest body, string streamId, string id);
        /// <summary>
        /// Delete user API key
        /// </summary>
        /// <remarks>
        /// Revoke and delete a user API key. Can only be called by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns></returns>
        void UsersMeKeysIdDelete (string id);

        /// <summary>
        /// Delete user API key
        /// </summary>
        /// <remarks>
        /// Revoke and delete a user API key. Can only be called by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersMeKeysIdDeleteWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List streams
        /// </summary>
        /// <remarks>
        /// Lists the streams available to the user. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return streams that exactly match the given name. (optional)</param>
        /// <param name="uiChannel">Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false. (optional, default to false)</param>
        /// <param name="noConfig">Remove config object from JSON response. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to stream_get)</param>
        /// <returns>Task of List&lt;Stream&gt;</returns>
        System.Threading.Tasks.Task<List<Stream>> StreamsGetAsync (string name = null, bool? uiChannel = null, bool? noConfig = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);

        /// <summary>
        /// List streams
        /// </summary>
        /// <remarks>
        /// Lists the streams available to the user. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return streams that exactly match the given name. (optional)</param>
        /// <param name="uiChannel">Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false. (optional, default to false)</param>
        /// <param name="noConfig">Remove config object from JSON response. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to stream_get)</param>
        /// <returns>Task of ApiResponse (List&lt;Stream&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Stream>>> StreamsGetAsyncWithHttpInfo (string name = null, bool? uiChannel = null, bool? noConfig = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null);
        /// <summary>
        /// Get events from a timestamp or reference from the stream
        /// </summary>
        /// <remarks>
        /// Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsIdDataPartitionsPartitionFromGetAsync (string id, int? partition, int? fromTimestamp, int? fromSequenceNumber = null, string publisherId = null);

        /// <summary>
        /// Get events from a timestamp or reference from the stream
        /// </summary>
        /// <remarks>
        /// Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDataPartitionsPartitionFromGetAsyncWithHttpInfo (string id, int? partition, int? fromTimestamp, int? fromSequenceNumber = null, string publisherId = null);
        /// <summary>
        /// Get most recent events from a stream
        /// </summary>
        /// <remarks>
        /// Get the N most recent events from a stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="count">Number of messages to fetch (optional, default to 1)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsIdDataPartitionsPartitionLastGetAsync (string id, int? partition, int? count = null);

        /// <summary>
        /// Get most recent events from a stream
        /// </summary>
        /// <remarks>
        /// Get the N most recent events from a stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="count">Number of messages to fetch (optional, default to 1)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDataPartitionsPartitionLastGetAsyncWithHttpInfo (string id, int? partition, int? count = null);
        /// <summary>
        /// Get events between a range from the stream
        /// </summary>
        /// <remarks>
        /// Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="toTimestamp">Timestamp upper bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="toSequenceNumber">Sequence number upper bound of toTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsIdDataPartitionsPartitionRangeGetAsync (string id, int? partition, int? fromTimestamp, int? toTimestamp, int? fromSequenceNumber = null, int? toSequenceNumber = null, string publisherId = null);

        /// <summary>
        /// Get events between a range from the stream
        /// </summary>
        /// <remarks>
        /// Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="toTimestamp">Timestamp upper bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="toSequenceNumber">Sequence number upper bound of toTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDataPartitionsPartitionRangeGetAsyncWithHttpInfo (string id, int? partition, int? fromTimestamp, int? toTimestamp, int? fromSequenceNumber = null, int? toSequenceNumber = null, string publisherId = null);
        /// <summary>
        /// Add new event to stream
        /// </summary>
        /// <remarks>
        /// Add a new event to the stream identified by id. Requires a write permission on the stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="ttl">Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default. (optional)</param>
        /// <param name="pkey">For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected. (optional)</param>
        /// <param name="signatureType">Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0. (optional)</param>
        /// <param name="address">Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0. (optional)</param>
        /// <param name="signature">If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the &#39;address&#39; query parameter. This parameter is not needed if the signature type is 0. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsIdDataPostAsync (string id, int? ttl = null, string pkey = null, int? signatureType = null, string address = null, string signature = null);

        /// <summary>
        /// Add new event to stream
        /// </summary>
        /// <remarks>
        /// Add a new event to the stream identified by id. Requires a write permission on the stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="ttl">Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default. (optional)</param>
        /// <param name="pkey">For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected. (optional)</param>
        /// <param name="signatureType">Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0. (optional)</param>
        /// <param name="address">Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0. (optional)</param>
        /// <param name="signature">If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the &#39;address&#39; query parameter. This parameter is not needed if the signature type is 0. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDataPostAsyncWithHttpInfo (string id, int? ttl = null, string pkey = null, int? signatureType = null, string address = null, string signature = null);
        /// <summary>
        /// Delete a stream
        /// </summary>
        /// <remarks>
        /// Deletes a stream by id. This will also delete all data for this stream. Use with caution!
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsIdDeleteAsync (string id);

        /// <summary>
        /// Delete a stream
        /// </summary>
        /// <remarks>
        /// Deletes a stream by id. This will also delete all data for this stream. Use with caution!
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Detect stream&#39;s field types.
        /// </summary>
        /// <remarks>
        /// Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsIdDetectFieldsGetAsync (string id, bool? flatten = null);

        /// <summary>
        /// Detect stream&#39;s field types.
        /// </summary>
        /// <remarks>
        /// Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDetectFieldsGetAsyncWithHttpInfo (string id, bool? flatten = null);
        /// <summary>
        /// Detect stream&#39;s field types.
        /// </summary>
        /// <remarks>
        /// Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsIdDetectFieldsPostAsync (string id, bool? flatten = null);

        /// <summary>
        /// Detect stream&#39;s field types.
        /// </summary>
        /// <remarks>
        /// Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDetectFieldsPostAsyncWithHttpInfo (string id, bool? flatten = null);
        /// <summary>
        /// Get stream by id
        /// </summary>
        /// <remarks>
        /// Returns a stream by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be fetched</param>
        /// <returns>Task of Stream</returns>
        System.Threading.Tasks.Task<Stream> StreamsIdGetAsync (string id);

        /// <summary>
        /// Get stream by id
        /// </summary>
        /// <remarks>
        /// Returns a stream by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be fetched</param>
        /// <returns>Task of ApiResponse (Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stream>> StreamsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// List keys
        /// </summary>
        /// <remarks>
        /// List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of List&lt;ResourceKey&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceKey>> StreamsIdKeysGetAsync (string id);

        /// <summary>
        /// List keys
        /// </summary>
        /// <remarks>
        /// List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceKey>>> StreamsIdKeysGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a key
        /// </summary>
        /// <remarks>
        /// Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ResourceKey</returns>
        System.Threading.Tasks.Task<ResourceKey> StreamsIdKeysPostAsync (string id, ResourceKeyCreateRequest body);

        /// <summary>
        /// Create a key
        /// </summary>
        /// <remarks>
        /// Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ApiResponse (ResourceKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceKey>> StreamsIdKeysPostAsyncWithHttpInfo (string id, ResourceKeyCreateRequest body);
        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Lists the permissions to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of List&lt;Permission&gt;</returns>
        System.Threading.Tasks.Task<List<Permission>> StreamsIdPermissionsGetAsync (string id);

        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Lists the permissions to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of ApiResponse (List&lt;Permission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Permission>>> StreamsIdPermissionsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a stream permission
        /// </summary>
        /// <remarks>
        /// Deletes a stream permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsIdPermissionsPidDeleteAsync (string id, int? pid);

        /// <summary>
        /// Delete a stream permission
        /// </summary>
        /// <remarks>
        /// Deletes a stream permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdPermissionsPidDeleteAsyncWithHttpInfo (string id, int? pid);
        /// <summary>
        /// Get single permission object
        /// </summary>
        /// <remarks>
        /// Returns one stream-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Task of Permission</returns>
        System.Threading.Tasks.Task<Permission> StreamsIdPermissionsPidGetAsync (string id, int? pid);

        /// <summary>
        /// Get single permission object
        /// </summary>
        /// <remarks>
        /// Returns one stream-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Permission>> StreamsIdPermissionsPidGetAsyncWithHttpInfo (string id, int? pid);
        /// <summary>
        /// Grant permission
        /// </summary>
        /// <remarks>
        /// Grant a new permission to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Task of Permission</returns>
        System.Threading.Tasks.Task<Permission> StreamsIdPermissionsPostAsync (string id, Permission body);

        /// <summary>
        /// Grant permission
        /// </summary>
        /// <remarks>
        /// Grant a new permission to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Permission>> StreamsIdPermissionsPostAsyncWithHttpInfo (string id, Permission body);
        /// <summary>
        /// Update a stream
        /// </summary>
        /// <remarks>
        /// Updates a stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be updated</param>
        /// <param name="body">StreamCreateRequest object</param>
        /// <returns>Task of Stream</returns>
        System.Threading.Tasks.Task<Stream> StreamsIdPutAsync (string id, StreamCreateRequest body);

        /// <summary>
        /// Update a stream
        /// </summary>
        /// <remarks>
        /// Updates a stream.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be updated</param>
        /// <param name="body">StreamCreateRequest object</param>
        /// <returns>Task of ApiResponse (Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stream>> StreamsIdPutAsyncWithHttpInfo (string id, StreamCreateRequest body);
        /// <summary>
        /// Create a new stream
        /// </summary>
        /// <remarks>
        /// Creates a new stream. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Stream object</param>
        /// <returns>Task of Stream</returns>
        System.Threading.Tasks.Task<Stream> StreamsPostAsync (StreamCreateRequest body);

        /// <summary>
        /// Create a new stream
        /// </summary>
        /// <remarks>
        /// Creates a new stream. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Stream object</param>
        /// <returns>Task of ApiResponse (Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stream>> StreamsPostAsyncWithHttpInfo (StreamCreateRequest body);
        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsStreamIdKeysIdDeleteAsync (string streamId, string id);

        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeysIdDeleteAsyncWithHttpInfo (string streamId, string id);
        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission
        /// </summary>
        /// <remarks>
        /// Update Stream&#39;s Key&#39;s name and permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsStreamIdKeysIdPutAsync (UpdateStreamKeyRequest body, string streamId, string id);

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission
        /// </summary>
        /// <remarks>
        /// Update Stream&#39;s Key&#39;s name and permission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeysIdPutAsyncWithHttpInfo (UpdateStreamKeyRequest body, string streamId, string id);
        /// <summary>
        /// Delete user API key
        /// </summary>
        /// <remarks>
        /// Revoke and delete a user API key. Can only be called by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersMeKeysIdDeleteAsync (string id);

        /// <summary>
        /// Delete user API key
        /// </summary>
        /// <remarks>
        /// Revoke and delete a user API key. Can only be called by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersMeKeysIdDeleteAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StreamsApi : IStreamsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreamsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StreamsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List streams Lists the streams available to the user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return streams that exactly match the given name. (optional)</param>
        /// <param name="uiChannel">Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false. (optional, default to false)</param>
        /// <param name="noConfig">Remove config object from JSON response. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to stream_get)</param>
        /// <returns>List&lt;Stream&gt;</returns>
        public List<Stream> StreamsGet (string name = null, bool? uiChannel = null, bool? noConfig = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {
             ApiResponse<List<Stream>> localVarResponse = StreamsGetWithHttpInfo(name, uiChannel, noConfig, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List streams Lists the streams available to the user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return streams that exactly match the given name. (optional)</param>
        /// <param name="uiChannel">Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false. (optional, default to false)</param>
        /// <param name="noConfig">Remove config object from JSON response. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to stream_get)</param>
        /// <returns>ApiResponse of List&lt;Stream&gt;</returns>
        public ApiResponse< List<Stream> > StreamsGetWithHttpInfo (string name = null, bool? uiChannel = null, bool? noConfig = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {

            var localVarPath = "/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (uiChannel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uiChannel", uiChannel)); // query parameter
            if (noConfig != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "noConfig", noConfig)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stream>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Stream>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stream>)));
        }

        /// <summary>
        /// List streams Lists the streams available to the user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return streams that exactly match the given name. (optional)</param>
        /// <param name="uiChannel">Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false. (optional, default to false)</param>
        /// <param name="noConfig">Remove config object from JSON response. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to stream_get)</param>
        /// <returns>Task of List&lt;Stream&gt;</returns>
        public async System.Threading.Tasks.Task<List<Stream>> StreamsGetAsync (string name = null, bool? uiChannel = null, bool? noConfig = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {
             ApiResponse<List<Stream>> localVarResponse = await StreamsGetAsyncWithHttpInfo(name, uiChannel, noConfig, search, sortBy, order, max, offset, grantedAccess, publicAccess, operation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List streams Lists the streams available to the user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return streams that exactly match the given name. (optional)</param>
        /// <param name="uiChannel">Filter by whether this stream is an UI channel or not. UI channels are streams used to push updates to visualisation widgets. For the typical list of streams, set this to false. (optional, default to false)</param>
        /// <param name="noConfig">Remove config object from JSON response. (optional, default to false)</param>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to stream_get)</param>
        /// <returns>Task of ApiResponse (List&lt;Stream&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Stream>>> StreamsGetAsyncWithHttpInfo (string name = null, bool? uiChannel = null, bool? noConfig = null, string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null)
        {

            var localVarPath = "/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (uiChannel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uiChannel", uiChannel)); // query parameter
            if (noConfig != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "noConfig", noConfig)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stream>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Stream>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stream>)));
        }

        /// <summary>
        /// Get events from a timestamp or reference from the stream Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns></returns>
        public void StreamsIdDataPartitionsPartitionFromGet (string id, int? partition, int? fromTimestamp, int? fromSequenceNumber = null, string publisherId = null)
        {
             StreamsIdDataPartitionsPartitionFromGetWithHttpInfo(id, partition, fromTimestamp, fromSequenceNumber, publisherId);
        }

        /// <summary>
        /// Get events from a timestamp or reference from the stream Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsIdDataPartitionsPartitionFromGetWithHttpInfo (string id, int? partition, int? fromTimestamp, int? fromSequenceNumber = null, string publisherId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDataPartitionsPartitionFromGet");
            // verify the required parameter 'partition' is set
            if (partition == null)
                throw new ApiException(400, "Missing required parameter 'partition' when calling StreamsApi->StreamsIdDataPartitionsPartitionFromGet");
            // verify the required parameter 'fromTimestamp' is set
            if (fromTimestamp == null)
                throw new ApiException(400, "Missing required parameter 'fromTimestamp' when calling StreamsApi->StreamsIdDataPartitionsPartitionFromGet");

            var localVarPath = "/streams/{id}/data/partitions/{partition}/from";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partition != null) localVarPathParams.Add("partition", this.Configuration.ApiClient.ParameterToString(partition)); // path parameter
            if (fromTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTimestamp", fromTimestamp)); // query parameter
            if (fromSequenceNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromSequenceNumber", fromSequenceNumber)); // query parameter
            if (publisherId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publisherId", publisherId)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDataPartitionsPartitionFromGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get events from a timestamp or reference from the stream Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsIdDataPartitionsPartitionFromGetAsync (string id, int? partition, int? fromTimestamp, int? fromSequenceNumber = null, string publisherId = null)
        {
             await StreamsIdDataPartitionsPartitionFromGetAsyncWithHttpInfo(id, partition, fromTimestamp, fromSequenceNumber, publisherId);

        }

        /// <summary>
        /// Get events from a timestamp or reference from the stream Get events from a timestamp or reference from the stream. The starting point can be defined by a timestamp or by a message reference (timestamp and sequence number). The publisher must be specified in the case of message reference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDataPartitionsPartitionFromGetAsyncWithHttpInfo (string id, int? partition, int? fromTimestamp, int? fromSequenceNumber = null, string publisherId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDataPartitionsPartitionFromGet");
            // verify the required parameter 'partition' is set
            if (partition == null)
                throw new ApiException(400, "Missing required parameter 'partition' when calling StreamsApi->StreamsIdDataPartitionsPartitionFromGet");
            // verify the required parameter 'fromTimestamp' is set
            if (fromTimestamp == null)
                throw new ApiException(400, "Missing required parameter 'fromTimestamp' when calling StreamsApi->StreamsIdDataPartitionsPartitionFromGet");

            var localVarPath = "/streams/{id}/data/partitions/{partition}/from";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partition != null) localVarPathParams.Add("partition", this.Configuration.ApiClient.ParameterToString(partition)); // path parameter
            if (fromTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTimestamp", fromTimestamp)); // query parameter
            if (fromSequenceNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromSequenceNumber", fromSequenceNumber)); // query parameter
            if (publisherId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publisherId", publisherId)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDataPartitionsPartitionFromGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get most recent events from a stream Get the N most recent events from a stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="count">Number of messages to fetch (optional, default to 1)</param>
        /// <returns></returns>
        public void StreamsIdDataPartitionsPartitionLastGet (string id, int? partition, int? count = null)
        {
             StreamsIdDataPartitionsPartitionLastGetWithHttpInfo(id, partition, count);
        }

        /// <summary>
        /// Get most recent events from a stream Get the N most recent events from a stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="count">Number of messages to fetch (optional, default to 1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsIdDataPartitionsPartitionLastGetWithHttpInfo (string id, int? partition, int? count = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDataPartitionsPartitionLastGet");
            // verify the required parameter 'partition' is set
            if (partition == null)
                throw new ApiException(400, "Missing required parameter 'partition' when calling StreamsApi->StreamsIdDataPartitionsPartitionLastGet");

            var localVarPath = "/streams/{id}/data/partitions/{partition}/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partition != null) localVarPathParams.Add("partition", this.Configuration.ApiClient.ParameterToString(partition)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            string jsonBody = localVarResponse.Content;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDataPartitionsPartitionLastGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                jsonBody);
        }

        /// <summary>
        /// Get most recent events from a stream Get the N most recent events from a stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="count">Number of messages to fetch (optional, default to 1)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsIdDataPartitionsPartitionLastGetAsync (string id, int? partition, int? count = null)
        {
             await StreamsIdDataPartitionsPartitionLastGetAsyncWithHttpInfo(id, partition, count);

        }

        /// <summary>
        /// Get most recent events from a stream Get the N most recent events from a stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="count">Number of messages to fetch (optional, default to 1)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDataPartitionsPartitionLastGetAsyncWithHttpInfo (string id, int? partition, int? count = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDataPartitionsPartitionLastGet");
            // verify the required parameter 'partition' is set
            if (partition == null)
                throw new ApiException(400, "Missing required parameter 'partition' when calling StreamsApi->StreamsIdDataPartitionsPartitionLastGet");

            var localVarPath = "/streams/{id}/data/partitions/{partition}/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partition != null) localVarPathParams.Add("partition", this.Configuration.ApiClient.ParameterToString(partition)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDataPartitionsPartitionLastGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get events between a range from the stream Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="toTimestamp">Timestamp upper bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="toSequenceNumber">Sequence number upper bound of toTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns></returns>
        public void StreamsIdDataPartitionsPartitionRangeGet (string id, int? partition, int? fromTimestamp, int? toTimestamp, int? fromSequenceNumber = null, int? toSequenceNumber = null, string publisherId = null)
        {
             StreamsIdDataPartitionsPartitionRangeGetWithHttpInfo(id, partition, fromTimestamp, toTimestamp, fromSequenceNumber, toSequenceNumber, publisherId);
        }

        /// <summary>
        /// Get events between a range from the stream Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="toTimestamp">Timestamp upper bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="toSequenceNumber">Sequence number upper bound of toTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsIdDataPartitionsPartitionRangeGetWithHttpInfo (string id, int? partition, int? fromTimestamp, int? toTimestamp, int? fromSequenceNumber = null, int? toSequenceNumber = null, string publisherId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDataPartitionsPartitionRangeGet");
            // verify the required parameter 'partition' is set
            if (partition == null)
                throw new ApiException(400, "Missing required parameter 'partition' when calling StreamsApi->StreamsIdDataPartitionsPartitionRangeGet");
            // verify the required parameter 'fromTimestamp' is set
            if (fromTimestamp == null)
                throw new ApiException(400, "Missing required parameter 'fromTimestamp' when calling StreamsApi->StreamsIdDataPartitionsPartitionRangeGet");
            // verify the required parameter 'toTimestamp' is set
            if (toTimestamp == null)
                throw new ApiException(400, "Missing required parameter 'toTimestamp' when calling StreamsApi->StreamsIdDataPartitionsPartitionRangeGet");

            var localVarPath = "/streams/{id}/data/partitions/{partition}/range";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partition != null) localVarPathParams.Add("partition", this.Configuration.ApiClient.ParameterToString(partition)); // path parameter
            if (fromTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTimestamp", fromTimestamp)); // query parameter
            if (fromSequenceNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromSequenceNumber", fromSequenceNumber)); // query parameter
            if (toTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toTimestamp", toTimestamp)); // query parameter
            if (toSequenceNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toSequenceNumber", toSequenceNumber)); // query parameter
            if (publisherId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publisherId", publisherId)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDataPartitionsPartitionRangeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get events between a range from the stream Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="toTimestamp">Timestamp upper bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="toSequenceNumber">Sequence number upper bound of toTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsIdDataPartitionsPartitionRangeGetAsync (string id, int? partition, int? fromTimestamp, int? toTimestamp, int? fromSequenceNumber = null, int? toSequenceNumber = null, string publisherId = null)
        {
             await StreamsIdDataPartitionsPartitionRangeGetAsyncWithHttpInfo(id, partition, fromTimestamp, toTimestamp, fromSequenceNumber, toSequenceNumber, publisherId);

        }

        /// <summary>
        /// Get events between a range from the stream Get events between a range from the stream. The range can be defined between two timestamps or between two message references (timestamp and sequence number). The publisher must be specified in the case of message references.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="partition">Partition number</param>
        /// <param name="fromTimestamp">Timestamp lower bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="toTimestamp">Timestamp upper bound in milliseconds since Jan 1st 1970 UTC</param>
        /// <param name="fromSequenceNumber">Sequence number lower bound of fromTimestamp (optional)</param>
        /// <param name="toSequenceNumber">Sequence number upper bound of toTimestamp (optional)</param>
        /// <param name="publisherId">Id of the publisher of the two message references, in case sequence numbers are defined (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDataPartitionsPartitionRangeGetAsyncWithHttpInfo (string id, int? partition, int? fromTimestamp, int? toTimestamp, int? fromSequenceNumber = null, int? toSequenceNumber = null, string publisherId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDataPartitionsPartitionRangeGet");
            // verify the required parameter 'partition' is set
            if (partition == null)
                throw new ApiException(400, "Missing required parameter 'partition' when calling StreamsApi->StreamsIdDataPartitionsPartitionRangeGet");
            // verify the required parameter 'fromTimestamp' is set
            if (fromTimestamp == null)
                throw new ApiException(400, "Missing required parameter 'fromTimestamp' when calling StreamsApi->StreamsIdDataPartitionsPartitionRangeGet");
            // verify the required parameter 'toTimestamp' is set
            if (toTimestamp == null)
                throw new ApiException(400, "Missing required parameter 'toTimestamp' when calling StreamsApi->StreamsIdDataPartitionsPartitionRangeGet");

            var localVarPath = "/streams/{id}/data/partitions/{partition}/range";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partition != null) localVarPathParams.Add("partition", this.Configuration.ApiClient.ParameterToString(partition)); // path parameter
            if (fromTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTimestamp", fromTimestamp)); // query parameter
            if (fromSequenceNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromSequenceNumber", fromSequenceNumber)); // query parameter
            if (toTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toTimestamp", toTimestamp)); // query parameter
            if (toSequenceNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toSequenceNumber", toSequenceNumber)); // query parameter
            if (publisherId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publisherId", publisherId)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDataPartitionsPartitionRangeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new event to stream Add a new event to the stream identified by id. Requires a write permission on the stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="ttl">Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default. (optional)</param>
        /// <param name="pkey">For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected. (optional)</param>
        /// <param name="signatureType">Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0. (optional)</param>
        /// <param name="address">Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0. (optional)</param>
        /// <param name="signature">If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the &#39;address&#39; query parameter. This parameter is not needed if the signature type is 0. (optional)</param>
        /// <returns></returns>
        public void StreamsIdDataPost (string id, string jsonData, int? ttl = null, string pkey = null, int? signatureType = null, string address = null, string signature = null)
        {
             StreamsIdDataPostWithHttpInfo(id, jsonData, ttl, pkey, signatureType, address, signature);
        }

        /// <summary>
        /// Add new event to stream Add a new event to the stream identified by id. Requires a write permission on the stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="ttl">Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default. (optional)</param>
        /// <param name="pkey">For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected. (optional)</param>
        /// <param name="signatureType">Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0. (optional)</param>
        /// <param name="address">Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0. (optional)</param>
        /// <param name="signature">If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the &#39;address&#39; query parameter. This parameter is not needed if the signature type is 0. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsIdDataPostWithHttpInfo (string id, string jsonData, int? ttl = null, string pkey = null, int? signatureType = null, string address = null, string signature = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDataPost");

            var localVarPath = "/streams/{id}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = jsonData;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ttl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ttl", ttl)); // query parameter
            if (pkey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pkey", pkey)); // query parameter
            if (signatureType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signatureType", signatureType)); // query parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (signature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signature", signature)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new event to stream Add a new event to the stream identified by id. Requires a write permission on the stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="ttl">Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default. (optional)</param>
        /// <param name="pkey">For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected. (optional)</param>
        /// <param name="signatureType">Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0. (optional)</param>
        /// <param name="address">Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0. (optional)</param>
        /// <param name="signature">If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the &#39;address&#39; query parameter. This parameter is not needed if the signature type is 0. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsIdDataPostAsync (string id, int? ttl = null, string pkey = null, int? signatureType = null, string address = null, string signature = null)
        {
             await StreamsIdDataPostAsyncWithHttpInfo(id, ttl, pkey, signatureType, address, signature);

        }

        /// <summary>
        /// Add new event to stream Add a new event to the stream identified by id. Requires a write permission on the stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="ttl">Time-To-Live, in seconds. The event will be deleted after this time has passed. If not given, the event storage period will be the stream default. (optional)</param>
        /// <param name="pkey">For partitioned streams, provides the key to partition by. Can be eg. a customer id to make all events for that customer to go to the same Canvas for processing. If not given, a random partition is selected. (optional)</param>
        /// <param name="signatureType">Signature type of the signature query parameter. 1 for Ethereum signature, 0 for no signature. If not given, defaults to 0. (optional)</param>
        /// <param name="address">Ethereum address of the publisher in case the signature type is 1. The parameter is not needed if the signature type is 0. (optional)</param>
        /// <param name="signature">If the signature type is 1, this parameter is the hex string representation of the Ethereum signature produced by the Ethereum address provided in the &#39;address&#39; query parameter. This parameter is not needed if the signature type is 0. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDataPostAsyncWithHttpInfo (string id, int? ttl = null, string pkey = null, int? signatureType = null, string address = null, string signature = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDataPost");

            var localVarPath = "/streams/{id}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ttl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ttl", ttl)); // query parameter
            if (pkey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pkey", pkey)); // query parameter
            if (signatureType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signatureType", signatureType)); // query parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (signature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signature", signature)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a stream Deletes a stream by id. This will also delete all data for this stream. Use with caution!
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be deleted</param>
        /// <returns></returns>
        public void StreamsIdDelete (string id)
        {
             StreamsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a stream Deletes a stream by id. This will also delete all data for this stream. Use with caution!
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDelete");

            var localVarPath = "/streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a stream Deletes a stream by id. This will also delete all data for this stream. Use with caution!
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsIdDeleteAsync (string id)
        {
             await StreamsIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a stream Deletes a stream by id. This will also delete all data for this stream. Use with caution!
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDelete");

            var localVarPath = "/streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detect stream&#39;s field types. Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns></returns>
        public void StreamsIdDetectFieldsGet (string id, bool? flatten = null)
        {
             StreamsIdDetectFieldsGetWithHttpInfo(id, flatten);
        }

        /// <summary>
        /// Detect stream&#39;s field types. Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsIdDetectFieldsGetWithHttpInfo (string id, bool? flatten = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDetectFieldsGet");

            var localVarPath = "/streams/{id}/detectFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (flatten != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flatten", flatten)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDetectFieldsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detect stream&#39;s field types. Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsIdDetectFieldsGetAsync (string id, bool? flatten = null)
        {
             await StreamsIdDetectFieldsGetAsyncWithHttpInfo(id, flatten);

        }

        /// <summary>
        /// Detect stream&#39;s field types. Automatically detects fields of given Stream by analyzing recent data. Do not save fields to stream details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDetectFieldsGetAsyncWithHttpInfo (string id, bool? flatten = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDetectFieldsGet");

            var localVarPath = "/streams/{id}/detectFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (flatten != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flatten", flatten)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDetectFieldsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detect stream&#39;s field types. Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns></returns>
        public void StreamsIdDetectFieldsPost (string id, bool? flatten = null)
        {
             StreamsIdDetectFieldsPostWithHttpInfo(id, flatten);
        }

        /// <summary>
        /// Detect stream&#39;s field types. Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsIdDetectFieldsPostWithHttpInfo (string id, bool? flatten = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDetectFieldsPost");

            var localVarPath = "/streams/{id}/detectFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (flatten != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flatten", flatten)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDetectFieldsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detect stream&#39;s field types. Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsIdDetectFieldsPostAsync (string id, bool? flatten = null)
        {
             await StreamsIdDetectFieldsPostAsyncWithHttpInfo(id, flatten);

        }

        /// <summary>
        /// Detect stream&#39;s field types. Automatically detects fields of given Stream by analyzing recent data. Save fields to stream details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="flatten">Flatten hierarchies. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdDetectFieldsPostAsyncWithHttpInfo (string id, bool? flatten = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdDetectFieldsPost");

            var localVarPath = "/streams/{id}/detectFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (flatten != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flatten", flatten)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdDetectFieldsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get stream by id Returns a stream by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be fetched</param>
        /// <returns>Stream</returns>
        public Stream StreamsIdGet (string id)
        {
             ApiResponse<Stream> localVarResponse = StreamsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stream by id Returns a stream by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be fetched</param>
        /// <returns>ApiResponse of Stream</returns>
        public ApiResponse< Stream > StreamsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdGet");

            var localVarPath = "/streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        /// Get stream by id Returns a stream by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be fetched</param>
        /// <returns>Task of Stream</returns>
        public async System.Threading.Tasks.Task<Stream> StreamsIdGetAsync (string id)
        {
             ApiResponse<Stream> localVarResponse = await StreamsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stream by id Returns a stream by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be fetched</param>
        /// <returns>Task of ApiResponse (Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stream>> StreamsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdGet");

            var localVarPath = "/streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        /// List keys List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>List&lt;ResourceKey&gt;</returns>
        public List<ResourceKey> StreamsIdKeysGet (string id)
        {
             ApiResponse<List<ResourceKey>> localVarResponse = StreamsIdKeysGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List keys List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>ApiResponse of List&lt;ResourceKey&gt;</returns>
        public ApiResponse< List<ResourceKey> > StreamsIdKeysGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdKeysGet");

            var localVarPath = "/streams/{id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdKeysGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceKey>)));
        }

        /// <summary>
        /// List keys List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of List&lt;ResourceKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceKey>> StreamsIdKeysGetAsync (string id)
        {
             ApiResponse<List<ResourceKey>> localVarResponse = await StreamsIdKeysGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List keys List the keys for a given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResourceKey>>> StreamsIdKeysGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdKeysGet");

            var localVarPath = "/streams/{id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdKeysGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceKey>)));
        }

        /// <summary>
        /// Create a key Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>ResourceKey</returns>
        public ResourceKey StreamsIdKeysPost (string id, ResourceKeyCreateRequest body)
        {
             ApiResponse<ResourceKey> localVarResponse = StreamsIdKeysPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a key Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>ApiResponse of ResourceKey</returns>
        public ApiResponse< ResourceKey > StreamsIdKeysPostWithHttpInfo (string id, ResourceKeyCreateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdKeysPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsIdKeysPost");

            var localVarPath = "/streams/{id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdKeysPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceKey)));
        }

        /// <summary>
        /// Create a key Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ResourceKey</returns>
        public async System.Threading.Tasks.Task<ResourceKey> StreamsIdKeysPostAsync (string id, ResourceKeyCreateRequest body)
        {
             ApiResponse<ResourceKey> localVarResponse = await StreamsIdKeysPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a key Creates an API key for the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Key to be created</param>
        /// <returns>Task of ApiResponse (ResourceKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceKey>> StreamsIdKeysPostAsyncWithHttpInfo (string id, ResourceKeyCreateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdKeysPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsIdKeysPost");

            var localVarPath = "/streams/{id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdKeysPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceKey)));
        }

        /// <summary>
        /// List permissions Lists the permissions to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>List&lt;Permission&gt;</returns>
        public List<Permission> StreamsIdPermissionsGet (string id)
        {
             ApiResponse<List<Permission>> localVarResponse = StreamsIdPermissionsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List permissions Lists the permissions to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>ApiResponse of List&lt;Permission&gt;</returns>
        public ApiResponse< List<Permission> > StreamsIdPermissionsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPermissionsGet");

            var localVarPath = "/streams/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPermissionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Permission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Permission>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Permission>)));
        }

        /// <summary>
        /// List permissions Lists the permissions to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of List&lt;Permission&gt;</returns>
        public async System.Threading.Tasks.Task<List<Permission>> StreamsIdPermissionsGetAsync (string id)
        {
             ApiResponse<List<Permission>> localVarResponse = await StreamsIdPermissionsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List permissions Lists the permissions to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <returns>Task of ApiResponse (List&lt;Permission&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Permission>>> StreamsIdPermissionsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPermissionsGet");

            var localVarPath = "/streams/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPermissionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Permission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Permission>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Permission>)));
        }

        /// <summary>
        /// Delete a stream permission Deletes a stream permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns></returns>
        public void StreamsIdPermissionsPidDelete (string id, int? pid)
        {
             StreamsIdPermissionsPidDeleteWithHttpInfo(id, pid);
        }

        /// <summary>
        /// Delete a stream permission Deletes a stream permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsIdPermissionsPidDeleteWithHttpInfo (string id, int? pid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPermissionsPidDelete");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling StreamsApi->StreamsIdPermissionsPidDelete");

            var localVarPath = "/streams/{id}/permissions/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPermissionsPidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a stream permission Deletes a stream permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsIdPermissionsPidDeleteAsync (string id, int? pid)
        {
             await StreamsIdPermissionsPidDeleteAsyncWithHttpInfo(id, pid);

        }

        /// <summary>
        /// Delete a stream permission Deletes a stream permission by id.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsIdPermissionsPidDeleteAsyncWithHttpInfo (string id, int? pid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPermissionsPidDelete");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling StreamsApi->StreamsIdPermissionsPidDelete");

            var localVarPath = "/streams/{id}/permissions/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPermissionsPidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get single permission object Returns one stream-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Permission</returns>
        public Permission StreamsIdPermissionsPidGet (string id, int? pid)
        {
             ApiResponse<Permission> localVarResponse = StreamsIdPermissionsPidGetWithHttpInfo(id, pid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get single permission object Returns one stream-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>ApiResponse of Permission</returns>
        public ApiResponse< Permission > StreamsIdPermissionsPidGetWithHttpInfo (string id, int? pid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPermissionsPidGet");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling StreamsApi->StreamsIdPermissionsPidGet");

            var localVarPath = "/streams/{id}/permissions/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPermissionsPidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Get single permission object Returns one stream-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Task of Permission</returns>
        public async System.Threading.Tasks.Task<Permission> StreamsIdPermissionsPidGetAsync (string id, int? pid)
        {
             ApiResponse<Permission> localVarResponse = await StreamsIdPermissionsPidGetAsyncWithHttpInfo(id, pid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get single permission object Returns one stream-user-operation relationship object by its unique id.   Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="pid">ID of the permission to be fetched</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Permission>> StreamsIdPermissionsPidGetAsyncWithHttpInfo (string id, int? pid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPermissionsPidGet");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling StreamsApi->StreamsIdPermissionsPidGet");

            var localVarPath = "/streams/{id}/permissions/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPermissionsPidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Grant permission Grant a new permission to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Permission</returns>
        public Permission StreamsIdPermissionsPost (string id, Permission body)
        {
             ApiResponse<Permission> localVarResponse = StreamsIdPermissionsPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grant permission Grant a new permission to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>ApiResponse of Permission</returns>
        public ApiResponse< Permission > StreamsIdPermissionsPostWithHttpInfo (string id, Permission body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPermissionsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsIdPermissionsPost");

            var localVarPath = "/streams/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPermissionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Grant permission Grant a new permission to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Task of Permission</returns>
        public async System.Threading.Tasks.Task<Permission> StreamsIdPermissionsPostAsync (string id, Permission body)
        {
             ApiResponse<Permission> localVarResponse = await StreamsIdPermissionsPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grant permission Grant a new permission to given stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream</param>
        /// <param name="body">Requested permission (id ignored)</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Permission>> StreamsIdPermissionsPostAsyncWithHttpInfo (string id, Permission body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPermissionsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsIdPermissionsPost");

            var localVarPath = "/streams/{id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPermissionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Update a stream Updates a stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be updated</param>
        /// <param name="body">StreamCreateRequest object</param>
        /// <returns>Stream</returns>
        public Stream StreamsIdPut (string id, StreamCreateRequest body)
        {
             ApiResponse<Stream> localVarResponse = StreamsIdPutWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a stream Updates a stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be updated</param>
        /// <param name="body">StreamCreateRequest object</param>
        /// <returns>ApiResponse of Stream</returns>
        public ApiResponse< Stream > StreamsIdPutWithHttpInfo (string id, StreamCreateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsIdPut");

            var localVarPath = "/streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        /// Update a stream Updates a stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be updated</param>
        /// <param name="body">StreamCreateRequest object</param>
        /// <returns>Task of Stream</returns>
        public async System.Threading.Tasks.Task<Stream> StreamsIdPutAsync (string id, StreamCreateRequest body)
        {
             ApiResponse<Stream> localVarResponse = await StreamsIdPutAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a stream Updates a stream.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the stream to be updated</param>
        /// <param name="body">StreamCreateRequest object</param>
        /// <returns>Task of ApiResponse (Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stream>> StreamsIdPutAsyncWithHttpInfo (string id, StreamCreateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsIdPut");

            var localVarPath = "/streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        /// Create a new stream Creates a new stream. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Stream object</param>
        /// <returns>Stream</returns>
        public Stream StreamsPost (StreamCreateRequest body)
        {
             ApiResponse<Stream> localVarResponse = StreamsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new stream Creates a new stream. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Stream object</param>
        /// <returns>ApiResponse of Stream</returns>
        public ApiResponse< Stream > StreamsPostWithHttpInfo (StreamCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsPost");

            var localVarPath = "/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        /// Create a new stream Creates a new stream. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Stream object</param>
        /// <returns>Task of Stream</returns>
        public async System.Threading.Tasks.Task<Stream> StreamsPostAsync (StreamCreateRequest body)
        {
             ApiResponse<Stream> localVarResponse = await StreamsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new stream Creates a new stream. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Stream object</param>
        /// <returns>Task of ApiResponse (Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stream>> StreamsPostAsyncWithHttpInfo (StreamCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsPost");

            var localVarPath = "/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        /// Delete a key Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns></returns>
        public void StreamsStreamIdKeysIdDelete (string streamId, string id)
        {
             StreamsStreamIdKeysIdDeleteWithHttpInfo(streamId, id);
        }

        /// <summary>
        /// Delete a key Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsStreamIdKeysIdDeleteWithHttpInfo (string streamId, string id)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling StreamsApi->StreamsStreamIdKeysIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsStreamIdKeysIdDelete");

            var localVarPath = "/streams/{streamId}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsStreamIdKeysIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a key Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsStreamIdKeysIdDeleteAsync (string streamId, string id)
        {
             await StreamsStreamIdKeysIdDeleteAsyncWithHttpInfo(streamId, id);

        }

        /// <summary>
        /// Delete a key Deletes an API key from the given Stream.  Requires &#39;share&#39; permission or ownership.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeysIdDeleteAsyncWithHttpInfo (string streamId, string id)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling StreamsApi->StreamsStreamIdKeysIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsStreamIdKeysIdDelete");

            var localVarPath = "/streams/{streamId}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsStreamIdKeysIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission Update Stream&#39;s Key&#39;s name and permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns></returns>
        public void StreamsStreamIdKeysIdPut (UpdateStreamKeyRequest body, string streamId, string id)
        {
             StreamsStreamIdKeysIdPutWithHttpInfo(body, streamId, id);
        }

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission Update Stream&#39;s Key&#39;s name and permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StreamsStreamIdKeysIdPutWithHttpInfo (UpdateStreamKeyRequest body, string streamId, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsStreamIdKeysIdPut");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling StreamsApi->StreamsStreamIdKeysIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsStreamIdKeysIdPut");

            var localVarPath = "/streams/{streamId}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsStreamIdKeysIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission Update Stream&#39;s Key&#39;s name and permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsStreamIdKeysIdPutAsync (UpdateStreamKeyRequest body, string streamId, string id)
        {
             await StreamsStreamIdKeysIdPutAsyncWithHttpInfo(body, streamId, id);

        }

        /// <summary>
        /// Update Stream&#39;s Key&#39;s name and permission Update Stream&#39;s Key&#39;s name and permission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateStreamKeyRequest object</param>
        /// <param name="streamId">ID of the stream</param>
        /// <param name="id">ID of the key to be updated</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeysIdPutAsyncWithHttpInfo (UpdateStreamKeyRequest body, string streamId, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StreamsApi->StreamsStreamIdKeysIdPut");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling StreamsApi->StreamsStreamIdKeysIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->StreamsStreamIdKeysIdPut");

            var localVarPath = "/streams/{streamId}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StreamsStreamIdKeysIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete user API key Revoke and delete a user API key. Can only be called by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns></returns>
        public void UsersMeKeysIdDelete (string id)
        {
             UsersMeKeysIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete user API key Revoke and delete a user API key. Can only be called by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersMeKeysIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->UsersMeKeysIdDelete");

            var localVarPath = "/users/me/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete user API key Revoke and delete a user API key. Can only be called by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersMeKeysIdDeleteAsync (string id)
        {
             await UsersMeKeysIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete user API key Revoke and delete a user API key. Can only be called by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the key</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersMeKeysIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StreamsApi->UsersMeKeysIdDelete");

            var localVarPath = "/users/me/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeKeysIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
