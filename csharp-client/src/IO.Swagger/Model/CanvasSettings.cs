/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CanvasSettings
    /// </summary>
    [DataContract]
    public partial class CanvasSettings :  IEquatable<CanvasSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CanvasSettings" /> class.
        /// </summary>
        /// <param name="adhoc">set to true for adhoc canvas.</param>
        /// <param name="live">set to true for live canvas (not historical).</param>
        /// <param name="speed">speed.</param>
        /// <param name="beginDate">begin date (historical mode) to start feeding from.</param>
        /// <param name="endDate">end date (historical mode) to stop feeding at.</param>
        public CanvasSettings(bool? adhoc = default(bool?), bool? live = default(bool?), string speed = default(string), DateTime? beginDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            this.Adhoc = adhoc;
            this.Live = live;
            this.Speed = speed;
            this.BeginDate = beginDate;
            this.EndDate = endDate;
        }
        
        /// <summary>
        /// set to true for adhoc canvas
        /// </summary>
        /// <value>set to true for adhoc canvas</value>
        [DataMember(Name="adhoc", EmitDefaultValue=false)]
        public bool? Adhoc { get; set; }

        /// <summary>
        /// set to true for live canvas (not historical)
        /// </summary>
        /// <value>set to true for live canvas (not historical)</value>
        [DataMember(Name="live", EmitDefaultValue=false)]
        public bool? Live { get; set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public string Speed { get; set; }

        /// <summary>
        /// begin date (historical mode) to start feeding from
        /// </summary>
        /// <value>begin date (historical mode) to start feeding from</value>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// end date (historical mode) to stop feeding at
        /// </summary>
        /// <value>end date (historical mode) to stop feeding at</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CanvasSettings {\n");
            sb.Append("  Adhoc: ").Append(Adhoc).Append("\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CanvasSettings);
        }

        /// <summary>
        /// Returns true if CanvasSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CanvasSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CanvasSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Adhoc == input.Adhoc ||
                    (this.Adhoc != null &&
                    this.Adhoc.Equals(input.Adhoc))
                ) && 
                (
                    this.Live == input.Live ||
                    (this.Live != null &&
                    this.Live.Equals(input.Live))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Adhoc != null)
                    hashCode = hashCode * 59 + this.Adhoc.GetHashCode();
                if (this.Live != null)
                    hashCode = hashCode * 59 + this.Live.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
