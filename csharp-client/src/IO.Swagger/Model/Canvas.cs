/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Canvas
    /// </summary>
    [DataContract]
    public partial class Canvas :  IEquatable<Canvas>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public CanvasState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Canvas" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Canvas() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Canvas" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for Canvas.</param>
        /// <param name="name">name (required).</param>
        /// <param name="modules">modules (required).</param>
        /// <param name="settings">settings.</param>
        /// <param name="created">when Canvas was created.</param>
        /// <param name="updated">when Canvas was last updated.</param>
        /// <param name="hasExports">whether module uses exported inputs or outputs.</param>
        /// <param name="uiChannel">uiChannel.</param>
        /// <param name="state">state.</param>
        /// <param name="adhoc">adhoc canvases are temporary canvases used for eg. historical runs..</param>
        /// <param name="serialized">indicates whether there exists a serialization of this canvas.</param>
        public Canvas(string id = default(string), string name = default(string), List<Module> modules = default(List<Module>), CanvasSettings settings = default(CanvasSettings), DateTime? created = default(DateTime?), DateTime? updated = default(DateTime?), bool? hasExports = default(bool?), UiChannel uiChannel = default(UiChannel), CanvasState? state = default(CanvasState?), bool? adhoc = default(bool?), bool? serialized = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Canvas and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "modules" is required (not null)
            if (modules == null)
            {
                throw new InvalidDataException("modules is a required property for Canvas and cannot be null");
            }
            else
            {
                this.Modules = modules;
            }
            this.Id = id;
            this.Settings = settings;
            this.Created = created;
            this.Updated = updated;
            this.HasExports = hasExports;
            this.UiChannel = uiChannel;
            this.State = state;
            this.Adhoc = adhoc;
            this.Serialized = serialized;
        }
        
        /// <summary>
        /// Unique identifier for Canvas
        /// </summary>
        /// <value>Unique identifier for Canvas</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Modules
        /// </summary>
        [DataMember(Name="modules", EmitDefaultValue=false)]
        public List<Module> Modules { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public CanvasSettings Settings { get; set; }

        /// <summary>
        /// when Canvas was created
        /// </summary>
        /// <value>when Canvas was created</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// when Canvas was last updated
        /// </summary>
        /// <value>when Canvas was last updated</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// whether module uses exported inputs or outputs
        /// </summary>
        /// <value>whether module uses exported inputs or outputs</value>
        [DataMember(Name="hasExports", EmitDefaultValue=false)]
        public bool? HasExports { get; set; }

        /// <summary>
        /// Gets or Sets UiChannel
        /// </summary>
        [DataMember(Name="uiChannel", EmitDefaultValue=false)]
        public UiChannel UiChannel { get; set; }


        /// <summary>
        /// adhoc canvases are temporary canvases used for eg. historical runs.
        /// </summary>
        /// <value>adhoc canvases are temporary canvases used for eg. historical runs.</value>
        [DataMember(Name="adhoc", EmitDefaultValue=false)]
        public bool? Adhoc { get; set; }

        /// <summary>
        /// indicates whether there exists a serialization of this canvas
        /// </summary>
        /// <value>indicates whether there exists a serialization of this canvas</value>
        [DataMember(Name="serialized", EmitDefaultValue=false)]
        public bool? Serialized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Canvas {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  HasExports: ").Append(HasExports).Append("\n");
            sb.Append("  UiChannel: ").Append(UiChannel).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Adhoc: ").Append(Adhoc).Append("\n");
            sb.Append("  Serialized: ").Append(Serialized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Canvas);
        }

        /// <summary>
        /// Returns true if Canvas instances are equal
        /// </summary>
        /// <param name="input">Instance of Canvas to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Canvas input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Modules == input.Modules ||
                    this.Modules != null &&
                    this.Modules.SequenceEqual(input.Modules)
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.HasExports == input.HasExports ||
                    (this.HasExports != null &&
                    this.HasExports.Equals(input.HasExports))
                ) && 
                (
                    this.UiChannel == input.UiChannel ||
                    (this.UiChannel != null &&
                    this.UiChannel.Equals(input.UiChannel))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Adhoc == input.Adhoc ||
                    (this.Adhoc != null &&
                    this.Adhoc.Equals(input.Adhoc))
                ) && 
                (
                    this.Serialized == input.Serialized ||
                    (this.Serialized != null &&
                    this.Serialized.Equals(input.Serialized))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Modules != null)
                    hashCode = hashCode * 59 + this.Modules.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.HasExports != null)
                    hashCode = hashCode * 59 + this.HasExports.GetHashCode();
                if (this.UiChannel != null)
                    hashCode = hashCode * 59 + this.UiChannel.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Adhoc != null)
                    hashCode = hashCode * 59 + this.Adhoc.GetHashCode();
                if (this.Serialized != null)
                    hashCode = hashCode * 59 + this.Serialized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
