/* 
 * Streamr API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List products
        /// </summary>
        /// <remarks>
        /// Lists products according to provided parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to product_get)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ProductsGet (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null);

        /// <summary>
        /// List products
        /// </summary>
        /// <remarks>
        /// Lists products according to provided parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to product_get)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ProductsGetWithHttpInfo (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null);
        /// <summary>
        /// Deploy free Product
        /// </summary>
        /// <remarks>
        /// Deploy a free Product (price &#x3D; 0) so that it is publicly viewable and purchasable. Its streams are made public as well.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        Product ProductsIdDeployFreePost (string id);

        /// <summary>
        /// Deploy free Product
        /// </summary>
        /// <remarks>
        /// Deploy a free Product (price &#x3D; 0) so that it is publicly viewable and purchasable. Its streams are made public as well.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdDeployFreePostWithHttpInfo (string id);
        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Get a Product by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        Product ProductsIdGet (string id);

        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Get a Product by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdGetWithHttpInfo (string id);
        /// <summary>
        /// Attach image to Product
        /// </summary>
        /// <remarks>
        /// Upload and attach an image to a Product. Supported formats: JPG or PNG.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="_file">Image file. JPG or PNG. (optional)</param>
        /// <returns>Product</returns>
        Product ProductsIdImagesPost (string id, System.IO.Stream _file = null);

        /// <summary>
        /// Attach image to Product
        /// </summary>
        /// <remarks>
        /// Upload and attach an image to a Product. Supported formats: JPG or PNG.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="_file">Image file. JPG or PNG. (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdImagesPostWithHttpInfo (string id, System.IO.Stream _file = null);
        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated Product. When performing on a paid Product with state &#x60;DEPLOYED&#x60; or a free Product, can leave out fields &#x60;ownerAddress&#x60;, &#x60;beneficiaryAddress&#x60;, &#x60;pricePerSecond&#x60;, &#x60;priceCurrency&#x60;, and &#x60;minimumSubscriptionInSeconds&#x60; since they are ignored anyway.</param>
        /// <returns>Product</returns>
        Product ProductsIdPut (string id, UpdateProduct body);

        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated Product. When performing on a paid Product with state &#x60;DEPLOYED&#x60; or a free Product, can leave out fields &#x60;ownerAddress&#x60;, &#x60;beneficiaryAddress&#x60;, &#x60;pricePerSecond&#x60;, &#x60;priceCurrency&#x60;, and &#x60;minimumSubscriptionInSeconds&#x60; since they are ignored anyway.</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdPutWithHttpInfo (string id, UpdateProduct body);
        /// <summary>
        /// Transition Product to state DEPLOYED
        /// </summary>
        /// <remarks>
        /// Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; / &#x60;DEPLOYING&#x60; to &#x60;DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Deployed product and transaction block number information</param>
        /// <returns>Product</returns>
        Product ProductsIdSetDeployedPost (string id, DeployedProduct body);

        /// <summary>
        /// Transition Product to state DEPLOYED
        /// </summary>
        /// <remarks>
        /// Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; / &#x60;DEPLOYING&#x60; to &#x60;DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Deployed product and transaction block number information</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdSetDeployedPostWithHttpInfo (string id, DeployedProduct body);
        /// <summary>
        /// Transition Product to state DEPLOYING
        /// </summary>
        /// <remarks>
        /// Inform engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; to &#x60;DEPLOYING&#x60;. Should be called after transaction to submit product to marketplace has been sent to Ethereum.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        Product ProductsIdSetDeployingPost (string id);

        /// <summary>
        /// Transition Product to state DEPLOYING
        /// </summary>
        /// <remarks>
        /// Inform engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; to &#x60;DEPLOYING&#x60;. Should be called after transaction to submit product to marketplace has been sent to Ethereum.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdSetDeployingPostWithHttpInfo (string id);
        /// <summary>
        /// Update Product pricing data
        /// </summary>
        /// <remarks>
        /// Idempotent operation that sets Product&#39;s pricing details (basically stuff held in smart contract).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated product info and transaction block number</param>
        /// <returns>Product</returns>
        Product ProductsIdSetPricingPost (string id, DeployedProduct body);

        /// <summary>
        /// Update Product pricing data
        /// </summary>
        /// <remarks>
        /// Idempotent operation that sets Product&#39;s pricing details (basically stuff held in smart contract).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated product info and transaction block number</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdSetPricingPostWithHttpInfo (string id, DeployedProduct body);
        /// <summary>
        /// Transition Product to state NOT_DEPLOYED
        /// </summary>
        /// <remarks>
        /// Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; / &#x60;UNDEPLOYING&#x60; to &#x60;NOT_DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Transaction block number information</param>
        /// <returns>Product</returns>
        Product ProductsIdSetUndeployedPost (string id, UndeployedProduct body);

        /// <summary>
        /// Transition Product to state NOT_DEPLOYED
        /// </summary>
        /// <remarks>
        /// Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; / &#x60;UNDEPLOYING&#x60; to &#x60;NOT_DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Transaction block number information</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdSetUndeployedPostWithHttpInfo (string id, UndeployedProduct body);
        /// <summary>
        /// Transition Product to state UNDEPLOYING
        /// </summary>
        /// <remarks>
        /// Inform engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; to &#x60;UNDEPLOYING&#x60;. Should be called after transaction to remove product from marketplace has been sent to Ethereum.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        Product ProductsIdSetUndeployingPost (string id);

        /// <summary>
        /// Transition Product to state UNDEPLOYING
        /// </summary>
        /// <remarks>
        /// Inform engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; to &#x60;UNDEPLOYING&#x60;. Should be called after transaction to remove product from marketplace has been sent to Ethereum.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdSetUndeployingPostWithHttpInfo (string id);
        /// <summary>
        /// Get Streams of Product
        /// </summary>
        /// <remarks>
        /// Get all the Streams of a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>List&lt;Stream&gt;</returns>
        List<Stream> ProductsIdStreamsGet (string id);

        /// <summary>
        /// Get Streams of Product
        /// </summary>
        /// <remarks>
        /// Get all the Streams of a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of List&lt;Stream&gt;</returns>
        ApiResponse<List<Stream>> ProductsIdStreamsGetWithHttpInfo (string id);
        /// <summary>
        /// Remove Stream from Product
        /// </summary>
        /// <remarks>
        /// Remove a Stream from a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns></returns>
        void ProductsIdStreamsStreamIdDelete (string id, string streamId);

        /// <summary>
        /// Remove Stream from Product
        /// </summary>
        /// <remarks>
        /// Remove a Stream from a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsIdStreamsStreamIdDeleteWithHttpInfo (string id, string streamId);
        /// <summary>
        /// Add Stream to Product
        /// </summary>
        /// <remarks>
        /// Add a Stream to a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns></returns>
        void ProductsIdStreamsStreamIdPut (string id, string streamId);

        /// <summary>
        /// Add Stream to Product
        /// </summary>
        /// <remarks>
        /// Add a Stream to a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsIdStreamsStreamIdPutWithHttpInfo (string id, string streamId);
        /// <summary>
        /// Undeploy free Product
        /// </summary>
        /// <remarks>
        /// Undeploy a free Product (price &#x3D; 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        Product ProductsIdUndeployFreePost (string id);

        /// <summary>
        /// Undeploy free Product
        /// </summary>
        /// <remarks>
        /// Undeploy a free Product (price &#x3D; 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsIdUndeployFreePostWithHttpInfo (string id);
        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new Product with state &#x60;NOT_DEPLOYED&#x60;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product object</param>
        /// <returns>Product</returns>
        Product ProductsPost (CreateProduct body);

        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new Product with state &#x60;NOT_DEPLOYED&#x60;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product object</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsPostWithHttpInfo (CreateProduct body);
        /// <summary>
        /// Remove troll users products
        /// </summary>
        /// <remarks>
        /// Removes users all products. Undo is not supported. Admin role is required.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the product owner</param>
        /// <returns>Product</returns>
        Product ProductsRemoveUsernameDelete (string username);

        /// <summary>
        /// Remove troll users products
        /// </summary>
        /// <remarks>
        /// Removes users all products. Undo is not supported. Admin role is required.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the product owner</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsRemoveUsernameDeleteWithHttpInfo (string username);
        /// <summary>
        /// List my products
        /// </summary>
        /// <remarks>
        /// Lists products that current user has product_share permission on
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> UsersMeProductsGet (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null);

        /// <summary>
        /// List my products
        /// </summary>
        /// <remarks>
        /// Lists products that current user has product_share permission on
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> UsersMeProductsGetWithHttpInfo (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List products
        /// </summary>
        /// <remarks>
        /// Lists products according to provided parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to product_get)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ProductsGetAsync (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null);

        /// <summary>
        /// List products
        /// </summary>
        /// <remarks>
        /// Lists products according to provided parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to product_get)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductsGetAsyncWithHttpInfo (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null);
        /// <summary>
        /// Deploy free Product
        /// </summary>
        /// <remarks>
        /// Deploy a free Product (price &#x3D; 0) so that it is publicly viewable and purchasable. Its streams are made public as well.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdDeployFreePostAsync (string id);

        /// <summary>
        /// Deploy free Product
        /// </summary>
        /// <remarks>
        /// Deploy a free Product (price &#x3D; 0) so that it is publicly viewable and purchasable. Its streams are made public as well.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdDeployFreePostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Get a Product by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdGetAsync (string id);

        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Get a Product by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Attach image to Product
        /// </summary>
        /// <remarks>
        /// Upload and attach an image to a Product. Supported formats: JPG or PNG.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="_file">Image file. JPG or PNG. (optional)</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdImagesPostAsync (string id, System.IO.Stream _file = null);

        /// <summary>
        /// Attach image to Product
        /// </summary>
        /// <remarks>
        /// Upload and attach an image to a Product. Supported formats: JPG or PNG.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="_file">Image file. JPG or PNG. (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdImagesPostAsyncWithHttpInfo (string id, System.IO.Stream _file = null);
        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated Product. When performing on a paid Product with state &#x60;DEPLOYED&#x60; or a free Product, can leave out fields &#x60;ownerAddress&#x60;, &#x60;beneficiaryAddress&#x60;, &#x60;pricePerSecond&#x60;, &#x60;priceCurrency&#x60;, and &#x60;minimumSubscriptionInSeconds&#x60; since they are ignored anyway.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdPutAsync (string id, UpdateProduct body);

        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated Product. When performing on a paid Product with state &#x60;DEPLOYED&#x60; or a free Product, can leave out fields &#x60;ownerAddress&#x60;, &#x60;beneficiaryAddress&#x60;, &#x60;pricePerSecond&#x60;, &#x60;priceCurrency&#x60;, and &#x60;minimumSubscriptionInSeconds&#x60; since they are ignored anyway.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdPutAsyncWithHttpInfo (string id, UpdateProduct body);
        /// <summary>
        /// Transition Product to state DEPLOYED
        /// </summary>
        /// <remarks>
        /// Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; / &#x60;DEPLOYING&#x60; to &#x60;DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Deployed product and transaction block number information</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdSetDeployedPostAsync (string id, DeployedProduct body);

        /// <summary>
        /// Transition Product to state DEPLOYED
        /// </summary>
        /// <remarks>
        /// Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; / &#x60;DEPLOYING&#x60; to &#x60;DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Deployed product and transaction block number information</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetDeployedPostAsyncWithHttpInfo (string id, DeployedProduct body);
        /// <summary>
        /// Transition Product to state DEPLOYING
        /// </summary>
        /// <remarks>
        /// Inform engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; to &#x60;DEPLOYING&#x60;. Should be called after transaction to submit product to marketplace has been sent to Ethereum.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdSetDeployingPostAsync (string id);

        /// <summary>
        /// Transition Product to state DEPLOYING
        /// </summary>
        /// <remarks>
        /// Inform engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; to &#x60;DEPLOYING&#x60;. Should be called after transaction to submit product to marketplace has been sent to Ethereum.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetDeployingPostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update Product pricing data
        /// </summary>
        /// <remarks>
        /// Idempotent operation that sets Product&#39;s pricing details (basically stuff held in smart contract).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated product info and transaction block number</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdSetPricingPostAsync (string id, DeployedProduct body);

        /// <summary>
        /// Update Product pricing data
        /// </summary>
        /// <remarks>
        /// Idempotent operation that sets Product&#39;s pricing details (basically stuff held in smart contract).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated product info and transaction block number</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetPricingPostAsyncWithHttpInfo (string id, DeployedProduct body);
        /// <summary>
        /// Transition Product to state NOT_DEPLOYED
        /// </summary>
        /// <remarks>
        /// Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; / &#x60;UNDEPLOYING&#x60; to &#x60;NOT_DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Transaction block number information</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdSetUndeployedPostAsync (string id, UndeployedProduct body);

        /// <summary>
        /// Transition Product to state NOT_DEPLOYED
        /// </summary>
        /// <remarks>
        /// Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; / &#x60;UNDEPLOYING&#x60; to &#x60;NOT_DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Transaction block number information</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetUndeployedPostAsyncWithHttpInfo (string id, UndeployedProduct body);
        /// <summary>
        /// Transition Product to state UNDEPLOYING
        /// </summary>
        /// <remarks>
        /// Inform engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; to &#x60;UNDEPLOYING&#x60;. Should be called after transaction to remove product from marketplace has been sent to Ethereum.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdSetUndeployingPostAsync (string id);

        /// <summary>
        /// Transition Product to state UNDEPLOYING
        /// </summary>
        /// <remarks>
        /// Inform engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; to &#x60;UNDEPLOYING&#x60;. Should be called after transaction to remove product from marketplace has been sent to Ethereum.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetUndeployingPostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Streams of Product
        /// </summary>
        /// <remarks>
        /// Get all the Streams of a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of List&lt;Stream&gt;</returns>
        System.Threading.Tasks.Task<List<Stream>> ProductsIdStreamsGetAsync (string id);

        /// <summary>
        /// Get Streams of Product
        /// </summary>
        /// <remarks>
        /// Get all the Streams of a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (List&lt;Stream&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Stream>>> ProductsIdStreamsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Remove Stream from Product
        /// </summary>
        /// <remarks>
        /// Remove a Stream from a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsIdStreamsStreamIdDeleteAsync (string id, string streamId);

        /// <summary>
        /// Remove Stream from Product
        /// </summary>
        /// <remarks>
        /// Remove a Stream from a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsIdStreamsStreamIdDeleteAsyncWithHttpInfo (string id, string streamId);
        /// <summary>
        /// Add Stream to Product
        /// </summary>
        /// <remarks>
        /// Add a Stream to a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsIdStreamsStreamIdPutAsync (string id, string streamId);

        /// <summary>
        /// Add Stream to Product
        /// </summary>
        /// <remarks>
        /// Add a Stream to a Product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsIdStreamsStreamIdPutAsyncWithHttpInfo (string id, string streamId);
        /// <summary>
        /// Undeploy free Product
        /// </summary>
        /// <remarks>
        /// Undeploy a free Product (price &#x3D; 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsIdUndeployFreePostAsync (string id);

        /// <summary>
        /// Undeploy free Product
        /// </summary>
        /// <remarks>
        /// Undeploy a free Product (price &#x3D; 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdUndeployFreePostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new Product with state &#x60;NOT_DEPLOYED&#x60;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product object</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsPostAsync (CreateProduct body);

        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new Product with state &#x60;NOT_DEPLOYED&#x60;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product object</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsPostAsyncWithHttpInfo (CreateProduct body);
        /// <summary>
        /// Remove troll users products
        /// </summary>
        /// <remarks>
        /// Removes users all products. Undo is not supported. Admin role is required.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the product owner</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsRemoveUsernameDeleteAsync (string username);

        /// <summary>
        /// Remove troll users products
        /// </summary>
        /// <remarks>
        /// Removes users all products. Undo is not supported. Admin role is required.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the product owner</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsRemoveUsernameDeleteAsyncWithHttpInfo (string username);
        /// <summary>
        /// List my products
        /// </summary>
        /// <remarks>
        /// Lists products that current user has product_share permission on
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> UsersMeProductsGetAsync (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null);

        /// <summary>
        /// List my products
        /// </summary>
        /// <remarks>
        /// Lists products that current user has product_share permission on
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> UsersMeProductsGetAsyncWithHttpInfo (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List products Lists products according to provided parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to product_get)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ProductsGet (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null)
        {
             ApiResponse<List<Product>> localVarResponse = ProductsGetWithHttpInfo(search, sortBy, order, max, offset, grantedAccess, publicAccess, operation, categories, states, minPrice, maxPrice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List products Lists products according to provided parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to product_get)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ProductsGetWithHttpInfo (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null)
        {

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categories", categories)); // query parameter
            if (states != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (minPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minPrice", minPrice)); // query parameter
            if (maxPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxPrice", maxPrice)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// List products Lists products according to provided parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to product_get)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ProductsGetAsync (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null)
        {
             ApiResponse<List<Product>> localVarResponse = await ProductsGetAsyncWithHttpInfo(search, sortBy, order, max, offset, grantedAccess, publicAccess, operation, categories, states, minPrice, maxPrice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List products Lists products according to provided parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="operation">Filter results by Permission (access level) (optional, default to product_get)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ProductsGetAsyncWithHttpInfo (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string operation = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null)
        {

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (operation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operation", operation)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categories", categories)); // query parameter
            if (states != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (minPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minPrice", minPrice)); // query parameter
            if (maxPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxPrice", maxPrice)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Deploy free Product Deploy a free Product (price &#x3D; 0) so that it is publicly viewable and purchasable. Its streams are made public as well.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        public Product ProductsIdDeployFreePost (string id)
        {
             ApiResponse<Product> localVarResponse = ProductsIdDeployFreePostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deploy free Product Deploy a free Product (price &#x3D; 0) so that it is publicly viewable and purchasable. Its streams are made public as well.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdDeployFreePostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdDeployFreePost");

            var localVarPath = "/products/{id}/deployFree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdDeployFreePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Deploy free Product Deploy a free Product (price &#x3D; 0) so that it is publicly viewable and purchasable. Its streams are made public as well.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdDeployFreePostAsync (string id)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdDeployFreePostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deploy free Product Deploy a free Product (price &#x3D; 0) so that it is publicly viewable and purchasable. Its streams are made public as well.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdDeployFreePostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdDeployFreePost");

            var localVarPath = "/products/{id}/deployFree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdDeployFreePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Get a Product Get a Product by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        public Product ProductsIdGet (string id)
        {
             ApiResponse<Product> localVarResponse = ProductsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Product Get a Product by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdGet");

            var localVarPath = "/products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Get a Product Get a Product by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdGetAsync (string id)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Product Get a Product by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdGet");

            var localVarPath = "/products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Attach image to Product Upload and attach an image to a Product. Supported formats: JPG or PNG.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="_file">Image file. JPG or PNG. (optional)</param>
        /// <returns>Product</returns>
        public Product ProductsIdImagesPost (string id, System.IO.Stream _file = null)
        {
             ApiResponse<Product> localVarResponse = ProductsIdImagesPostWithHttpInfo(id, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach image to Product Upload and attach an image to a Product. Supported formats: JPG or PNG.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="_file">Image file. JPG or PNG. (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdImagesPostWithHttpInfo (string id, System.IO.Stream _file = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdImagesPost");

            var localVarPath = "/products/{id}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdImagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Attach image to Product Upload and attach an image to a Product. Supported formats: JPG or PNG.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="_file">Image file. JPG or PNG. (optional)</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdImagesPostAsync (string id, System.IO.Stream _file = null)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdImagesPostAsyncWithHttpInfo(id, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach image to Product Upload and attach an image to a Product. Supported formats: JPG or PNG.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="_file">Image file. JPG or PNG. (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdImagesPostAsyncWithHttpInfo (string id, System.IO.Stream _file = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdImagesPost");

            var localVarPath = "/products/{id}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdImagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Update a Product Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated Product. When performing on a paid Product with state &#x60;DEPLOYED&#x60; or a free Product, can leave out fields &#x60;ownerAddress&#x60;, &#x60;beneficiaryAddress&#x60;, &#x60;pricePerSecond&#x60;, &#x60;priceCurrency&#x60;, and &#x60;minimumSubscriptionInSeconds&#x60; since they are ignored anyway.</param>
        /// <returns>Product</returns>
        public Product ProductsIdPut (string id, UpdateProduct body)
        {
             ApiResponse<Product> localVarResponse = ProductsIdPutWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated Product. When performing on a paid Product with state &#x60;DEPLOYED&#x60; or a free Product, can leave out fields &#x60;ownerAddress&#x60;, &#x60;beneficiaryAddress&#x60;, &#x60;pricePerSecond&#x60;, &#x60;priceCurrency&#x60;, and &#x60;minimumSubscriptionInSeconds&#x60; since they are ignored anyway.</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdPutWithHttpInfo (string id, UpdateProduct body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsIdPut");

            var localVarPath = "/products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Update a Product Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated Product. When performing on a paid Product with state &#x60;DEPLOYED&#x60; or a free Product, can leave out fields &#x60;ownerAddress&#x60;, &#x60;beneficiaryAddress&#x60;, &#x60;pricePerSecond&#x60;, &#x60;priceCurrency&#x60;, and &#x60;minimumSubscriptionInSeconds&#x60; since they are ignored anyway.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdPutAsync (string id, UpdateProduct body)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdPutAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Product Updates the non-Blockchain information of a *deployed* Product. Updates the non-Blockchain and Blockchain information of a *undeployed* and *paid* Product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated Product. When performing on a paid Product with state &#x60;DEPLOYED&#x60; or a free Product, can leave out fields &#x60;ownerAddress&#x60;, &#x60;beneficiaryAddress&#x60;, &#x60;pricePerSecond&#x60;, &#x60;priceCurrency&#x60;, and &#x60;minimumSubscriptionInSeconds&#x60; since they are ignored anyway.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdPutAsyncWithHttpInfo (string id, UpdateProduct body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsIdPut");

            var localVarPath = "/products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Transition Product to state DEPLOYED Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; / &#x60;DEPLOYING&#x60; to &#x60;DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Deployed product and transaction block number information</param>
        /// <returns>Product</returns>
        public Product ProductsIdSetDeployedPost (string id, DeployedProduct body)
        {
             ApiResponse<Product> localVarResponse = ProductsIdSetDeployedPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transition Product to state DEPLOYED Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; / &#x60;DEPLOYING&#x60; to &#x60;DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Deployed product and transaction block number information</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdSetDeployedPostWithHttpInfo (string id, DeployedProduct body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetDeployedPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsIdSetDeployedPost");

            var localVarPath = "/products/{id}/setDeployed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetDeployedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Transition Product to state DEPLOYED Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; / &#x60;DEPLOYING&#x60; to &#x60;DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Deployed product and transaction block number information</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdSetDeployedPostAsync (string id, DeployedProduct body)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdSetDeployedPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transition Product to state DEPLOYED Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; / &#x60;DEPLOYING&#x60; to &#x60;DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been added to the marketplace smart contract. Also updates Blockchain-specific information of the Product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Deployed product and transaction block number information</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetDeployedPostAsyncWithHttpInfo (string id, DeployedProduct body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetDeployedPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsIdSetDeployedPost");

            var localVarPath = "/products/{id}/setDeployed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetDeployedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Transition Product to state DEPLOYING Inform engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; to &#x60;DEPLOYING&#x60;. Should be called after transaction to submit product to marketplace has been sent to Ethereum.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        public Product ProductsIdSetDeployingPost (string id)
        {
             ApiResponse<Product> localVarResponse = ProductsIdSetDeployingPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transition Product to state DEPLOYING Inform engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; to &#x60;DEPLOYING&#x60;. Should be called after transaction to submit product to marketplace has been sent to Ethereum.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdSetDeployingPostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetDeployingPost");

            var localVarPath = "/products/{id}/setDeploying";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetDeployingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Transition Product to state DEPLOYING Inform engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; to &#x60;DEPLOYING&#x60;. Should be called after transaction to submit product to marketplace has been sent to Ethereum.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdSetDeployingPostAsync (string id)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdSetDeployingPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transition Product to state DEPLOYING Inform engine-and-editor that a Product has moved from state &#x60;NOT_DEPLOYED&#x60; to &#x60;DEPLOYING&#x60;. Should be called after transaction to submit product to marketplace has been sent to Ethereum.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetDeployingPostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetDeployingPost");

            var localVarPath = "/products/{id}/setDeploying";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetDeployingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Update Product pricing data Idempotent operation that sets Product&#39;s pricing details (basically stuff held in smart contract).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated product info and transaction block number</param>
        /// <returns>Product</returns>
        public Product ProductsIdSetPricingPost (string id, DeployedProduct body)
        {
             ApiResponse<Product> localVarResponse = ProductsIdSetPricingPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Product pricing data Idempotent operation that sets Product&#39;s pricing details (basically stuff held in smart contract).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated product info and transaction block number</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdSetPricingPostWithHttpInfo (string id, DeployedProduct body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetPricingPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsIdSetPricingPost");

            var localVarPath = "/products/{id}/setPricing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetPricingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Update Product pricing data Idempotent operation that sets Product&#39;s pricing details (basically stuff held in smart contract).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated product info and transaction block number</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdSetPricingPostAsync (string id, DeployedProduct body)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdSetPricingPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Product pricing data Idempotent operation that sets Product&#39;s pricing details (basically stuff held in smart contract).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Updated product info and transaction block number</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetPricingPostAsyncWithHttpInfo (string id, DeployedProduct body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetPricingPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsIdSetPricingPost");

            var localVarPath = "/products/{id}/setPricing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetPricingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Transition Product to state NOT_DEPLOYED Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; / &#x60;UNDEPLOYING&#x60; to &#x60;NOT_DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Transaction block number information</param>
        /// <returns>Product</returns>
        public Product ProductsIdSetUndeployedPost (string id, UndeployedProduct body)
        {
             ApiResponse<Product> localVarResponse = ProductsIdSetUndeployedPostWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transition Product to state NOT_DEPLOYED Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; / &#x60;UNDEPLOYING&#x60; to &#x60;NOT_DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Transaction block number information</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdSetUndeployedPostWithHttpInfo (string id, UndeployedProduct body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetUndeployedPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsIdSetUndeployedPost");

            var localVarPath = "/products/{id}/setUndeployed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetUndeployedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Transition Product to state NOT_DEPLOYED Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; / &#x60;UNDEPLOYING&#x60; to &#x60;NOT_DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Transaction block number information</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdSetUndeployedPostAsync (string id, UndeployedProduct body)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdSetUndeployedPostAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transition Product to state NOT_DEPLOYED Idempotent operation that informs engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; / &#x60;UNDEPLOYING&#x60; to &#x60;NOT_DEPLOYED&#x60;. Called by *Marketplace Watcher* after it notices that a Product has been removed from the marketplace contract.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="body">Transaction block number information</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetUndeployedPostAsyncWithHttpInfo (string id, UndeployedProduct body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetUndeployedPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsIdSetUndeployedPost");

            var localVarPath = "/products/{id}/setUndeployed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetUndeployedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Transition Product to state UNDEPLOYING Inform engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; to &#x60;UNDEPLOYING&#x60;. Should be called after transaction to remove product from marketplace has been sent to Ethereum.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        public Product ProductsIdSetUndeployingPost (string id)
        {
             ApiResponse<Product> localVarResponse = ProductsIdSetUndeployingPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transition Product to state UNDEPLOYING Inform engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; to &#x60;UNDEPLOYING&#x60;. Should be called after transaction to remove product from marketplace has been sent to Ethereum.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdSetUndeployingPostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetUndeployingPost");

            var localVarPath = "/products/{id}/setUndeploying";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetUndeployingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Transition Product to state UNDEPLOYING Inform engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; to &#x60;UNDEPLOYING&#x60;. Should be called after transaction to remove product from marketplace has been sent to Ethereum.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdSetUndeployingPostAsync (string id)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdSetUndeployingPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transition Product to state UNDEPLOYING Inform engine-and-editor that a Product has moved from state &#x60;DEPLOYED&#x60; to &#x60;UNDEPLOYING&#x60;. Should be called after transaction to remove product from marketplace has been sent to Ethereum.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdSetUndeployingPostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdSetUndeployingPost");

            var localVarPath = "/products/{id}/setUndeploying";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdSetUndeployingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Get Streams of Product Get all the Streams of a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>List&lt;Stream&gt;</returns>
        public List<Stream> ProductsIdStreamsGet (string id)
        {
             ApiResponse<List<Stream>> localVarResponse = ProductsIdStreamsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Streams of Product Get all the Streams of a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of List&lt;Stream&gt;</returns>
        public ApiResponse< List<Stream> > ProductsIdStreamsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdStreamsGet");

            var localVarPath = "/products/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdStreamsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stream>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Stream>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stream>)));
        }

        /// <summary>
        /// Get Streams of Product Get all the Streams of a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of List&lt;Stream&gt;</returns>
        public async System.Threading.Tasks.Task<List<Stream>> ProductsIdStreamsGetAsync (string id)
        {
             ApiResponse<List<Stream>> localVarResponse = await ProductsIdStreamsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Streams of Product Get all the Streams of a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (List&lt;Stream&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Stream>>> ProductsIdStreamsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdStreamsGet");

            var localVarPath = "/products/{id}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdStreamsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stream>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Stream>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stream>)));
        }

        /// <summary>
        /// Remove Stream from Product Remove a Stream from a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns></returns>
        public void ProductsIdStreamsStreamIdDelete (string id, string streamId)
        {
             ProductsIdStreamsStreamIdDeleteWithHttpInfo(id, streamId);
        }

        /// <summary>
        /// Remove Stream from Product Remove a Stream from a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsIdStreamsStreamIdDeleteWithHttpInfo (string id, string streamId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdStreamsStreamIdDelete");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling ProductsApi->ProductsIdStreamsStreamIdDelete");

            var localVarPath = "/products/{id}/streams/{streamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdStreamsStreamIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove Stream from Product Remove a Stream from a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsIdStreamsStreamIdDeleteAsync (string id, string streamId)
        {
             await ProductsIdStreamsStreamIdDeleteAsyncWithHttpInfo(id, streamId);

        }

        /// <summary>
        /// Remove Stream from Product Remove a Stream from a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsIdStreamsStreamIdDeleteAsyncWithHttpInfo (string id, string streamId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdStreamsStreamIdDelete");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling ProductsApi->ProductsIdStreamsStreamIdDelete");

            var localVarPath = "/products/{id}/streams/{streamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdStreamsStreamIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add Stream to Product Add a Stream to a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns></returns>
        public void ProductsIdStreamsStreamIdPut (string id, string streamId)
        {
             ProductsIdStreamsStreamIdPutWithHttpInfo(id, streamId);
        }

        /// <summary>
        /// Add Stream to Product Add a Stream to a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsIdStreamsStreamIdPutWithHttpInfo (string id, string streamId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdStreamsStreamIdPut");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling ProductsApi->ProductsIdStreamsStreamIdPut");

            var localVarPath = "/products/{id}/streams/{streamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdStreamsStreamIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add Stream to Product Add a Stream to a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsIdStreamsStreamIdPutAsync (string id, string streamId)
        {
             await ProductsIdStreamsStreamIdPutAsyncWithHttpInfo(id, streamId);

        }

        /// <summary>
        /// Add Stream to Product Add a Stream to a Product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <param name="streamId">unique identifier of a Stream</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsIdStreamsStreamIdPutAsyncWithHttpInfo (string id, string streamId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdStreamsStreamIdPut");
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling ProductsApi->ProductsIdStreamsStreamIdPut");

            var localVarPath = "/products/{id}/streams/{streamId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdStreamsStreamIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Undeploy free Product Undeploy a free Product (price &#x3D; 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Product</returns>
        public Product ProductsIdUndeployFreePost (string id)
        {
             ApiResponse<Product> localVarResponse = ProductsIdUndeployFreePostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Undeploy free Product Undeploy a free Product (price &#x3D; 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsIdUndeployFreePostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdUndeployFreePost");

            var localVarPath = "/products/{id}/undeployFree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdUndeployFreePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Undeploy free Product Undeploy a free Product (price &#x3D; 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsIdUndeployFreePostAsync (string id)
        {
             ApiResponse<Product> localVarResponse = await ProductsIdUndeployFreePostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Undeploy free Product Undeploy a free Product (price &#x3D; 0) so that it is no longer publicly viewable or purchasable. Its streams will be made private as well.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">unique identifier of a Product</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsIdUndeployFreePostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsIdUndeployFreePost");

            var localVarPath = "/products/{id}/undeployFree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsIdUndeployFreePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Create a Product Creates a new Product with state &#x60;NOT_DEPLOYED&#x60;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product object</param>
        /// <returns>Product</returns>
        public Product ProductsPost (CreateProduct body)
        {
             ApiResponse<Product> localVarResponse = ProductsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Creates a new Product with state &#x60;NOT_DEPLOYED&#x60;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product object</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsPostWithHttpInfo (CreateProduct body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsPost");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Create a Product Creates a new Product with state &#x60;NOT_DEPLOYED&#x60;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product object</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsPostAsync (CreateProduct body)
        {
             ApiResponse<Product> localVarResponse = await ProductsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Product Creates a new Product with state &#x60;NOT_DEPLOYED&#x60;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product object</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsPostAsyncWithHttpInfo (CreateProduct body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ProductsPost");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Remove troll users products Removes users all products. Undo is not supported. Admin role is required.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the product owner</param>
        /// <returns>Product</returns>
        public Product ProductsRemoveUsernameDelete (string username)
        {
             ApiResponse<Product> localVarResponse = ProductsRemoveUsernameDeleteWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove troll users products Removes users all products. Undo is not supported. Admin role is required.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the product owner</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsRemoveUsernameDeleteWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling ProductsApi->ProductsRemoveUsernameDelete");

            var localVarPath = "/products/remove/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsRemoveUsernameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Remove troll users products Removes users all products. Undo is not supported. Admin role is required.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the product owner</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsRemoveUsernameDeleteAsync (string username)
        {
             ApiResponse<Product> localVarResponse = await ProductsRemoveUsernameDeleteAsyncWithHttpInfo(username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove troll users products Removes users all products. Undo is not supported. Admin role is required.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the product owner</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsRemoveUsernameDeleteAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling ProductsApi->ProductsRemoveUsernameDelete");

            var localVarPath = "/products/remove/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsRemoveUsernameDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// List my products Lists products that current user has product_share permission on
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> UsersMeProductsGet (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null)
        {
             ApiResponse<List<Product>> localVarResponse = UsersMeProductsGetWithHttpInfo(search, sortBy, order, max, offset, grantedAccess, publicAccess, categories, states, minPrice, maxPrice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List my products Lists products that current user has product_share permission on
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > UsersMeProductsGetWithHttpInfo (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null)
        {

            var localVarPath = "/users/me/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categories", categories)); // query parameter
            if (states != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (minPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minPrice", minPrice)); // query parameter
            if (maxPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxPrice", maxPrice)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// List my products Lists products that current user has product_share permission on
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> UsersMeProductsGetAsync (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null)
        {
             ApiResponse<List<Product>> localVarResponse = await UsersMeProductsGetAsyncWithHttpInfo(search, sortBy, order, max, offset, grantedAccess, publicAccess, categories, states, minPrice, maxPrice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List my products Lists products that current user has product_share permission on
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter by search term in name or description (optional)</param>
        /// <param name="sortBy">Sort the returned results by the given field. (optional, default to id)</param>
        /// <param name="order">Control whether the results are sorted in ascending or descending order. Used with parameter &#x60;sortBy&#x60;. (optional, default to asc)</param>
        /// <param name="max">Maximum number of returned results (capped at 100) (optional, default to 100)</param>
        /// <param name="offset">Skip the first (offset) results. Used together with max for paging. (optional, default to 0)</param>
        /// <param name="grantedAccess">If false, excludes resources that user has been granted specific permission to from results. (optional, default to true)</param>
        /// <param name="publicAccess">If true, includes publicly available resources in the results. (optional, default to false)</param>
        /// <param name="categories">Filter products by category id(s) (optional)</param>
        /// <param name="states">Filter products by state(s) (optional)</param>
        /// <param name="minPrice">Minimum price (per second) of product (optional)</param>
        /// <param name="maxPrice">Maximum price (per second) of product (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> UsersMeProductsGetAsyncWithHttpInfo (string search = null, string sortBy = null, string order = null, int? max = null, int? offset = null, bool? grantedAccess = null, bool? publicAccess = null, string categories = null, string states = null, decimal? minPrice = null, decimal? maxPrice = null)
        {

            var localVarPath = "/users/me/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (grantedAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "grantedAccess", grantedAccess)); // query parameter
            if (publicAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicAccess", publicAccess)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categories", categories)); // query parameter
            if (states != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (minPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minPrice", minPrice)); // query parameter
            if (maxPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxPrice", maxPrice)); // query parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersMeProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

    }
}
